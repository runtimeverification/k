module SET
  imports private INT-SYNTAX
  imports private BASIC-K

  syntax Set [hook(SET.Set)]
  syntax Set ::= Set Set                  [left, function, hook(SET.concat), klabel(_Set_), symbol, assoc, comm, unit(.Set), idem, element(SetItem), format(%1%n%2)]
  syntax Set ::= ".Set"                   [function, total, hook(SET.unit), klabel(.Set), symbol, latex(\dotCt{Set})]
  syntax Set ::= SetItem(KItem)               [function, total, hook(SET.element), klabel(SetItem), symbol, injective]
  syntax Set ::= Set "|Set" Set              [left, function, total, hook(SET.union), comm]
  rule S1:Set |Set S2:Set => S1 (S2 -Set S1) [concrete]
  syntax Set ::= intersectSet(Set, Set)   [function, total, hook(SET.intersection), comm]
  syntax Set ::= Set "-Set" Set           [function, total, hook(SET.difference), latex({#1}-_{\it Set}{#2}), klabel(Set:difference), symbol]
  syntax Bool ::= KItem "in" Set              [function, total, hook(SET.in), klabel(Set:in), symbol]
  syntax Bool ::= Set "<=Set" Set         [function, total, hook(SET.inclusion)]
  syntax Int ::= size(Set)                [function, total, hook(SET.size)]
  syntax KItem ::= choice(Set)                [function, hook(SET.choice), klabel(Set:choice)]
endmodule


module SET-KORE-SYMBOLIC [kore,symbolic]
  imports SET
  imports private K-EQUAL
  imports private BOOL

  //Temporarly rule for #Ceil simplification, should be generated in front-end

// Matching for this version not implemented.
  // rule #Ceil(@S1:Set @S2:Set) =>
  //        {intersectSet(@S1, @S2) #Equals .Set} #And #Ceil(@S1) #And #Ceil(@S2)
  //   [simplification]

//simpler version
  rule #Ceil(@S:Set SetItem(@E:KItem)) =>
         {(@E in @S) #Equals false} #And #Ceil(@S) #And #Ceil(@E)
    [simplification]

  // -Set simplifications
  rule S              -Set .Set           => S          [simplification]
  rule .Set           -Set  _             => .Set       [simplification]
  rule SetItem(X)     -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S) [simplification]
  rule S              -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S) [simplification]
  rule (S SetItem(X)) -Set S              => SetItem(X)
                               ensures notBool (X in S) [simplification]
  rule (S SetItem(X)) -Set SetItem(X)     => S
                               ensures notBool (X in S) [simplification]
  // rule SetItem(X)     -Set S              => SetItem(X)
  //                            requires notBool (X in S)  [simplification]
  // rule (S1 SetItem(X)) -Set (S2 SetItem(X))  => S1 -Set S2
  //                             ensures notBool (X in S1)
  //                             andBool notBool (X in S2) [simplification]

  // |Set simplifications
  rule S    |Set .Set => S    [simplification, comm]
  rule S    |Set S    => S    [simplification]

  rule (S SetItem(X)) |Set SetItem(X) => S SetItem(X)
                             ensures notBool (X in S) [simplification, comm]
  // Currently disabled, see runtimeverification/haskell-backend#3301
  // rule (S SetItem(X)) |Set S          => S SetItem(X)
  //                            ensures notBool (X in S) [simplification, comm]

  // intersectSet simplifications
  rule intersectSet(.Set, _   ) => .Set    [simplification, comm]
  rule intersectSet( S  , S   ) =>  S      [simplification]

  rule intersectSet( S SetItem(X), SetItem(X))     => SetItem(X)
                                                        ensures notBool (X in S)      [simplification, comm]
  // Currently disabled, see runtimeverification/haskell-backend#3294
  // rule intersectSet( S SetItem(X) , S)             => S ensures notBool (X in S)      [simplification, comm]
  rule intersectSet( S1 SetItem(X), S2 SetItem(X)) => intersectSet(S1, S2) SetItem(X)
                                                        ensures notBool (X in S1)
                                                        andBool notBool (X in S2)     [simplification]

  // membership simplifications
  rule _E in .Set           => false   [simplification]
  rule E  in (S SetItem(E)) => true
              ensures notBool (E in S) [simplification]

// These two rules would be sound but impose a giant overhead on `in` evaluation:
  // rule E1 in (S SetItem(E2)) => true requires E1 in S
  //                                 ensures notBool (E2 in S) [simplification]
  // rule E1 in (S SetItem(E2)) => E1 in S requires E1 =/=K E2
  //                                 ensures notBool (E2 in S) [simplification]

  rule X in ((SetItem(X) S) |Set  _            ) => true
                                    ensures notBool (X in S) [simplification]
  rule X in ( _             |Set (SetItem(X) S)) => true
                                    ensures notBool (X in S) [simplification]

endmodule


module SET-SYMBOLIC
  imports SET-KORE-SYMBOLIC
endmodule


module LIST
  imports private INT-SYNTAX
  imports private BASIC-K

  syntax List [hook(LIST.List)]
  syntax List ::= List List               [left, function, total, hook(LIST.concat), klabel(_List_), symbol, smtlib(smt_seq_concat), assoc, unit(.List), element(ListItem), format(%1%n%2)]
  syntax List ::= ".List"                 [function, total, hook(LIST.unit), klabel(.List), symbol, smtlib(smt_seq_nil), latex(\dotCt{List})]
  syntax List ::= ListItem(KItem)             [function, total, hook(LIST.element), klabel(ListItem), symbol, smtlib(smt_seq_elem)]
  syntax KItem ::= List "[" Int "]"           [function, hook(LIST.get), klabel(List:get), symbol]
  syntax List ::= List "[" index: Int "<-" value: KItem "]" [function, hook(LIST.update), klabel(List:set)]
  syntax List ::= makeList(length: Int, value: KItem) [function, hook(LIST.make)]
  syntax List ::= updateList(dest: List, index: Int, src: List) [function, hook(LIST.updateAll)]
  syntax List ::= fillList(List, index: Int, length: Int, value: KItem) [function, hook(LIST.fill)]
  syntax List ::= range(List, fromFront: Int, fromBack: Int)   [function, hook(LIST.range), klabel(List:range), symbol]
  syntax Bool ::= KItem "in" List             [function, total, hook(LIST.in), klabel(_inList_)]
  syntax Int ::= size(List)               [function, total, hook(LIST.size), klabel (sizeList), smtlib(smt_seq_len)]
endmodule


module COLLECTIONS
  imports LIST
  imports SET
  imports MAP

  syntax List ::= Set2List(Set) [function, total, hook(SET.set2list)]
  syntax Set ::= List2Set(List) [function, total, hook(SET.list2set)]
endmodule
===
KW_MODULE
module

MODNAME
SET

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_SYNTAX
syntax

ID_UPPER
Set

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.Set

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_UPPER
Set

ID_UPPER
Set

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.concat

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_Set_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
assoc

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
unit

LPAREN
(

ATTR_CONTENT
.Set

RPAREN
)

COMMA
,

ATTR_KEY
idem

COMMA
,

ATTR_KEY
element

LPAREN
(

ATTR_CONTENT
SetItem

RPAREN
)

COMMA
,

ATTR_KEY
format

LPAREN
(

ATTR_CONTENT
%1%n%2

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

STRING
".Set"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.unit

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
.Set

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\dotCt{Set}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_UPPER
SetItem

LPAREN
(

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.element

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
SetItem

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
injective

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_UPPER
Set

STRING
"|Set"

ID_UPPER
Set

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.union

RPAREN
)

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_RULE
rule

BUBBLE
S1:Set |Set S2:Set => S1 (S2 -Set S1)

LBRACK
[

ATTR_KEY
concrete

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_LOWER
intersectSet

LPAREN
(

ID_UPPER
Set

COMMA
,

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.intersection

RPAREN
)

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_UPPER
Set

STRING
"-Set"

ID_UPPER
Set

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.difference

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}-_{\it Set}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Set:difference

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
KItem

STRING
"in"

ID_UPPER
Set

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.in

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Set:in

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Set

STRING
"<=Set"

ID_UPPER
Set

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.inclusion

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
size

LPAREN
(

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.size

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
choice

LPAREN
(

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.choice

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Set:choice

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
SET-KORE-SYMBOLIC

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
SET

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
#Ceil(@S:Set SetItem(@E:KItem)) =>
         {(@E in @S) #Equals false} #And #Ceil(@S) #And #Ceil(@E)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
S              -Set .Set           => S

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
.Set           -Set  _             => .Set

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
SetItem(X)     -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
S              -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(S SetItem(X)) -Set S              => SetItem(X)
                               ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(S SetItem(X)) -Set SetItem(X)     => S
                               ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
S    |Set .Set => S

LBRACK
[

ATTR_KEY
simplification

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_RULE
rule

BUBBLE
S    |Set S    => S

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(S SetItem(X)) |Set SetItem(X) => S SetItem(X)
                             ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_RULE
rule

BUBBLE
intersectSet(.Set, _   ) => .Set

LBRACK
[

ATTR_KEY
simplification

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_RULE
rule

BUBBLE
intersectSet( S  , S   ) =>  S

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
intersectSet( S SetItem(X), SetItem(X))     => SetItem(X)
                                                        ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

COMMA
,

ATTR_KEY
comm

RBRACK
]

KW_RULE
rule

BUBBLE
intersectSet( S1 SetItem(X), S2 SetItem(X)) => intersectSet(S1, S2) SetItem(X)
                                                        ensures notBool (X in S1)
                                                        andBool notBool (X in S2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
_E in .Set           => false

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
E  in (S SetItem(E)) => true
              ensures notBool (E in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X in ((SetItem(X) S) |Set  _            ) => true
                                    ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X in ( _             |Set (SetItem(X) S)) => true
                                    ensures notBool (X in S)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
SET-SYMBOLIC

KW_IMPORTS
imports

MODNAME
SET-KORE-SYMBOLIC

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
LIST

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_SYNTAX
syntax

ID_UPPER
List

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.List

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

KW_LIST
List

KW_LIST
List

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.concat

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_List_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
smt_seq_concat

RPAREN
)

COMMA
,

ATTR_KEY
assoc

COMMA
,

ATTR_KEY
unit

LPAREN
(

ATTR_CONTENT
.List

RPAREN
)

COMMA
,

ATTR_KEY
element

LPAREN
(

ATTR_CONTENT
ListItem

RPAREN
)

COMMA
,

ATTR_KEY
format

LPAREN
(

ATTR_CONTENT
%1%n%2

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

STRING
".List"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.unit

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
.List

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
smt_seq_nil

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\dotCt{List}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_UPPER
ListItem

LPAREN
(

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.element

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
ListItem

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
smt_seq_elem

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

KW_LIST
List

STRING
"["

ID_UPPER
Int

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.get

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
List:get

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

KW_LIST
List

STRING
"["

ID_LOWER
index

COLON
:

ID_UPPER
Int

STRING
"<-"

ID_LOWER
value

COLON
:

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.update

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
List:set

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
makeList

LPAREN
(

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.make

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
updateList

LPAREN
(

ID_LOWER
dest

COLON
:

KW_LIST
List

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
src

COLON
:

KW_LIST
List

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.updateAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
fillList

LPAREN
(

KW_LIST
List

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.fill

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
range

LPAREN
(

KW_LIST
List

COMMA
,

ID_LOWER
fromFront

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
fromBack

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.range

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
List:range

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
KItem

STRING
"in"

KW_LIST
List

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.in

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_inList_

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
size

LPAREN
(

KW_LIST
List

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
LIST.size

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
sizeList

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
smt_seq_len

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
COLLECTIONS

KW_IMPORTS
imports

MODNAME
LIST

KW_IMPORTS
imports

MODNAME
SET

KW_IMPORTS
imports

MODNAME
MAP

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_UPPER
Set2List

LPAREN
(

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.set2list

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_UPPER
List2Set

LPAREN
(

KW_LIST
List

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
SET.list2set

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

EOF


module SORT-BOOL
  syntax Bool [hook(BOOL.Bool)]
endmodule


module BOOL-SYNTAX
  imports SORT-BOOL
  syntax Bool ::= "true"  [token]
  syntax Bool ::= "false" [token]
endmodule


module BOOL-COMMON
  imports private BASIC-K
  imports BOOL-SYNTAX

  syntax Bool ::= "notBool" Bool          [function, total, klabel(notBool_), symbol, smt-hook(not), group(boolOperation), latex(\neg_{\scriptstyle\it Bool}{#1}), hook(BOOL.not)]
                > Bool "andBool" Bool     [function, total, klabel(_andBool_), symbol, left, smt-hook(and), group(boolOperation), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), hook(BOOL.and)]
                | Bool "andThenBool" Bool [function, total, klabel(_andThenBool_), symbol, left, smt-hook(and), group(boolOperation), hook(BOOL.andThen)]
                | Bool "xorBool" Bool     [function, total, klabel(_xorBool_), symbol, left, smt-hook(xor), group(boolOperation), hook(BOOL.xor)]
                | Bool "orBool" Bool      [function, total, klabel(_orBool_), symbol, left, smt-hook(or), group(boolOperation), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), hook(BOOL.or)]
                | Bool "orElseBool" Bool  [function, total, klabel(_orElseBool_), symbol, left, smt-hook(or), group(boolOperation), hook(BOOL.orElse)]
                | Bool "impliesBool" Bool [function, total, klabel(_impliesBool_), symbol, left, smt-hook(=>), group(boolOperation), hook(BOOL.implies)]
                > left:
                  Bool "==Bool" Bool      [function, total, klabel(_==Bool_), symbol, left, comm, smt-hook(=), hook(BOOL.eq)]
                | Bool "=/=Bool" Bool     [function, total, klabel(_=/=Bool_), symbol, left, comm, smt-hook(distinct), hook(BOOL.ne)]

  rule notBool true => false
  rule notBool false => true

  rule true andBool B:Bool => B:Bool
  rule B:Bool andBool true => B:Bool
  rule false andBool _:Bool => false
  rule _:Bool andBool false => false

  rule true andThenBool K::Bool => K
  rule K::Bool andThenBool true => K
  rule false andThenBool _ => false
  rule _ andThenBool false => false

  rule false xorBool B:Bool => B:Bool
  rule B:Bool xorBool false => B:Bool
  rule B:Bool xorBool B:Bool => false

  rule true orBool _:Bool => true
  rule _:Bool orBool true => true
  rule false orBool B:Bool => B
  rule B:Bool orBool false => B

  rule true orElseBool _ => true
  rule _ orElseBool true => true
  rule false orElseBool K::Bool => K
  rule K::Bool orElseBool false => K

  rule true impliesBool B:Bool => B
  rule false impliesBool _:Bool => true
  rule _:Bool impliesBool true => true
  rule B:Bool impliesBool false => notBool B

  rule B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)
endmodule


module BOOL-KORE [kore, symbolic]
  imports BOOL-COMMON

  rule {true #Equals notBool @B} => {false #Equals @B} [simplification]
  rule {notBool @B #Equals true} => {@B #Equals false} [simplification]
  rule {false #Equals notBool @B} => {true #Equals @B} [simplification]
  rule {notBool @B #Equals false} => {@B #Equals true} [simplification]

  rule {true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2} [simplification]
  rule {@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true} [simplification]
  rule {false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2} [simplification]
  rule {@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false} [simplification]
endmodule


module BOOL
  imports BOOL-COMMON
  imports BOOL-KORE
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
SORT-BOOL

KW_SYNTAX
2,3
syntax

ID_UPPER
2,10
Bool

LBRACK
2,15
[

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.Bool

RPAREN
1,0
)

RBRACK
1,0
]

KW_ENDMODULE
3,1
endmodule

KW_MODULE
6,1
module

MODNAME
6,8
BOOL-SYNTAX

KW_IMPORTS
7,3
imports

MODNAME
7,11
SORT-BOOL

KW_SYNTAX
8,3
syntax

ID_UPPER
8,10
Bool

DCOLONEQ
8,15
::=

STRING
8,19
"true"

LBRACK
8,27
[

ATTR_KEY
1,0
token

RBRACK
1,0
]

KW_SYNTAX
9,3
syntax

ID_UPPER
9,10
Bool

DCOLONEQ
9,15
::=

STRING
9,19
"false"

LBRACK
9,27
[

ATTR_KEY
1,0
token

RBRACK
1,0
]

KW_ENDMODULE
10,1
endmodule

KW_MODULE
13,1
module

MODNAME
13,8
BOOL-COMMON

KW_IMPORTS
14,3
imports

KW_PRIVATE
14,11
private

MODNAME
14,19
BASIC-K

KW_IMPORTS
15,3
imports

MODNAME
15,11
BOOL-SYNTAX

KW_SYNTAX
17,3
syntax

ID_UPPER
17,10
Bool

DCOLONEQ
17,15
::=

STRING
17,19
"notBool"

ID_UPPER
17,29
Bool

LBRACK
17,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
notBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
not

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
latex

LPAREN
1,0
(

ATTR_CONTENT
1,0
\neg_{\scriptstyle\it Bool}{#1}

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.not

RPAREN
1,0
)

RBRACK
1,0
]

GT
18,17
>

ID_UPPER
18,19
Bool

STRING
18,24
"andBool"

ID_UPPER
18,34
Bool

LBRACK
18,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_andBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
and

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
latex

LPAREN
1,0
(

ATTR_CONTENT
1,0
{#1}\wedge_{\scriptstyle\it Bool}{#2}

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.and

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
19,17
|

ID_UPPER
19,19
Bool

STRING
19,24
"andThenBool"

ID_UPPER
19,38
Bool

LBRACK
19,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_andThenBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
and

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.andThen

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
20,17
|

ID_UPPER
20,19
Bool

STRING
20,24
"xorBool"

ID_UPPER
20,34
Bool

LBRACK
20,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_xorBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
xor

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.xor

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
21,17
|

ID_UPPER
21,19
Bool

STRING
21,24
"orBool"

ID_UPPER
21,33
Bool

LBRACK
21,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_orBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
or

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
latex

LPAREN
1,0
(

ATTR_CONTENT
1,0
{#1}\vee_{\scriptstyle\it Bool}{#2}

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.or

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
22,17
|

ID_UPPER
22,19
Bool

STRING
22,24
"orElseBool"

ID_UPPER
22,37
Bool

LBRACK
22,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_orElseBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
or

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.orElse

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
23,17
|

ID_UPPER
23,19
Bool

STRING
23,24
"impliesBool"

ID_UPPER
23,38
Bool

LBRACK
23,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_impliesBool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
=>

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
group

LPAREN
1,0
(

ATTR_CONTENT
1,0
boolOperation

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.implies

RPAREN
1,0
)

RBRACK
1,0
]

GT
24,17
>

KW_LEFT
24,19
left

COLON
24,23
:

ID_UPPER
25,19
Bool

STRING
25,24
"==Bool"

ID_UPPER
25,33
Bool

LBRACK
25,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_==Bool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
comm

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
=

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.eq

RPAREN
1,0
)

RBRACK
1,0
]

VBAR
26,17
|

ID_UPPER
26,19
Bool

STRING
26,24
"=/=Bool"

ID_UPPER
26,34
Bool

LBRACK
26,43
[

ATTR_KEY
1,0
function

COMMA
1,0
,

ATTR_KEY
1,0
total

COMMA
1,0
,

ATTR_KEY
1,0
klabel

LPAREN
1,0
(

ATTR_CONTENT
1,0
_=/=Bool_

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
symbol

COMMA
1,0
,

ATTR_KEY
1,0
left

COMMA
1,0
,

ATTR_KEY
1,0
comm

COMMA
1,0
,

ATTR_KEY
1,0
smt-hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
distinct

RPAREN
1,0
)

COMMA
1,0
,

ATTR_KEY
1,0
hook

LPAREN
1,0
(

ATTR_CONTENT
1,0
BOOL.ne

RPAREN
1,0
)

RBRACK
1,0
]

KW_RULE
28,3
rule

BUBBLE
28,8
notBool true => false

KW_RULE
29,3
rule

BUBBLE
29,8
notBool false => true

KW_RULE
31,3
rule

BUBBLE
31,8
true andBool B:Bool => B:Bool

KW_RULE
32,3
rule

BUBBLE
32,8
B:Bool andBool true => B:Bool

KW_RULE
33,3
rule

BUBBLE
33,8
false andBool _:Bool => false

KW_RULE
34,3
rule

BUBBLE
34,8
_:Bool andBool false => false

KW_RULE
36,3
rule

BUBBLE
36,8
true andThenBool K::Bool => K

KW_RULE
37,3
rule

BUBBLE
37,8
K::Bool andThenBool true => K

KW_RULE
38,3
rule

BUBBLE
38,8
false andThenBool _ => false

KW_RULE
39,3
rule

BUBBLE
39,8
_ andThenBool false => false

KW_RULE
41,3
rule

BUBBLE
41,8
false xorBool B:Bool => B:Bool

KW_RULE
42,3
rule

BUBBLE
42,8
B:Bool xorBool false => B:Bool

KW_RULE
43,3
rule

BUBBLE
43,8
B:Bool xorBool B:Bool => false

KW_RULE
45,3
rule

BUBBLE
45,8
true orBool _:Bool => true

KW_RULE
46,3
rule

BUBBLE
46,8
_:Bool orBool true => true

KW_RULE
47,3
rule

BUBBLE
47,8
false orBool B:Bool => B

KW_RULE
48,3
rule

BUBBLE
48,8
B:Bool orBool false => B

KW_RULE
50,3
rule

BUBBLE
50,8
true orElseBool _ => true

KW_RULE
51,3
rule

BUBBLE
51,8
_ orElseBool true => true

KW_RULE
52,3
rule

BUBBLE
52,8
false orElseBool K::Bool => K

KW_RULE
53,3
rule

BUBBLE
53,8
K::Bool orElseBool false => K

KW_RULE
55,3
rule

BUBBLE
55,8
true impliesBool B:Bool => B

KW_RULE
56,3
rule

BUBBLE
56,8
false impliesBool _:Bool => true

KW_RULE
57,3
rule

BUBBLE
57,8
_:Bool impliesBool true => true

KW_RULE
58,3
rule

BUBBLE
58,8
B:Bool impliesBool false => notBool B

KW_RULE
60,3
rule

BUBBLE
60,8
B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)

KW_ENDMODULE
61,1
endmodule

KW_MODULE
64,1
module

MODNAME
64,8
BOOL-KORE

LBRACK
64,18
[

ATTR_KEY
1,0
kore

COMMA
1,0
,

ATTR_KEY
1,0
symbolic

RBRACK
1,0
]

KW_IMPORTS
65,3
imports

MODNAME
65,11
BOOL-COMMON

KW_RULE
67,3
rule

BUBBLE
67,8
{true #Equals notBool @B} => {false #Equals @B}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
68,3
rule

BUBBLE
68,8
{notBool @B #Equals true} => {@B #Equals false}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
69,3
rule

BUBBLE
69,8
{false #Equals notBool @B} => {true #Equals @B}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
70,3
rule

BUBBLE
70,8
{notBool @B #Equals false} => {@B #Equals true}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
72,3
rule

BUBBLE
72,8
{true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
73,3
rule

BUBBLE
73,8
{@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
74,3
rule

BUBBLE
74,8
{false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_RULE
75,3
rule

BUBBLE
75,8
{@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false}

LBRACK
1,0
[

ATTR_KEY
1,0
simplification

RBRACK
1,0
]

KW_ENDMODULE
76,1
endmodule

KW_MODULE
79,1
module

MODNAME
79,8
BOOL

KW_IMPORTS
80,3
imports

MODNAME
80,11
BOOL-COMMON

KW_IMPORTS
81,3
imports

MODNAME
81,11
BOOL-KORE

KW_ENDMODULE
82,1
endmodule

EOF
82,9


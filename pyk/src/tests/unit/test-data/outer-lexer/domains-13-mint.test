module MINT-SYNTAX
  /*@\section{Description} The MInt implements machine integers of arbitrary
   * bit width represented in 2's complement. */
  syntax {Width} MInt{Width} [hook(MINT.MInt)]

  /*@ Machine integer of bit width and value. */
  syntax {Width} MInt{Width} ::= r"[\\+-]?[0-9]+[pP][0-9]+" [token, prec(2), hook(MINT.literal)]
endmodule


module MINT
  imports MINT-SYNTAX
  imports private INT
  imports private BOOL

  syntax {Width} Int ::= bitwidthMInt(MInt{Width})   [function, total, hook(MINT.bitwidth)]

  syntax {Width} Int ::= MInt2Signed(MInt{Width})     [function, total, hook(MINT.svalue)]
                       | MInt2Unsigned(MInt{Width})     [function, total, hook(MINT.uvalue), smt-hook(bv2int)]

  syntax {Width} MInt{Width} ::= Int2MInt(Int) [function, total, hook(MINT.integer), smt-hook(int2bv)]

  syntax Int ::= sminMInt(Int)    [function]
               | smaxMInt(Int)    [function]
               | uminMInt(Int)    [function]
               | umaxMInt(Int)    [function]
  rule sminMInt(N:Int) => 0 -Int (1 <<Int (N -Int 1))
  rule smaxMInt(N:Int) => (1 <<Int (N -Int 1)) -Int 1
  rule uminMInt(_:Int) => 0
  rule umaxMInt(N:Int) => (1 <<Int N) -Int 1

  syntax Bool ::= soverflowMInt(width: Int, Int)   [function]
                | uoverflowMInt(width: Int, Int)   [function]
  rule
    soverflowMInt(N:Int, I:Int)
  =>
    I <Int sminMInt(N) orBool I >Int smaxMInt(N)
  rule
    uoverflowMInt(N:Int, I:Int)
  =>
    I <Int uminMInt(N) orBool I >Int umaxMInt(N)

  syntax {Width} MInt{Width} ::= "~MInt" MInt{Width} [function, total, hook(MINT.not), smt-hook(bvnot)]
                               | "--MInt" MInt{Width} [function, total, hook(MINT.neg), smt-hook(bvuminus)]
                               > left:
                                 MInt{Width} "*MInt" MInt{Width} [function, total, hook(MINT.mul), smt-hook(bvmul)]
                               | MInt{Width} "/sMInt" MInt{Width} [function, hook(MINT.sdiv), smt-hook(bvsdiv)]
                               | MInt{Width} "%sMInt" MInt{Width} [function, hook(MINT.srem), smt-hook(bvsrem)]
                               | MInt{Width} "/uMInt" MInt{Width} [function, hook(MINT.udiv), smt-hook(bvudiv)]
                               | MInt{Width} "%uMInt" MInt{Width} [function, hook(MINT.urem), smt-hook(bvurem)]
                               > left:
                                 MInt{Width} "+MInt" MInt{Width} [function, total, hook(MINT.add), smt-hook(bvadd)]
                               | MInt{Width} "-MInt" MInt{Width} [function, total, hook(MINT.sub), smt-hook(bvsub)]
                               > left:
                                 MInt{Width} "<<MInt" MInt{Width} [function, hook(MINT.shl), smt-hook(bvshl)]
                               | MInt{Width} ">>aMInt" MInt{Width} [function, hook(MINT.ashr), smt-hook(bvashr)]
                               | MInt{Width} ">>lMInt" MInt{Width} [function, hook(MINT.lshr), smt-hook(bvlshr)]
                               > left:
                                 MInt{Width} "&MInt" MInt{Width} [function, total, hook(MINT.and), smt-hook(bvand)]
                               > left:
                                 MInt{Width} "xorMInt" MInt{Width} [function, total, hook(MINT.xor), smt-hook(bvxor)]
                               > left:
                                 MInt{Width} "|MInt" MInt{Width} [function, total, hook(MINT.or), smt-hook(bvor)]

  syntax {Width} Bool ::= MInt{Width} "<sMInt" MInt{Width} [function, total, hook(MINT.slt), smt-hook(bvslt)]
                        | MInt{Width} "<uMInt" MInt{Width} [function, total, hook(MINT.ult), smt-hook(bvult)]
                        | MInt{Width} "<=sMInt" MInt{Width} [function, total, hook(MINT.sle), smt-hook(bvsle)]
                        | MInt{Width} "<=uMInt" MInt{Width} [function, total, hook(MINT.ule), smt-hook(bvule)]
                        | MInt{Width} ">sMInt" MInt{Width} [function, total, hook(MINT.sgt), smt-hook(bvsgt)]
                        | MInt{Width} ">uMInt" MInt{Width} [function, total, hook(MINT.ugt), smt-hook(bvugt)]
                        | MInt{Width} ">=sMInt" MInt{Width} [function, total, hook(MINT.sge), smt-hook(bvsge)]
                        | MInt{Width} ">=uMInt" MInt{Width} [function, total, hook(MINT.uge), smt-hook(bvuge)]
                        | MInt{Width} "==MInt" MInt{Width} [function, total, hook(MINT.eq), smt-hook(=)]
                        | MInt{Width} "=/=MInt" MInt{Width} [function, total, hook(MINT.ne), smt-hook(distinct)]

  syntax {Width} MInt{Width} ::= sMaxMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.smax), smt-hook((ite (bvslt #1 #2) #2 #1))]
                               | sMinMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.smin), smt-hook((ite (bvslt #1 #2) #1 #2))]
                               | uMaxMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.umax), smt-hook((ite (bvult #1 #2) #2 #1))]
                               | uMinMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.umin), smt-hook((ite (bvult #1 #2) #1 #2))]

  syntax {Width1, Width2} MInt{Width1} ::= roundMInt(MInt{Width2}) [function, total, hook(MINT.round)]
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
MINT-SYNTAX

KW_SYNTAX
4,3
syntax

LBRACE
4,10
{

ID_UPPER
4,11
Width

RBRACE
4,16
}

ID_UPPER
4,18
MInt

LBRACE
4,22
{

ID_UPPER
4,23
Width

RBRACE
4,28
}

LBRACK
4,30
[

ATTR_KEY
4,31
hook

LPAREN
4,35
(

ATTR_CONTENT
4,36
MINT.MInt

RPAREN
4,45
)

RBRACK
4,46
]

KW_SYNTAX
7,3
syntax

LBRACE
7,10
{

ID_UPPER
7,11
Width

RBRACE
7,16
}

ID_UPPER
7,18
MInt

LBRACE
7,22
{

ID_UPPER
7,23
Width

RBRACE
7,28
}

DCOLONEQ
7,30
::=

REGEX
7,34
r"[\\+-]?[0-9]+[pP][0-9]+"

LBRACK
7,61
[

ATTR_KEY
7,62
token

COMMA
7,67
,

ATTR_KEY
7,69
prec

LPAREN
7,73
(

ATTR_CONTENT
7,74
2

RPAREN
7,75
)

COMMA
7,76
,

ATTR_KEY
7,78
hook

LPAREN
7,82
(

ATTR_CONTENT
7,83
MINT.literal

RPAREN
7,95
)

RBRACK
7,96
]

KW_ENDMODULE
8,1
endmodule

KW_MODULE
11,1
module

MODNAME
11,8
MINT

KW_IMPORTS
12,3
imports

MODNAME
12,11
MINT-SYNTAX

KW_IMPORTS
13,3
imports

KW_PRIVATE
13,11
private

MODNAME
13,19
INT

KW_IMPORTS
14,3
imports

KW_PRIVATE
14,11
private

MODNAME
14,19
BOOL

KW_SYNTAX
16,3
syntax

LBRACE
16,10
{

ID_UPPER
16,11
Width

RBRACE
16,16
}

ID_UPPER
16,18
Int

DCOLONEQ
16,22
::=

ID_LOWER
16,26
bitwidthMInt

LPAREN
16,38
(

ID_UPPER
16,39
MInt

LBRACE
16,43
{

ID_UPPER
16,44
Width

RBRACE
16,49
}

RPAREN
16,50
)

LBRACK
16,54
[

ATTR_KEY
16,55
function

COMMA
16,63
,

ATTR_KEY
16,65
total

COMMA
16,70
,

ATTR_KEY
16,72
hook

LPAREN
16,76
(

ATTR_CONTENT
16,77
MINT.bitwidth

RPAREN
16,90
)

RBRACK
16,91
]

KW_SYNTAX
18,3
syntax

LBRACE
18,10
{

ID_UPPER
18,11
Width

RBRACE
18,16
}

ID_UPPER
18,18
Int

DCOLONEQ
18,22
::=

ID_UPPER
18,26
MInt2Signed

LPAREN
18,37
(

ID_UPPER
18,38
MInt

LBRACE
18,42
{

ID_UPPER
18,43
Width

RBRACE
18,48
}

RPAREN
18,49
)

LBRACK
18,55
[

ATTR_KEY
18,56
function

COMMA
18,64
,

ATTR_KEY
18,66
total

COMMA
18,71
,

ATTR_KEY
18,73
hook

LPAREN
18,77
(

ATTR_CONTENT
18,78
MINT.svalue

RPAREN
18,89
)

RBRACK
18,90
]

VBAR
19,24
|

ID_UPPER
19,26
MInt2Unsigned

LPAREN
19,39
(

ID_UPPER
19,40
MInt

LBRACE
19,44
{

ID_UPPER
19,45
Width

RBRACE
19,50
}

RPAREN
19,51
)

LBRACK
19,57
[

ATTR_KEY
19,58
function

COMMA
19,66
,

ATTR_KEY
19,68
total

COMMA
19,73
,

ATTR_KEY
19,75
hook

LPAREN
19,79
(

ATTR_CONTENT
19,80
MINT.uvalue

RPAREN
19,91
)

COMMA
19,92
,

ATTR_KEY
19,94
smt-hook

LPAREN
19,102
(

ATTR_CONTENT
19,103
bv2int

RPAREN
19,109
)

RBRACK
19,110
]

KW_SYNTAX
21,3
syntax

LBRACE
21,10
{

ID_UPPER
21,11
Width

RBRACE
21,16
}

ID_UPPER
21,18
MInt

LBRACE
21,22
{

ID_UPPER
21,23
Width

RBRACE
21,28
}

DCOLONEQ
21,30
::=

ID_UPPER
21,34
Int2MInt

LPAREN
21,42
(

ID_UPPER
21,43
Int

RPAREN
21,46
)

LBRACK
21,48
[

ATTR_KEY
21,49
function

COMMA
21,57
,

ATTR_KEY
21,59
total

COMMA
21,64
,

ATTR_KEY
21,66
hook

LPAREN
21,70
(

ATTR_CONTENT
21,71
MINT.integer

RPAREN
21,83
)

COMMA
21,84
,

ATTR_KEY
21,86
smt-hook

LPAREN
21,94
(

ATTR_CONTENT
21,95
int2bv

RPAREN
21,101
)

RBRACK
21,102
]

KW_SYNTAX
23,3
syntax

ID_UPPER
23,10
Int

DCOLONEQ
23,14
::=

ID_LOWER
23,18
sminMInt

LPAREN
23,26
(

ID_UPPER
23,27
Int

RPAREN
23,30
)

LBRACK
23,35
[

ATTR_KEY
23,36
function

RBRACK
23,44
]

VBAR
24,16
|

ID_LOWER
24,18
smaxMInt

LPAREN
24,26
(

ID_UPPER
24,27
Int

RPAREN
24,30
)

LBRACK
24,35
[

ATTR_KEY
24,36
function

RBRACK
24,44
]

VBAR
25,16
|

ID_LOWER
25,18
uminMInt

LPAREN
25,26
(

ID_UPPER
25,27
Int

RPAREN
25,30
)

LBRACK
25,35
[

ATTR_KEY
25,36
function

RBRACK
25,44
]

VBAR
26,16
|

ID_LOWER
26,18
umaxMInt

LPAREN
26,26
(

ID_UPPER
26,27
Int

RPAREN
26,30
)

LBRACK
26,35
[

ATTR_KEY
26,36
function

RBRACK
26,44
]

KW_RULE
27,3
rule

BUBBLE
27,8
sminMInt(N:Int) => 0 -Int (1 <<Int (N -Int 1))

KW_RULE
28,3
rule

BUBBLE
28,8
smaxMInt(N:Int) => (1 <<Int (N -Int 1)) -Int 1

KW_RULE
29,3
rule

BUBBLE
29,8
uminMInt(_:Int) => 0

KW_RULE
30,3
rule

BUBBLE
30,8
umaxMInt(N:Int) => (1 <<Int N) -Int 1

KW_SYNTAX
32,3
syntax

ID_UPPER
32,10
Bool

DCOLONEQ
32,15
::=

ID_LOWER
32,19
soverflowMInt

LPAREN
32,32
(

ID_LOWER
32,33
width

COLON
32,38
:

ID_UPPER
32,40
Int

COMMA
32,43
,

ID_UPPER
32,45
Int

RPAREN
32,48
)

LBRACK
32,52
[

ATTR_KEY
32,53
function

RBRACK
32,61
]

VBAR
33,17
|

ID_LOWER
33,19
uoverflowMInt

LPAREN
33,32
(

ID_LOWER
33,33
width

COLON
33,38
:

ID_UPPER
33,40
Int

COMMA
33,43
,

ID_UPPER
33,45
Int

RPAREN
33,48
)

LBRACK
33,52
[

ATTR_KEY
33,53
function

RBRACK
33,61
]

KW_RULE
34,3
rule

BUBBLE
35,5
soverflowMInt(N:Int, I:Int)
  =>
    I <Int sminMInt(N) orBool I >Int smaxMInt(N)

KW_RULE
38,3
rule

BUBBLE
39,5
uoverflowMInt(N:Int, I:Int)
  =>
    I <Int uminMInt(N) orBool I >Int umaxMInt(N)

KW_SYNTAX
43,3
syntax

LBRACE
43,10
{

ID_UPPER
43,11
Width

RBRACE
43,16
}

ID_UPPER
43,18
MInt

LBRACE
43,22
{

ID_UPPER
43,23
Width

RBRACE
43,28
}

DCOLONEQ
43,30
::=

STRING
43,34
"~MInt"

ID_UPPER
43,42
MInt

LBRACE
43,46
{

ID_UPPER
43,47
Width

RBRACE
43,52
}

LBRACK
43,54
[

ATTR_KEY
43,55
function

COMMA
43,63
,

ATTR_KEY
43,65
total

COMMA
43,70
,

ATTR_KEY
43,72
hook

LPAREN
43,76
(

ATTR_CONTENT
43,77
MINT.not

RPAREN
43,85
)

COMMA
43,86
,

ATTR_KEY
43,88
smt-hook

LPAREN
43,96
(

ATTR_CONTENT
43,97
bvnot

RPAREN
43,102
)

RBRACK
43,103
]

VBAR
44,32
|

STRING
44,34
"--MInt"

ID_UPPER
44,43
MInt

LBRACE
44,47
{

ID_UPPER
44,48
Width

RBRACE
44,53
}

LBRACK
44,55
[

ATTR_KEY
44,56
function

COMMA
44,64
,

ATTR_KEY
44,66
total

COMMA
44,71
,

ATTR_KEY
44,73
hook

LPAREN
44,77
(

ATTR_CONTENT
44,78
MINT.neg

RPAREN
44,86
)

COMMA
44,87
,

ATTR_KEY
44,89
smt-hook

LPAREN
44,97
(

ATTR_CONTENT
44,98
bvuminus

RPAREN
44,106
)

RBRACK
44,107
]

GT
45,32
>

KW_LEFT
45,34
left

COLON
45,38
:

ID_UPPER
46,34
MInt

LBRACE
46,38
{

ID_UPPER
46,39
Width

RBRACE
46,44
}

STRING
46,46
"*MInt"

ID_UPPER
46,54
MInt

LBRACE
46,58
{

ID_UPPER
46,59
Width

RBRACE
46,64
}

LBRACK
46,66
[

ATTR_KEY
46,67
function

COMMA
46,75
,

ATTR_KEY
46,77
total

COMMA
46,82
,

ATTR_KEY
46,84
hook

LPAREN
46,88
(

ATTR_CONTENT
46,89
MINT.mul

RPAREN
46,97
)

COMMA
46,98
,

ATTR_KEY
46,100
smt-hook

LPAREN
46,108
(

ATTR_CONTENT
46,109
bvmul

RPAREN
46,114
)

RBRACK
46,115
]

VBAR
47,32
|

ID_UPPER
47,34
MInt

LBRACE
47,38
{

ID_UPPER
47,39
Width

RBRACE
47,44
}

STRING
47,46
"/sMInt"

ID_UPPER
47,55
MInt

LBRACE
47,59
{

ID_UPPER
47,60
Width

RBRACE
47,65
}

LBRACK
47,67
[

ATTR_KEY
47,68
function

COMMA
47,76
,

ATTR_KEY
47,78
hook

LPAREN
47,82
(

ATTR_CONTENT
47,83
MINT.sdiv

RPAREN
47,92
)

COMMA
47,93
,

ATTR_KEY
47,95
smt-hook

LPAREN
47,103
(

ATTR_CONTENT
47,104
bvsdiv

RPAREN
47,110
)

RBRACK
47,111
]

VBAR
48,32
|

ID_UPPER
48,34
MInt

LBRACE
48,38
{

ID_UPPER
48,39
Width

RBRACE
48,44
}

STRING
48,46
"%sMInt"

ID_UPPER
48,55
MInt

LBRACE
48,59
{

ID_UPPER
48,60
Width

RBRACE
48,65
}

LBRACK
48,67
[

ATTR_KEY
48,68
function

COMMA
48,76
,

ATTR_KEY
48,78
hook

LPAREN
48,82
(

ATTR_CONTENT
48,83
MINT.srem

RPAREN
48,92
)

COMMA
48,93
,

ATTR_KEY
48,95
smt-hook

LPAREN
48,103
(

ATTR_CONTENT
48,104
bvsrem

RPAREN
48,110
)

RBRACK
48,111
]

VBAR
49,32
|

ID_UPPER
49,34
MInt

LBRACE
49,38
{

ID_UPPER
49,39
Width

RBRACE
49,44
}

STRING
49,46
"/uMInt"

ID_UPPER
49,55
MInt

LBRACE
49,59
{

ID_UPPER
49,60
Width

RBRACE
49,65
}

LBRACK
49,67
[

ATTR_KEY
49,68
function

COMMA
49,76
,

ATTR_KEY
49,78
hook

LPAREN
49,82
(

ATTR_CONTENT
49,83
MINT.udiv

RPAREN
49,92
)

COMMA
49,93
,

ATTR_KEY
49,95
smt-hook

LPAREN
49,103
(

ATTR_CONTENT
49,104
bvudiv

RPAREN
49,110
)

RBRACK
49,111
]

VBAR
50,32
|

ID_UPPER
50,34
MInt

LBRACE
50,38
{

ID_UPPER
50,39
Width

RBRACE
50,44
}

STRING
50,46
"%uMInt"

ID_UPPER
50,55
MInt

LBRACE
50,59
{

ID_UPPER
50,60
Width

RBRACE
50,65
}

LBRACK
50,67
[

ATTR_KEY
50,68
function

COMMA
50,76
,

ATTR_KEY
50,78
hook

LPAREN
50,82
(

ATTR_CONTENT
50,83
MINT.urem

RPAREN
50,92
)

COMMA
50,93
,

ATTR_KEY
50,95
smt-hook

LPAREN
50,103
(

ATTR_CONTENT
50,104
bvurem

RPAREN
50,110
)

RBRACK
50,111
]

GT
51,32
>

KW_LEFT
51,34
left

COLON
51,38
:

ID_UPPER
52,34
MInt

LBRACE
52,38
{

ID_UPPER
52,39
Width

RBRACE
52,44
}

STRING
52,46
"+MInt"

ID_UPPER
52,54
MInt

LBRACE
52,58
{

ID_UPPER
52,59
Width

RBRACE
52,64
}

LBRACK
52,66
[

ATTR_KEY
52,67
function

COMMA
52,75
,

ATTR_KEY
52,77
total

COMMA
52,82
,

ATTR_KEY
52,84
hook

LPAREN
52,88
(

ATTR_CONTENT
52,89
MINT.add

RPAREN
52,97
)

COMMA
52,98
,

ATTR_KEY
52,100
smt-hook

LPAREN
52,108
(

ATTR_CONTENT
52,109
bvadd

RPAREN
52,114
)

RBRACK
52,115
]

VBAR
53,32
|

ID_UPPER
53,34
MInt

LBRACE
53,38
{

ID_UPPER
53,39
Width

RBRACE
53,44
}

STRING
53,46
"-MInt"

ID_UPPER
53,54
MInt

LBRACE
53,58
{

ID_UPPER
53,59
Width

RBRACE
53,64
}

LBRACK
53,66
[

ATTR_KEY
53,67
function

COMMA
53,75
,

ATTR_KEY
53,77
total

COMMA
53,82
,

ATTR_KEY
53,84
hook

LPAREN
53,88
(

ATTR_CONTENT
53,89
MINT.sub

RPAREN
53,97
)

COMMA
53,98
,

ATTR_KEY
53,100
smt-hook

LPAREN
53,108
(

ATTR_CONTENT
53,109
bvsub

RPAREN
53,114
)

RBRACK
53,115
]

GT
54,32
>

KW_LEFT
54,34
left

COLON
54,38
:

ID_UPPER
55,34
MInt

LBRACE
55,38
{

ID_UPPER
55,39
Width

RBRACE
55,44
}

STRING
55,46
"<<MInt"

ID_UPPER
55,55
MInt

LBRACE
55,59
{

ID_UPPER
55,60
Width

RBRACE
55,65
}

LBRACK
55,67
[

ATTR_KEY
55,68
function

COMMA
55,76
,

ATTR_KEY
55,78
hook

LPAREN
55,82
(

ATTR_CONTENT
55,83
MINT.shl

RPAREN
55,91
)

COMMA
55,92
,

ATTR_KEY
55,94
smt-hook

LPAREN
55,102
(

ATTR_CONTENT
55,103
bvshl

RPAREN
55,108
)

RBRACK
55,109
]

VBAR
56,32
|

ID_UPPER
56,34
MInt

LBRACE
56,38
{

ID_UPPER
56,39
Width

RBRACE
56,44
}

STRING
56,46
">>aMInt"

ID_UPPER
56,56
MInt

LBRACE
56,60
{

ID_UPPER
56,61
Width

RBRACE
56,66
}

LBRACK
56,68
[

ATTR_KEY
56,69
function

COMMA
56,77
,

ATTR_KEY
56,79
hook

LPAREN
56,83
(

ATTR_CONTENT
56,84
MINT.ashr

RPAREN
56,93
)

COMMA
56,94
,

ATTR_KEY
56,96
smt-hook

LPAREN
56,104
(

ATTR_CONTENT
56,105
bvashr

RPAREN
56,111
)

RBRACK
56,112
]

VBAR
57,32
|

ID_UPPER
57,34
MInt

LBRACE
57,38
{

ID_UPPER
57,39
Width

RBRACE
57,44
}

STRING
57,46
">>lMInt"

ID_UPPER
57,56
MInt

LBRACE
57,60
{

ID_UPPER
57,61
Width

RBRACE
57,66
}

LBRACK
57,68
[

ATTR_KEY
57,69
function

COMMA
57,77
,

ATTR_KEY
57,79
hook

LPAREN
57,83
(

ATTR_CONTENT
57,84
MINT.lshr

RPAREN
57,93
)

COMMA
57,94
,

ATTR_KEY
57,96
smt-hook

LPAREN
57,104
(

ATTR_CONTENT
57,105
bvlshr

RPAREN
57,111
)

RBRACK
57,112
]

GT
58,32
>

KW_LEFT
58,34
left

COLON
58,38
:

ID_UPPER
59,34
MInt

LBRACE
59,38
{

ID_UPPER
59,39
Width

RBRACE
59,44
}

STRING
59,46
"&MInt"

ID_UPPER
59,54
MInt

LBRACE
59,58
{

ID_UPPER
59,59
Width

RBRACE
59,64
}

LBRACK
59,66
[

ATTR_KEY
59,67
function

COMMA
59,75
,

ATTR_KEY
59,77
total

COMMA
59,82
,

ATTR_KEY
59,84
hook

LPAREN
59,88
(

ATTR_CONTENT
59,89
MINT.and

RPAREN
59,97
)

COMMA
59,98
,

ATTR_KEY
59,100
smt-hook

LPAREN
59,108
(

ATTR_CONTENT
59,109
bvand

RPAREN
59,114
)

RBRACK
59,115
]

GT
60,32
>

KW_LEFT
60,34
left

COLON
60,38
:

ID_UPPER
61,34
MInt

LBRACE
61,38
{

ID_UPPER
61,39
Width

RBRACE
61,44
}

STRING
61,46
"xorMInt"

ID_UPPER
61,56
MInt

LBRACE
61,60
{

ID_UPPER
61,61
Width

RBRACE
61,66
}

LBRACK
61,68
[

ATTR_KEY
61,69
function

COMMA
61,77
,

ATTR_KEY
61,79
total

COMMA
61,84
,

ATTR_KEY
61,86
hook

LPAREN
61,90
(

ATTR_CONTENT
61,91
MINT.xor

RPAREN
61,99
)

COMMA
61,100
,

ATTR_KEY
61,102
smt-hook

LPAREN
61,110
(

ATTR_CONTENT
61,111
bvxor

RPAREN
61,116
)

RBRACK
61,117
]

GT
62,32
>

KW_LEFT
62,34
left

COLON
62,38
:

ID_UPPER
63,34
MInt

LBRACE
63,38
{

ID_UPPER
63,39
Width

RBRACE
63,44
}

STRING
63,46
"|MInt"

ID_UPPER
63,54
MInt

LBRACE
63,58
{

ID_UPPER
63,59
Width

RBRACE
63,64
}

LBRACK
63,66
[

ATTR_KEY
63,67
function

COMMA
63,75
,

ATTR_KEY
63,77
total

COMMA
63,82
,

ATTR_KEY
63,84
hook

LPAREN
63,88
(

ATTR_CONTENT
63,89
MINT.or

RPAREN
63,96
)

COMMA
63,97
,

ATTR_KEY
63,99
smt-hook

LPAREN
63,107
(

ATTR_CONTENT
63,108
bvor

RPAREN
63,112
)

RBRACK
63,113
]

KW_SYNTAX
65,3
syntax

LBRACE
65,10
{

ID_UPPER
65,11
Width

RBRACE
65,16
}

ID_UPPER
65,18
Bool

DCOLONEQ
65,23
::=

ID_UPPER
65,27
MInt

LBRACE
65,31
{

ID_UPPER
65,32
Width

RBRACE
65,37
}

STRING
65,39
"<sMInt"

ID_UPPER
65,48
MInt

LBRACE
65,52
{

ID_UPPER
65,53
Width

RBRACE
65,58
}

LBRACK
65,60
[

ATTR_KEY
65,61
function

COMMA
65,69
,

ATTR_KEY
65,71
total

COMMA
65,76
,

ATTR_KEY
65,78
hook

LPAREN
65,82
(

ATTR_CONTENT
65,83
MINT.slt

RPAREN
65,91
)

COMMA
65,92
,

ATTR_KEY
65,94
smt-hook

LPAREN
65,102
(

ATTR_CONTENT
65,103
bvslt

RPAREN
65,108
)

RBRACK
65,109
]

VBAR
66,25
|

ID_UPPER
66,27
MInt

LBRACE
66,31
{

ID_UPPER
66,32
Width

RBRACE
66,37
}

STRING
66,39
"<uMInt"

ID_UPPER
66,48
MInt

LBRACE
66,52
{

ID_UPPER
66,53
Width

RBRACE
66,58
}

LBRACK
66,60
[

ATTR_KEY
66,61
function

COMMA
66,69
,

ATTR_KEY
66,71
total

COMMA
66,76
,

ATTR_KEY
66,78
hook

LPAREN
66,82
(

ATTR_CONTENT
66,83
MINT.ult

RPAREN
66,91
)

COMMA
66,92
,

ATTR_KEY
66,94
smt-hook

LPAREN
66,102
(

ATTR_CONTENT
66,103
bvult

RPAREN
66,108
)

RBRACK
66,109
]

VBAR
67,25
|

ID_UPPER
67,27
MInt

LBRACE
67,31
{

ID_UPPER
67,32
Width

RBRACE
67,37
}

STRING
67,39
"<=sMInt"

ID_UPPER
67,49
MInt

LBRACE
67,53
{

ID_UPPER
67,54
Width

RBRACE
67,59
}

LBRACK
67,61
[

ATTR_KEY
67,62
function

COMMA
67,70
,

ATTR_KEY
67,72
total

COMMA
67,77
,

ATTR_KEY
67,79
hook

LPAREN
67,83
(

ATTR_CONTENT
67,84
MINT.sle

RPAREN
67,92
)

COMMA
67,93
,

ATTR_KEY
67,95
smt-hook

LPAREN
67,103
(

ATTR_CONTENT
67,104
bvsle

RPAREN
67,109
)

RBRACK
67,110
]

VBAR
68,25
|

ID_UPPER
68,27
MInt

LBRACE
68,31
{

ID_UPPER
68,32
Width

RBRACE
68,37
}

STRING
68,39
"<=uMInt"

ID_UPPER
68,49
MInt

LBRACE
68,53
{

ID_UPPER
68,54
Width

RBRACE
68,59
}

LBRACK
68,61
[

ATTR_KEY
68,62
function

COMMA
68,70
,

ATTR_KEY
68,72
total

COMMA
68,77
,

ATTR_KEY
68,79
hook

LPAREN
68,83
(

ATTR_CONTENT
68,84
MINT.ule

RPAREN
68,92
)

COMMA
68,93
,

ATTR_KEY
68,95
smt-hook

LPAREN
68,103
(

ATTR_CONTENT
68,104
bvule

RPAREN
68,109
)

RBRACK
68,110
]

VBAR
69,25
|

ID_UPPER
69,27
MInt

LBRACE
69,31
{

ID_UPPER
69,32
Width

RBRACE
69,37
}

STRING
69,39
">sMInt"

ID_UPPER
69,48
MInt

LBRACE
69,52
{

ID_UPPER
69,53
Width

RBRACE
69,58
}

LBRACK
69,60
[

ATTR_KEY
69,61
function

COMMA
69,69
,

ATTR_KEY
69,71
total

COMMA
69,76
,

ATTR_KEY
69,78
hook

LPAREN
69,82
(

ATTR_CONTENT
69,83
MINT.sgt

RPAREN
69,91
)

COMMA
69,92
,

ATTR_KEY
69,94
smt-hook

LPAREN
69,102
(

ATTR_CONTENT
69,103
bvsgt

RPAREN
69,108
)

RBRACK
69,109
]

VBAR
70,25
|

ID_UPPER
70,27
MInt

LBRACE
70,31
{

ID_UPPER
70,32
Width

RBRACE
70,37
}

STRING
70,39
">uMInt"

ID_UPPER
70,48
MInt

LBRACE
70,52
{

ID_UPPER
70,53
Width

RBRACE
70,58
}

LBRACK
70,60
[

ATTR_KEY
70,61
function

COMMA
70,69
,

ATTR_KEY
70,71
total

COMMA
70,76
,

ATTR_KEY
70,78
hook

LPAREN
70,82
(

ATTR_CONTENT
70,83
MINT.ugt

RPAREN
70,91
)

COMMA
70,92
,

ATTR_KEY
70,94
smt-hook

LPAREN
70,102
(

ATTR_CONTENT
70,103
bvugt

RPAREN
70,108
)

RBRACK
70,109
]

VBAR
71,25
|

ID_UPPER
71,27
MInt

LBRACE
71,31
{

ID_UPPER
71,32
Width

RBRACE
71,37
}

STRING
71,39
">=sMInt"

ID_UPPER
71,49
MInt

LBRACE
71,53
{

ID_UPPER
71,54
Width

RBRACE
71,59
}

LBRACK
71,61
[

ATTR_KEY
71,62
function

COMMA
71,70
,

ATTR_KEY
71,72
total

COMMA
71,77
,

ATTR_KEY
71,79
hook

LPAREN
71,83
(

ATTR_CONTENT
71,84
MINT.sge

RPAREN
71,92
)

COMMA
71,93
,

ATTR_KEY
71,95
smt-hook

LPAREN
71,103
(

ATTR_CONTENT
71,104
bvsge

RPAREN
71,109
)

RBRACK
71,110
]

VBAR
72,25
|

ID_UPPER
72,27
MInt

LBRACE
72,31
{

ID_UPPER
72,32
Width

RBRACE
72,37
}

STRING
72,39
">=uMInt"

ID_UPPER
72,49
MInt

LBRACE
72,53
{

ID_UPPER
72,54
Width

RBRACE
72,59
}

LBRACK
72,61
[

ATTR_KEY
72,62
function

COMMA
72,70
,

ATTR_KEY
72,72
total

COMMA
72,77
,

ATTR_KEY
72,79
hook

LPAREN
72,83
(

ATTR_CONTENT
72,84
MINT.uge

RPAREN
72,92
)

COMMA
72,93
,

ATTR_KEY
72,95
smt-hook

LPAREN
72,103
(

ATTR_CONTENT
72,104
bvuge

RPAREN
72,109
)

RBRACK
72,110
]

VBAR
73,25
|

ID_UPPER
73,27
MInt

LBRACE
73,31
{

ID_UPPER
73,32
Width

RBRACE
73,37
}

STRING
73,39
"==MInt"

ID_UPPER
73,48
MInt

LBRACE
73,52
{

ID_UPPER
73,53
Width

RBRACE
73,58
}

LBRACK
73,60
[

ATTR_KEY
73,61
function

COMMA
73,69
,

ATTR_KEY
73,71
total

COMMA
73,76
,

ATTR_KEY
73,78
hook

LPAREN
73,82
(

ATTR_CONTENT
73,83
MINT.eq

RPAREN
73,90
)

COMMA
73,91
,

ATTR_KEY
73,93
smt-hook

LPAREN
73,101
(

ATTR_CONTENT
73,102
=

RPAREN
73,103
)

RBRACK
73,104
]

VBAR
74,25
|

ID_UPPER
74,27
MInt

LBRACE
74,31
{

ID_UPPER
74,32
Width

RBRACE
74,37
}

STRING
74,39
"=/=MInt"

ID_UPPER
74,49
MInt

LBRACE
74,53
{

ID_UPPER
74,54
Width

RBRACE
74,59
}

LBRACK
74,61
[

ATTR_KEY
74,62
function

COMMA
74,70
,

ATTR_KEY
74,72
total

COMMA
74,77
,

ATTR_KEY
74,79
hook

LPAREN
74,83
(

ATTR_CONTENT
74,84
MINT.ne

RPAREN
74,91
)

COMMA
74,92
,

ATTR_KEY
74,94
smt-hook

LPAREN
74,102
(

ATTR_CONTENT
74,103
distinct

RPAREN
74,111
)

RBRACK
74,112
]

KW_SYNTAX
76,3
syntax

LBRACE
76,10
{

ID_UPPER
76,11
Width

RBRACE
76,16
}

ID_UPPER
76,18
MInt

LBRACE
76,22
{

ID_UPPER
76,23
Width

RBRACE
76,28
}

DCOLONEQ
76,30
::=

ID_LOWER
76,34
sMaxMInt

LPAREN
76,42
(

ID_UPPER
76,43
MInt

LBRACE
76,47
{

ID_UPPER
76,48
Width

RBRACE
76,53
}

COMMA
76,54
,

ID_UPPER
76,56
MInt

LBRACE
76,60
{

ID_UPPER
76,61
Width

RBRACE
76,66
}

RPAREN
76,67
)

LBRACK
76,69
[

ATTR_KEY
76,70
function

COMMA
76,78
,

ATTR_KEY
76,80
total

COMMA
76,85
,

ATTR_KEY
76,87
hook

LPAREN
76,91
(

ATTR_CONTENT
76,92
MINT.smax

RPAREN
76,101
)

COMMA
76,102
,

ATTR_KEY
76,104
smt-hook

LPAREN
76,112
(

ATTR_CONTENT
76,113
(ite (bvslt #1 #2) #2 #1)

RPAREN
76,138
)

RBRACK
76,139
]

VBAR
77,32
|

ID_LOWER
77,34
sMinMInt

LPAREN
77,42
(

ID_UPPER
77,43
MInt

LBRACE
77,47
{

ID_UPPER
77,48
Width

RBRACE
77,53
}

COMMA
77,54
,

ID_UPPER
77,56
MInt

LBRACE
77,60
{

ID_UPPER
77,61
Width

RBRACE
77,66
}

RPAREN
77,67
)

LBRACK
77,69
[

ATTR_KEY
77,70
function

COMMA
77,78
,

ATTR_KEY
77,80
total

COMMA
77,85
,

ATTR_KEY
77,87
hook

LPAREN
77,91
(

ATTR_CONTENT
77,92
MINT.smin

RPAREN
77,101
)

COMMA
77,102
,

ATTR_KEY
77,104
smt-hook

LPAREN
77,112
(

ATTR_CONTENT
77,113
(ite (bvslt #1 #2) #1 #2)

RPAREN
77,138
)

RBRACK
77,139
]

VBAR
78,32
|

ID_LOWER
78,34
uMaxMInt

LPAREN
78,42
(

ID_UPPER
78,43
MInt

LBRACE
78,47
{

ID_UPPER
78,48
Width

RBRACE
78,53
}

COMMA
78,54
,

ID_UPPER
78,56
MInt

LBRACE
78,60
{

ID_UPPER
78,61
Width

RBRACE
78,66
}

RPAREN
78,67
)

LBRACK
78,69
[

ATTR_KEY
78,70
function

COMMA
78,78
,

ATTR_KEY
78,80
total

COMMA
78,85
,

ATTR_KEY
78,87
hook

LPAREN
78,91
(

ATTR_CONTENT
78,92
MINT.umax

RPAREN
78,101
)

COMMA
78,102
,

ATTR_KEY
78,104
smt-hook

LPAREN
78,112
(

ATTR_CONTENT
78,113
(ite (bvult #1 #2) #2 #1)

RPAREN
78,138
)

RBRACK
78,139
]

VBAR
79,32
|

ID_LOWER
79,34
uMinMInt

LPAREN
79,42
(

ID_UPPER
79,43
MInt

LBRACE
79,47
{

ID_UPPER
79,48
Width

RBRACE
79,53
}

COMMA
79,54
,

ID_UPPER
79,56
MInt

LBRACE
79,60
{

ID_UPPER
79,61
Width

RBRACE
79,66
}

RPAREN
79,67
)

LBRACK
79,69
[

ATTR_KEY
79,70
function

COMMA
79,78
,

ATTR_KEY
79,80
total

COMMA
79,85
,

ATTR_KEY
79,87
hook

LPAREN
79,91
(

ATTR_CONTENT
79,92
MINT.umin

RPAREN
79,101
)

COMMA
79,102
,

ATTR_KEY
79,104
smt-hook

LPAREN
79,112
(

ATTR_CONTENT
79,113
(ite (bvult #1 #2) #1 #2)

RPAREN
79,138
)

RBRACK
79,139
]

KW_SYNTAX
81,3
syntax

LBRACE
81,10
{

ID_UPPER
81,11
Width1

COMMA
81,17
,

ID_UPPER
81,19
Width2

RBRACE
81,25
}

ID_UPPER
81,27
MInt

LBRACE
81,31
{

ID_UPPER
81,32
Width1

RBRACE
81,38
}

DCOLONEQ
81,40
::=

ID_LOWER
81,44
roundMInt

LPAREN
81,53
(

ID_UPPER
81,54
MInt

LBRACE
81,58
{

ID_UPPER
81,59
Width2

RBRACE
81,65
}

RPAREN
81,66
)

LBRACK
81,68
[

ATTR_KEY
81,69
function

COMMA
81,77
,

ATTR_KEY
81,79
total

COMMA
81,84
,

ATTR_KEY
81,86
hook

LPAREN
81,90
(

ATTR_CONTENT
81,91
MINT.round

RPAREN
81,101
)

RBRACK
81,102
]

KW_ENDMODULE
82,1
endmodule

EOF
82,9


module UNSIGNED-INT-SYNTAX
  syntax Int [hook(INT.Int)]
  syntax Int ::= r"[0-9]+" [prefer, token, prec(2)]
endmodule


module INT-SYNTAX
  imports UNSIGNED-INT-SYNTAX
  syntax Int ::= r"[\\+-]?[0-9]+" [prefer, token, prec(2)]
endmodule


module INT-COMMON
  imports INT-SYNTAX
  imports private BOOL

  syntax Int ::= "~Int" Int                     [function, klabel(~Int_), symbol, total, latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}), hook(INT.not), smtlib(notInt)]
               > left:
                 Int "^Int" Int                 [function, klabel(_^Int_), symbol, left, smt-hook(^), latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}), hook(INT.pow)]
               | Int "^%Int" Int Int            [function, klabel(_^%Int__), symbol, left, smt-hook((mod (^ #1 #2) #3)), hook(INT.powmod)]
               > left:
                 Int "*Int" Int                 [function, total, klabel(_*Int_), symbol, left, comm, smt-hook(*), latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}), hook(INT.mul)]
               /* FIXME: translate /Int and %Int into smtlib */
               /* /Int and %Int implement t-division, which rounds towards 0 */
               | Int "/Int" Int                 [function, klabel(_/Int_), symbol, left, smt-hook(div), latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}), hook(INT.tdiv)]
               | Int "%Int" Int                 [function, klabel(_%Int_), symbol, left, smt-hook(mod), latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}), hook(INT.tmod)]
               /* divInt and modInt implement e-division according to the Euclidean division theorem, therefore the remainder is always positive */
               | Int "divInt" Int               [function, klabel(_divInt_), symbol, left, smt-hook(div), hook(INT.ediv)]
               | Int "modInt" Int               [function, klabel(_modInt_), symbol, left, smt-hook(mod), hook(INT.emod)]
               > left:
                 Int "+Int" Int                 [function, total, klabel(_+Int_), symbol, left, comm, smt-hook(+), latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}), hook(INT.add)]
               | Int "-Int" Int                 [function, total, klabel(_-Int_), symbol, left, smt-hook(-), latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}), hook(INT.sub)]
               > left:
                 Int ">>Int" Int                [function, klabel(_>>Int_), symbol, left, latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}), hook(INT.shr), smtlib(shrInt)]
               | Int "<<Int" Int                [function, klabel(_<<Int_), symbol, left, latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}), hook(INT.shl), smtlib(shlInt)]
               > left:
                 Int "&Int" Int                 [function, total, klabel(_&Int_), symbol, left, comm, latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}), hook(INT.and), smtlib(andInt)]
               > left:
                 Int "xorInt" Int               [function, total, klabel(_xorInt_), symbol, left, comm, latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}), hook(INT.xor), smtlib(xorInt)]
               > left:
                 Int "|Int" Int                 [function, total, klabel(_|Int_), symbol, left, comm, latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}), hook(INT.or), smtlib(orInt)]

  syntax Int ::= "minInt" "(" Int "," Int ")"   [function, total, smt-hook((ite (< #1 #2) #1 #2)), hook(INT.min)]
               | "maxInt" "(" Int "," Int ")"   [function, total, smt-hook((ite (< #1 #2) #2 #1)), hook(INT.max)]

  syntax Int ::= absInt ( Int )                 [function, total, smt-hook((ite (< #1 0) (- 0 #1) #1)), hook(INT.abs)]

  syntax Int ::= log2Int ( Int )                [function, hook(INT.log2)]

  syntax Int ::= bitRangeInt           ( Int, index: Int, length: Int ) [function, hook(INT.bitRange)]
               | signExtendBitRangeInt ( Int, index: Int, length: Int ) [function, hook(INT.signExtendBitRange)]

  syntax Bool ::= Int "<=Int" Int         [function, total, klabel(_<=Int_), symbol, smt-hook(<=), latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}), hook(INT.le)]
                | Int "<Int" Int          [function, total, klabel(_<Int_), symbol, smt-hook(<), latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}), hook(INT.lt)]
                | Int ">=Int" Int         [function, total, klabel(_>=Int_), symbol, smt-hook(>=), latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}), hook(INT.ge)]
                | Int ">Int" Int          [function, total, klabel(_>Int_), symbol, smt-hook(>), latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}), hook(INT.gt)]
                | Int "==Int" Int         [function, total, klabel(_==Int_), symbol, comm, smt-hook(=), latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}), hook(INT.eq)]
                | Int "=/=Int" Int        [function, total, klabel(_=/=Int_), symbol, comm, smt-hook(distinct), latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}), hook(INT.ne)]

  syntax Bool ::= Int "dividesInt" Int    [function]

  syntax Int ::= randInt(Int) [function, hook(INT.rand), impure]
  syntax K ::= srandInt(Int) [function, hook(INT.srand), impure]

endmodule


module INT-SYMBOLIC [symbolic]
  imports INT-COMMON
  imports INT-SYMBOLIC-KORE
  imports private BOOL

  // Arithmetic Normalization
  rule I +Int 0 => I [simplification]
  rule I -Int 0 => I [simplification]

  rule X modInt N => X requires 0 <=Int X andBool X <Int N [simplification]
  rule X   %Int N => X requires 0 <=Int X andBool X <Int N [simplification]

  // Bit-shifts
  rule X <<Int 0 => X [simplification]
  rule 0 <<Int _ => 0 [simplification]
  rule X >>Int 0 => X [simplification]
  rule 0 >>Int _ => 0 [simplification]
endmodule


module INT-SYMBOLIC-KORE [symbolic, kore, haskell]
  imports INT-COMMON
  imports ML-SYNTAX
  imports private BOOL

  // Definability Conditions
  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]

  // Arithmetic Normalization
  rule I +Int B => B +Int I          [concrete(I), symbolic(B), simplification(51)]
  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), simplification(51)]

  rule (A +Int I2) +Int I3 => A +Int (I2 +Int I3) [concrete(I2, I3), symbolic(A), simplification]
  rule I1 +Int (B +Int I3) => B +Int (I1 +Int I3) [concrete(I1, I3), symbolic(B), simplification]
  rule I1 -Int (B +Int I3) => (I1 -Int I3) -Int B [concrete(I1, I3), symbolic(B), simplification]
  rule I1 +Int (I2 +Int C) => (I1 +Int I2) +Int C [concrete(I1, I2), symbolic(C), simplification]
  rule I1 +Int (I2 -Int C) => (I1 +Int I2) -Int C [concrete(I1, I2), symbolic(C), simplification]
  rule (I1 -Int B) +Int I3 => (I1 +Int I3) -Int B [concrete(I1, I3), symbolic(B), simplification]
  rule I1 -Int (I2 +Int C) => (I1 -Int I2) -Int C [concrete(I1, I2), symbolic(C), simplification]
  rule I1 -Int (I2 -Int C) => (I1 -Int I2) +Int C [concrete(I1, I2), symbolic(C), simplification]
  rule (C -Int I2) -Int I3 => C -Int (I2 +Int I3) [concrete(I2, I3), symbolic(C), simplification]

  rule I1 &Int (I2 &Int C) => (I1 &Int I2) &Int C [concrete(I1, I2), symbolic(C), simplification]

endmodule


module INT-KORE [kore, symbolic]
  imports private K-EQUAL
  imports private BOOL
  imports INT-COMMON

  rule I1:Int ==K I2:Int => I1 ==Int I2 [simplification]
  rule {K1 ==Int K2 #Equals true} => {K1 #Equals K2} [simplification]
  rule {true #Equals K1 ==Int K2} => {K1 #Equals K2} [simplification]
  rule {K1 ==Int K2 #Equals false} => #Not({K1 #Equals K2}) [simplification]
  rule {false #Equals K1 ==Int K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=Int K2 #Equals true} => #Not({K1 #Equals K2}) [simplification]
  rule {true #Equals K1 =/=Int K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=Int K2 #Equals false} => {K1 #Equals K2} [simplification]
  rule {false #Equals K1 =/=Int K2} => {K1 #Equals K2} [simplification]

endmodule


module INT
  imports INT-COMMON
  imports INT-SYMBOLIC
  imports INT-KORE
  imports private K-EQUAL
  imports private BOOL

  rule bitRangeInt(I::Int, IDX::Int, LEN::Int) => (I >>Int IDX) modInt (1 <<Int LEN)

  rule signExtendBitRangeInt(I::Int, IDX::Int, LEN::Int) => (bitRangeInt(I, IDX, LEN) +Int (1 <<Int (LEN -Int 1))) modInt (1 <<Int LEN) -Int (1 <<Int (LEN -Int 1))

  rule I1:Int divInt I2:Int => (I1 -Int (I1 modInt I2)) /Int I2
  requires I2 =/=Int 0
  rule
    I1:Int modInt I2:Int
  =>
    ((I1 %Int absInt(I2)) +Int absInt(I2)) %Int absInt(I2)
  requires I2 =/=Int 0    [concrete, simplification]

  rule minInt(I1:Int, I2:Int) => I1 requires I1 <=Int I2
  rule minInt(I1:Int, I2:Int) => I2 requires I1 >=Int I2

  rule I1:Int =/=Int I2:Int => notBool (I1 ==Int I2)
  rule (I1:Int dividesInt I2:Int) => (I2 %Int I1) ==Int 0

  syntax Int ::= freshInt(Int)    [freshGenerator, function, total, private]
  rule freshInt(I:Int) => I
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
UNSIGNED-INT-SYNTAX

KW_SYNTAX
2,3
syntax

ID_UPPER
2,10
Int

LBRACK
2,14
[

ATTR_KEY
2,15
hook

LPAREN
2,19
(

ATTR_CONTENT
2,20
INT.Int

RPAREN
2,27
)

RBRACK
2,28
]

KW_SYNTAX
3,3
syntax

ID_UPPER
3,10
Int

DCOLONEQ
3,14
::=

REGEX
3,18
r"[0-9]+"

LBRACK
3,28
[

ATTR_KEY
3,29
prefer

COMMA
3,35
,

ATTR_KEY
3,37
token

COMMA
3,42
,

ATTR_KEY
3,44
prec

LPAREN
3,48
(

ATTR_CONTENT
3,49
2

RPAREN
3,50
)

RBRACK
3,51
]

KW_ENDMODULE
4,1
endmodule

KW_MODULE
7,1
module

MODNAME
7,8
INT-SYNTAX

KW_IMPORTS
8,3
imports

MODNAME
8,11
UNSIGNED-INT-SYNTAX

KW_SYNTAX
9,3
syntax

ID_UPPER
9,10
Int

DCOLONEQ
9,14
::=

REGEX
9,18
r"[\\+-]?[0-9]+"

LBRACK
9,35
[

ATTR_KEY
9,36
prefer

COMMA
9,42
,

ATTR_KEY
9,44
token

COMMA
9,49
,

ATTR_KEY
9,51
prec

LPAREN
9,55
(

ATTR_CONTENT
9,56
2

RPAREN
9,57
)

RBRACK
9,58
]

KW_ENDMODULE
10,1
endmodule

KW_MODULE
13,1
module

MODNAME
13,8
INT-COMMON

KW_IMPORTS
14,3
imports

MODNAME
14,11
INT-SYNTAX

KW_IMPORTS
15,3
imports

KW_PRIVATE
15,11
private

MODNAME
15,19
BOOL

KW_SYNTAX
17,3
syntax

ID_UPPER
17,10
Int

DCOLONEQ
17,14
::=

STRING
17,18
"~Int"

ID_UPPER
17,25
Int

LBRACK
17,49
[

ATTR_KEY
17,50
function

COMMA
17,58
,

ATTR_KEY
17,60
klabel

LPAREN
17,66
(

ATTR_CONTENT
17,67
~Int_

RPAREN
17,72
)

COMMA
17,73
,

ATTR_KEY
17,75
symbol

COMMA
17,81
,

ATTR_KEY
17,83
total

COMMA
17,88
,

ATTR_KEY
17,90
latex

LPAREN
17,95
(

ATTR_CONTENT
17,96
\mathop{\sim_{\scriptstyle\it Int}}{#1}

RPAREN
17,135
)

COMMA
17,136
,

ATTR_KEY
17,138
hook

LPAREN
17,142
(

ATTR_CONTENT
17,143
INT.not

RPAREN
17,150
)

COMMA
17,151
,

ATTR_KEY
17,153
smtlib

LPAREN
17,159
(

ATTR_CONTENT
17,160
notInt

RPAREN
17,166
)

RBRACK
17,167
]

GT
18,16
>

KW_LEFT
18,18
left

COLON
18,22
:

ID_UPPER
19,18
Int

STRING
19,22
"^Int"

ID_UPPER
19,29
Int

LBRACK
19,49
[

ATTR_KEY
19,50
function

COMMA
19,58
,

ATTR_KEY
19,60
klabel

LPAREN
19,66
(

ATTR_CONTENT
19,67
_^Int_

RPAREN
19,73
)

COMMA
19,74
,

ATTR_KEY
19,76
symbol

COMMA
19,82
,

ATTR_KEY
19,84
left

COMMA
19,88
,

ATTR_KEY
19,90
smt-hook

LPAREN
19,98
(

ATTR_CONTENT
19,99
^

RPAREN
19,100
)

COMMA
19,101
,

ATTR_KEY
19,103
latex

LPAREN
19,108
(

ATTR_CONTENT
19,109
{#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}

RPAREN
19,161
)

COMMA
19,162
,

ATTR_KEY
19,164
hook

LPAREN
19,168
(

ATTR_CONTENT
19,169
INT.pow

RPAREN
19,176
)

RBRACK
19,177
]

VBAR
20,16
|

ID_UPPER
20,18
Int

STRING
20,22
"^%Int"

ID_UPPER
20,30
Int

ID_UPPER
20,34
Int

LBRACK
20,49
[

ATTR_KEY
20,50
function

COMMA
20,58
,

ATTR_KEY
20,60
klabel

LPAREN
20,66
(

ATTR_CONTENT
20,67
_^%Int__

RPAREN
20,75
)

COMMA
20,76
,

ATTR_KEY
20,78
symbol

COMMA
20,84
,

ATTR_KEY
20,86
left

COMMA
20,90
,

ATTR_KEY
20,92
smt-hook

LPAREN
20,100
(

ATTR_CONTENT
20,101
(mod (^ #1 #2) #3)

RPAREN
20,119
)

COMMA
20,120
,

ATTR_KEY
20,122
hook

LPAREN
20,126
(

ATTR_CONTENT
20,127
INT.powmod

RPAREN
20,137
)

RBRACK
20,138
]

GT
21,16
>

KW_LEFT
21,18
left

COLON
21,22
:

ID_UPPER
22,18
Int

STRING
22,22
"*Int"

ID_UPPER
22,29
Int

LBRACK
22,49
[

ATTR_KEY
22,50
function

COMMA
22,58
,

ATTR_KEY
22,60
total

COMMA
22,65
,

ATTR_KEY
22,67
klabel

LPAREN
22,73
(

ATTR_CONTENT
22,74
_*Int_

RPAREN
22,80
)

COMMA
22,81
,

ATTR_KEY
22,83
symbol

COMMA
22,89
,

ATTR_KEY
22,91
left

COMMA
22,95
,

ATTR_KEY
22,97
comm

COMMA
22,101
,

ATTR_KEY
22,103
smt-hook

LPAREN
22,111
(

ATTR_CONTENT
22,112
*

RPAREN
22,113
)

COMMA
22,114
,

ATTR_KEY
22,116
latex

LPAREN
22,121
(

ATTR_CONTENT
22,122
{#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}

RPAREN
22,166
)

COMMA
22,167
,

ATTR_KEY
22,169
hook

LPAREN
22,173
(

ATTR_CONTENT
22,174
INT.mul

RPAREN
22,181
)

RBRACK
22,182
]

VBAR
25,16
|

ID_UPPER
25,18
Int

STRING
25,22
"/Int"

ID_UPPER
25,29
Int

LBRACK
25,49
[

ATTR_KEY
25,50
function

COMMA
25,58
,

ATTR_KEY
25,60
klabel

LPAREN
25,66
(

ATTR_CONTENT
25,67
_/Int_

RPAREN
25,73
)

COMMA
25,74
,

ATTR_KEY
25,76
symbol

COMMA
25,82
,

ATTR_KEY
25,84
left

COMMA
25,88
,

ATTR_KEY
25,90
smt-hook

LPAREN
25,98
(

ATTR_CONTENT
25,99
div

RPAREN
25,102
)

COMMA
25,103
,

ATTR_KEY
25,105
latex

LPAREN
25,110
(

ATTR_CONTENT
25,111
{#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}

RPAREN
25,155
)

COMMA
25,156
,

ATTR_KEY
25,158
hook

LPAREN
25,162
(

ATTR_CONTENT
25,163
INT.tdiv

RPAREN
25,171
)

RBRACK
25,172
]

VBAR
26,16
|

ID_UPPER
26,18
Int

STRING
26,22
"%Int"

ID_UPPER
26,29
Int

LBRACK
26,49
[

ATTR_KEY
26,50
function

COMMA
26,58
,

ATTR_KEY
26,60
klabel

LPAREN
26,66
(

ATTR_CONTENT
26,67
_%Int_

RPAREN
26,73
)

COMMA
26,74
,

ATTR_KEY
26,76
symbol

COMMA
26,82
,

ATTR_KEY
26,84
left

COMMA
26,88
,

ATTR_KEY
26,90
smt-hook

LPAREN
26,98
(

ATTR_CONTENT
26,99
mod

RPAREN
26,102
)

COMMA
26,103
,

ATTR_KEY
26,105
latex

LPAREN
26,110
(

ATTR_CONTENT
26,111
{#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}

RPAREN
26,153
)

COMMA
26,154
,

ATTR_KEY
26,156
hook

LPAREN
26,160
(

ATTR_CONTENT
26,161
INT.tmod

RPAREN
26,169
)

RBRACK
26,170
]

VBAR
28,16
|

ID_UPPER
28,18
Int

STRING
28,22
"divInt"

ID_UPPER
28,31
Int

LBRACK
28,49
[

ATTR_KEY
28,50
function

COMMA
28,58
,

ATTR_KEY
28,60
klabel

LPAREN
28,66
(

ATTR_CONTENT
28,67
_divInt_

RPAREN
28,75
)

COMMA
28,76
,

ATTR_KEY
28,78
symbol

COMMA
28,84
,

ATTR_KEY
28,86
left

COMMA
28,90
,

ATTR_KEY
28,92
smt-hook

LPAREN
28,100
(

ATTR_CONTENT
28,101
div

RPAREN
28,104
)

COMMA
28,105
,

ATTR_KEY
28,107
hook

LPAREN
28,111
(

ATTR_CONTENT
28,112
INT.ediv

RPAREN
28,120
)

RBRACK
28,121
]

VBAR
29,16
|

ID_UPPER
29,18
Int

STRING
29,22
"modInt"

ID_UPPER
29,31
Int

LBRACK
29,49
[

ATTR_KEY
29,50
function

COMMA
29,58
,

ATTR_KEY
29,60
klabel

LPAREN
29,66
(

ATTR_CONTENT
29,67
_modInt_

RPAREN
29,75
)

COMMA
29,76
,

ATTR_KEY
29,78
symbol

COMMA
29,84
,

ATTR_KEY
29,86
left

COMMA
29,90
,

ATTR_KEY
29,92
smt-hook

LPAREN
29,100
(

ATTR_CONTENT
29,101
mod

RPAREN
29,104
)

COMMA
29,105
,

ATTR_KEY
29,107
hook

LPAREN
29,111
(

ATTR_CONTENT
29,112
INT.emod

RPAREN
29,120
)

RBRACK
29,121
]

GT
30,16
>

KW_LEFT
30,18
left

COLON
30,22
:

ID_UPPER
31,18
Int

STRING
31,22
"+Int"

ID_UPPER
31,29
Int

LBRACK
31,49
[

ATTR_KEY
31,50
function

COMMA
31,58
,

ATTR_KEY
31,60
total

COMMA
31,65
,

ATTR_KEY
31,67
klabel

LPAREN
31,73
(

ATTR_CONTENT
31,74
_+Int_

RPAREN
31,80
)

COMMA
31,81
,

ATTR_KEY
31,83
symbol

COMMA
31,89
,

ATTR_KEY
31,91
left

COMMA
31,95
,

ATTR_KEY
31,97
comm

COMMA
31,101
,

ATTR_KEY
31,103
smt-hook

LPAREN
31,111
(

ATTR_CONTENT
31,112
+

RPAREN
31,113
)

COMMA
31,114
,

ATTR_KEY
31,116
latex

LPAREN
31,121
(

ATTR_CONTENT
31,122
{#1}\mathrel{+_{\scriptstyle\it Int}}{#2}

RPAREN
31,163
)

COMMA
31,164
,

ATTR_KEY
31,166
hook

LPAREN
31,170
(

ATTR_CONTENT
31,171
INT.add

RPAREN
31,178
)

RBRACK
31,179
]

VBAR
32,16
|

ID_UPPER
32,18
Int

STRING
32,22
"-Int"

ID_UPPER
32,29
Int

LBRACK
32,49
[

ATTR_KEY
32,50
function

COMMA
32,58
,

ATTR_KEY
32,60
total

COMMA
32,65
,

ATTR_KEY
32,67
klabel

LPAREN
32,73
(

ATTR_CONTENT
32,74
_-Int_

RPAREN
32,80
)

COMMA
32,81
,

ATTR_KEY
32,83
symbol

COMMA
32,89
,

ATTR_KEY
32,91
left

COMMA
32,95
,

ATTR_KEY
32,97
smt-hook

LPAREN
32,105
(

ATTR_CONTENT
32,106
-

RPAREN
32,107
)

COMMA
32,108
,

ATTR_KEY
32,110
latex

LPAREN
32,115
(

ATTR_CONTENT
32,116
{#1}\mathrel{-_{\scriptstyle\it Int}}{#2}

RPAREN
32,157
)

COMMA
32,158
,

ATTR_KEY
32,160
hook

LPAREN
32,164
(

ATTR_CONTENT
32,165
INT.sub

RPAREN
32,172
)

RBRACK
32,173
]

GT
33,16
>

KW_LEFT
33,18
left

COLON
33,22
:

ID_UPPER
34,18
Int

STRING
34,22
">>Int"

ID_UPPER
34,30
Int

LBRACK
34,49
[

ATTR_KEY
34,50
function

COMMA
34,58
,

ATTR_KEY
34,60
klabel

LPAREN
34,66
(

ATTR_CONTENT
34,67
_>>Int_

RPAREN
34,74
)

COMMA
34,75
,

ATTR_KEY
34,77
symbol

COMMA
34,83
,

ATTR_KEY
34,85
left

COMMA
34,89
,

ATTR_KEY
34,91
latex

LPAREN
34,96
(

ATTR_CONTENT
34,97
{#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}

RPAREN
34,140
)

COMMA
34,141
,

ATTR_KEY
34,143
hook

LPAREN
34,147
(

ATTR_CONTENT
34,148
INT.shr

RPAREN
34,155
)

COMMA
34,156
,

ATTR_KEY
34,158
smtlib

LPAREN
34,164
(

ATTR_CONTENT
34,165
shrInt

RPAREN
34,171
)

RBRACK
34,172
]

VBAR
35,16
|

ID_UPPER
35,18
Int

STRING
35,22
"<<Int"

ID_UPPER
35,30
Int

LBRACK
35,49
[

ATTR_KEY
35,50
function

COMMA
35,58
,

ATTR_KEY
35,60
klabel

LPAREN
35,66
(

ATTR_CONTENT
35,67
_<<Int_

RPAREN
35,74
)

COMMA
35,75
,

ATTR_KEY
35,77
symbol

COMMA
35,83
,

ATTR_KEY
35,85
left

COMMA
35,89
,

ATTR_KEY
35,91
latex

LPAREN
35,96
(

ATTR_CONTENT
35,97
{#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}

RPAREN
35,140
)

COMMA
35,141
,

ATTR_KEY
35,143
hook

LPAREN
35,147
(

ATTR_CONTENT
35,148
INT.shl

RPAREN
35,155
)

COMMA
35,156
,

ATTR_KEY
35,158
smtlib

LPAREN
35,164
(

ATTR_CONTENT
35,165
shlInt

RPAREN
35,171
)

RBRACK
35,172
]

GT
36,16
>

KW_LEFT
36,18
left

COLON
36,22
:

ID_UPPER
37,18
Int

STRING
37,22
"&Int"

ID_UPPER
37,29
Int

LBRACK
37,49
[

ATTR_KEY
37,50
function

COMMA
37,58
,

ATTR_KEY
37,60
total

COMMA
37,65
,

ATTR_KEY
37,67
klabel

LPAREN
37,73
(

ATTR_CONTENT
37,74
_&Int_

RPAREN
37,80
)

COMMA
37,81
,

ATTR_KEY
37,83
symbol

COMMA
37,89
,

ATTR_KEY
37,91
left

COMMA
37,95
,

ATTR_KEY
37,97
comm

COMMA
37,101
,

ATTR_KEY
37,103
latex

LPAREN
37,108
(

ATTR_CONTENT
37,109
{#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}

RPAREN
37,151
)

COMMA
37,152
,

ATTR_KEY
37,154
hook

LPAREN
37,158
(

ATTR_CONTENT
37,159
INT.and

RPAREN
37,166
)

COMMA
37,167
,

ATTR_KEY
37,169
smtlib

LPAREN
37,175
(

ATTR_CONTENT
37,176
andInt

RPAREN
37,182
)

RBRACK
37,183
]

GT
38,16
>

KW_LEFT
38,18
left

COLON
38,22
:

ID_UPPER
39,18
Int

STRING
39,22
"xorInt"

ID_UPPER
39,31
Int

LBRACK
39,49
[

ATTR_KEY
39,50
function

COMMA
39,58
,

ATTR_KEY
39,60
total

COMMA
39,65
,

ATTR_KEY
39,67
klabel

LPAREN
39,73
(

ATTR_CONTENT
39,74
_xorInt_

RPAREN
39,82
)

COMMA
39,83
,

ATTR_KEY
39,85
symbol

COMMA
39,91
,

ATTR_KEY
39,93
left

COMMA
39,97
,

ATTR_KEY
39,99
comm

COMMA
39,103
,

ATTR_KEY
39,105
latex

LPAREN
39,110
(

ATTR_CONTENT
39,111
{#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}

RPAREN
39,157
)

COMMA
39,158
,

ATTR_KEY
39,160
hook

LPAREN
39,164
(

ATTR_CONTENT
39,165
INT.xor

RPAREN
39,172
)

COMMA
39,173
,

ATTR_KEY
39,175
smtlib

LPAREN
39,181
(

ATTR_CONTENT
39,182
xorInt

RPAREN
39,188
)

RBRACK
39,189
]

GT
40,16
>

KW_LEFT
40,18
left

COLON
40,22
:

ID_UPPER
41,18
Int

STRING
41,22
"|Int"

ID_UPPER
41,29
Int

LBRACK
41,49
[

ATTR_KEY
41,50
function

COMMA
41,58
,

ATTR_KEY
41,60
total

COMMA
41,65
,

ATTR_KEY
41,67
klabel

LPAREN
41,73
(

ATTR_CONTENT
41,74
_|Int_

RPAREN
41,80
)

COMMA
41,81
,

ATTR_KEY
41,83
symbol

COMMA
41,89
,

ATTR_KEY
41,91
left

COMMA
41,95
,

ATTR_KEY
41,97
comm

COMMA
41,101
,

ATTR_KEY
41,103
latex

LPAREN
41,108
(

ATTR_CONTENT
41,109
{#1}\mathrel{|_{\scriptstyle\it Int}}{#2}

RPAREN
41,150
)

COMMA
41,151
,

ATTR_KEY
41,153
hook

LPAREN
41,157
(

ATTR_CONTENT
41,158
INT.or

RPAREN
41,164
)

COMMA
41,165
,

ATTR_KEY
41,167
smtlib

LPAREN
41,173
(

ATTR_CONTENT
41,174
orInt

RPAREN
41,179
)

RBRACK
41,180
]

KW_SYNTAX
43,3
syntax

ID_UPPER
43,10
Int

DCOLONEQ
43,14
::=

STRING
43,18
"minInt"

STRING
43,27
"("

ID_UPPER
43,31
Int

STRING
43,35
","

ID_UPPER
43,39
Int

STRING
43,43
")"

LBRACK
43,49
[

ATTR_KEY
43,50
function

COMMA
43,58
,

ATTR_KEY
43,60
total

COMMA
43,65
,

ATTR_KEY
43,67
smt-hook

LPAREN
43,75
(

ATTR_CONTENT
43,76
(ite (< #1 #2) #1 #2)

RPAREN
43,97
)

COMMA
43,98
,

ATTR_KEY
43,100
hook

LPAREN
43,104
(

ATTR_CONTENT
43,105
INT.min

RPAREN
43,112
)

RBRACK
43,113
]

VBAR
44,16
|

STRING
44,18
"maxInt"

STRING
44,27
"("

ID_UPPER
44,31
Int

STRING
44,35
","

ID_UPPER
44,39
Int

STRING
44,43
")"

LBRACK
44,49
[

ATTR_KEY
44,50
function

COMMA
44,58
,

ATTR_KEY
44,60
total

COMMA
44,65
,

ATTR_KEY
44,67
smt-hook

LPAREN
44,75
(

ATTR_CONTENT
44,76
(ite (< #1 #2) #2 #1)

RPAREN
44,97
)

COMMA
44,98
,

ATTR_KEY
44,100
hook

LPAREN
44,104
(

ATTR_CONTENT
44,105
INT.max

RPAREN
44,112
)

RBRACK
44,113
]

KW_SYNTAX
46,3
syntax

ID_UPPER
46,10
Int

DCOLONEQ
46,14
::=

ID_LOWER
46,18
absInt

LPAREN
46,25
(

ID_UPPER
46,27
Int

RPAREN
46,31
)

LBRACK
46,49
[

ATTR_KEY
46,50
function

COMMA
46,58
,

ATTR_KEY
46,60
total

COMMA
46,65
,

ATTR_KEY
46,67
smt-hook

LPAREN
46,75
(

ATTR_CONTENT
46,76
(ite (< #1 0) (- 0 #1) #1)

RPAREN
46,102
)

COMMA
46,103
,

ATTR_KEY
46,105
hook

LPAREN
46,109
(

ATTR_CONTENT
46,110
INT.abs

RPAREN
46,117
)

RBRACK
46,118
]

KW_SYNTAX
48,3
syntax

ID_UPPER
48,10
Int

DCOLONEQ
48,14
::=

ID_LOWER
48,18
log2Int

LPAREN
48,26
(

ID_UPPER
48,28
Int

RPAREN
48,32
)

LBRACK
48,49
[

ATTR_KEY
48,50
function

COMMA
48,58
,

ATTR_KEY
48,60
hook

LPAREN
48,64
(

ATTR_CONTENT
48,65
INT.log2

RPAREN
48,73
)

RBRACK
48,74
]

KW_SYNTAX
50,3
syntax

ID_UPPER
50,10
Int

DCOLONEQ
50,14
::=

ID_LOWER
50,18
bitRangeInt

LPAREN
50,40
(

ID_UPPER
50,42
Int

COMMA
50,45
,

ID_LOWER
50,47
index

COLON
50,52
:

ID_UPPER
50,54
Int

COMMA
50,57
,

ID_LOWER
50,59
length

COLON
50,65
:

ID_UPPER
50,67
Int

RPAREN
50,71
)

LBRACK
50,73
[

ATTR_KEY
50,74
function

COMMA
50,82
,

ATTR_KEY
50,84
hook

LPAREN
50,88
(

ATTR_CONTENT
50,89
INT.bitRange

RPAREN
50,101
)

RBRACK
50,102
]

VBAR
51,16
|

ID_LOWER
51,18
signExtendBitRangeInt

LPAREN
51,40
(

ID_UPPER
51,42
Int

COMMA
51,45
,

ID_LOWER
51,47
index

COLON
51,52
:

ID_UPPER
51,54
Int

COMMA
51,57
,

ID_LOWER
51,59
length

COLON
51,65
:

ID_UPPER
51,67
Int

RPAREN
51,71
)

LBRACK
51,73
[

ATTR_KEY
51,74
function

COMMA
51,82
,

ATTR_KEY
51,84
hook

LPAREN
51,88
(

ATTR_CONTENT
51,89
INT.signExtendBitRange

RPAREN
51,111
)

RBRACK
51,112
]

KW_SYNTAX
53,3
syntax

ID_UPPER
53,10
Bool

DCOLONEQ
53,15
::=

ID_UPPER
53,19
Int

STRING
53,23
"<=Int"

ID_UPPER
53,31
Int

LBRACK
53,43
[

ATTR_KEY
53,44
function

COMMA
53,52
,

ATTR_KEY
53,54
total

COMMA
53,59
,

ATTR_KEY
53,61
klabel

LPAREN
53,67
(

ATTR_CONTENT
53,68
_<=Int_

RPAREN
53,75
)

COMMA
53,76
,

ATTR_KEY
53,78
symbol

COMMA
53,84
,

ATTR_KEY
53,86
smt-hook

LPAREN
53,94
(

ATTR_CONTENT
53,95
<=

RPAREN
53,97
)

COMMA
53,98
,

ATTR_KEY
53,100
latex

LPAREN
53,105
(

ATTR_CONTENT
53,106
{#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}

RPAREN
53,150
)

COMMA
53,151
,

ATTR_KEY
53,153
hook

LPAREN
53,157
(

ATTR_CONTENT
53,158
INT.le

RPAREN
53,164
)

RBRACK
53,165
]

VBAR
54,17
|

ID_UPPER
54,19
Int

STRING
54,23
"<Int"

ID_UPPER
54,30
Int

LBRACK
54,43
[

ATTR_KEY
54,44
function

COMMA
54,52
,

ATTR_KEY
54,54
total

COMMA
54,59
,

ATTR_KEY
54,61
klabel

LPAREN
54,67
(

ATTR_CONTENT
54,68
_<Int_

RPAREN
54,74
)

COMMA
54,75
,

ATTR_KEY
54,77
symbol

COMMA
54,83
,

ATTR_KEY
54,85
smt-hook

LPAREN
54,93
(

ATTR_CONTENT
54,94
<

RPAREN
54,95
)

COMMA
54,96
,

ATTR_KEY
54,98
latex

LPAREN
54,103
(

ATTR_CONTENT
54,104
{#1}\mathrel{<_{\scriptstyle\it Int}}{#2}

RPAREN
54,145
)

COMMA
54,146
,

ATTR_KEY
54,148
hook

LPAREN
54,152
(

ATTR_CONTENT
54,153
INT.lt

RPAREN
54,159
)

RBRACK
54,160
]

VBAR
55,17
|

ID_UPPER
55,19
Int

STRING
55,23
">=Int"

ID_UPPER
55,31
Int

LBRACK
55,43
[

ATTR_KEY
55,44
function

COMMA
55,52
,

ATTR_KEY
55,54
total

COMMA
55,59
,

ATTR_KEY
55,61
klabel

LPAREN
55,67
(

ATTR_CONTENT
55,68
_>=Int_

RPAREN
55,75
)

COMMA
55,76
,

ATTR_KEY
55,78
symbol

COMMA
55,84
,

ATTR_KEY
55,86
smt-hook

LPAREN
55,94
(

ATTR_CONTENT
55,95
>=

RPAREN
55,97
)

COMMA
55,98
,

ATTR_KEY
55,100
latex

LPAREN
55,105
(

ATTR_CONTENT
55,106
{#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}

RPAREN
55,150
)

COMMA
55,151
,

ATTR_KEY
55,153
hook

LPAREN
55,157
(

ATTR_CONTENT
55,158
INT.ge

RPAREN
55,164
)

RBRACK
55,165
]

VBAR
56,17
|

ID_UPPER
56,19
Int

STRING
56,23
">Int"

ID_UPPER
56,30
Int

LBRACK
56,43
[

ATTR_KEY
56,44
function

COMMA
56,52
,

ATTR_KEY
56,54
total

COMMA
56,59
,

ATTR_KEY
56,61
klabel

LPAREN
56,67
(

ATTR_CONTENT
56,68
_>Int_

RPAREN
56,74
)

COMMA
56,75
,

ATTR_KEY
56,77
symbol

COMMA
56,83
,

ATTR_KEY
56,85
smt-hook

LPAREN
56,93
(

ATTR_CONTENT
56,94
>

RPAREN
56,95
)

COMMA
56,96
,

ATTR_KEY
56,98
latex

LPAREN
56,103
(

ATTR_CONTENT
56,104
{#1}\mathrel{>_{\scriptstyle\it Int}}{#2}

RPAREN
56,145
)

COMMA
56,146
,

ATTR_KEY
56,148
hook

LPAREN
56,152
(

ATTR_CONTENT
56,153
INT.gt

RPAREN
56,159
)

RBRACK
56,160
]

VBAR
57,17
|

ID_UPPER
57,19
Int

STRING
57,23
"==Int"

ID_UPPER
57,31
Int

LBRACK
57,43
[

ATTR_KEY
57,44
function

COMMA
57,52
,

ATTR_KEY
57,54
total

COMMA
57,59
,

ATTR_KEY
57,61
klabel

LPAREN
57,67
(

ATTR_CONTENT
57,68
_==Int_

RPAREN
57,75
)

COMMA
57,76
,

ATTR_KEY
57,78
symbol

COMMA
57,84
,

ATTR_KEY
57,86
comm

COMMA
57,90
,

ATTR_KEY
57,92
smt-hook

LPAREN
57,100
(

ATTR_CONTENT
57,101
=

RPAREN
57,102
)

COMMA
57,103
,

ATTR_KEY
57,105
latex

LPAREN
57,110
(

ATTR_CONTENT
57,111
{#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}

RPAREN
57,157
)

COMMA
57,158
,

ATTR_KEY
57,160
hook

LPAREN
57,164
(

ATTR_CONTENT
57,165
INT.eq

RPAREN
57,171
)

RBRACK
57,172
]

VBAR
58,17
|

ID_UPPER
58,19
Int

STRING
58,23
"=/=Int"

ID_UPPER
58,32
Int

LBRACK
58,43
[

ATTR_KEY
58,44
function

COMMA
58,52
,

ATTR_KEY
58,54
total

COMMA
58,59
,

ATTR_KEY
58,61
klabel

LPAREN
58,67
(

ATTR_CONTENT
58,68
_=/=Int_

RPAREN
58,76
)

COMMA
58,77
,

ATTR_KEY
58,79
symbol

COMMA
58,85
,

ATTR_KEY
58,87
comm

COMMA
58,91
,

ATTR_KEY
58,93
smt-hook

LPAREN
58,101
(

ATTR_CONTENT
58,102
distinct

RPAREN
58,110
)

COMMA
58,111
,

ATTR_KEY
58,113
latex

LPAREN
58,118
(

ATTR_CONTENT
58,119
{#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}

RPAREN
58,168
)

COMMA
58,169
,

ATTR_KEY
58,171
hook

LPAREN
58,175
(

ATTR_CONTENT
58,176
INT.ne

RPAREN
58,182
)

RBRACK
58,183
]

KW_SYNTAX
60,3
syntax

ID_UPPER
60,10
Bool

DCOLONEQ
60,15
::=

ID_UPPER
60,19
Int

STRING
60,23
"dividesInt"

ID_UPPER
60,36
Int

LBRACK
60,43
[

ATTR_KEY
60,44
function

RBRACK
60,52
]

KW_SYNTAX
62,3
syntax

ID_UPPER
62,10
Int

DCOLONEQ
62,14
::=

ID_LOWER
62,18
randInt

LPAREN
62,25
(

ID_UPPER
62,26
Int

RPAREN
62,29
)

LBRACK
62,31
[

ATTR_KEY
62,32
function

COMMA
62,40
,

ATTR_KEY
62,42
hook

LPAREN
62,46
(

ATTR_CONTENT
62,47
INT.rand

RPAREN
62,55
)

COMMA
62,56
,

ATTR_KEY
62,58
impure

RBRACK
62,64
]

KW_SYNTAX
63,3
syntax

ID_UPPER
63,10
K

DCOLONEQ
63,12
::=

ID_LOWER
63,16
srandInt

LPAREN
63,24
(

ID_UPPER
63,25
Int

RPAREN
63,28
)

LBRACK
63,30
[

ATTR_KEY
63,31
function

COMMA
63,39
,

ATTR_KEY
63,41
hook

LPAREN
63,45
(

ATTR_CONTENT
63,46
INT.srand

RPAREN
63,55
)

COMMA
63,56
,

ATTR_KEY
63,58
impure

RBRACK
63,64
]

KW_ENDMODULE
65,1
endmodule

KW_MODULE
68,1
module

MODNAME
68,8
INT-SYMBOLIC

LBRACK
68,21
[

ATTR_KEY
68,22
symbolic

RBRACK
68,30
]

KW_IMPORTS
69,3
imports

MODNAME
69,11
INT-COMMON

KW_IMPORTS
70,3
imports

MODNAME
70,11
INT-SYMBOLIC-KORE

KW_IMPORTS
71,3
imports

KW_PRIVATE
71,11
private

MODNAME
71,19
BOOL

KW_RULE
74,3
rule

BUBBLE
74,8
I +Int 0 => I

LBRACK
74,22
[

ATTR_KEY
74,23
simplification

RBRACK
74,37
]

KW_RULE
75,3
rule

BUBBLE
75,8
I -Int 0 => I

LBRACK
75,22
[

ATTR_KEY
75,23
simplification

RBRACK
75,37
]

KW_RULE
77,3
rule

BUBBLE
77,8
X modInt N => X requires 0 <=Int X andBool X <Int N

LBRACK
77,60
[

ATTR_KEY
77,61
simplification

RBRACK
77,75
]

KW_RULE
78,3
rule

BUBBLE
78,8
X   %Int N => X requires 0 <=Int X andBool X <Int N

LBRACK
78,60
[

ATTR_KEY
78,61
simplification

RBRACK
78,75
]

KW_RULE
81,3
rule

BUBBLE
81,8
X <<Int 0 => X

LBRACK
81,23
[

ATTR_KEY
81,24
simplification

RBRACK
81,38
]

KW_RULE
82,3
rule

BUBBLE
82,8
0 <<Int _ => 0

LBRACK
82,23
[

ATTR_KEY
82,24
simplification

RBRACK
82,38
]

KW_RULE
83,3
rule

BUBBLE
83,8
X >>Int 0 => X

LBRACK
83,23
[

ATTR_KEY
83,24
simplification

RBRACK
83,38
]

KW_RULE
84,3
rule

BUBBLE
84,8
0 >>Int _ => 0

LBRACK
84,23
[

ATTR_KEY
84,24
simplification

RBRACK
84,38
]

KW_ENDMODULE
85,1
endmodule

KW_MODULE
88,1
module

MODNAME
88,8
INT-SYMBOLIC-KORE

LBRACK
88,26
[

ATTR_KEY
88,27
symbolic

COMMA
88,35
,

ATTR_KEY
88,37
kore

COMMA
88,41
,

ATTR_KEY
88,43
haskell

RBRACK
88,50
]

KW_IMPORTS
89,3
imports

MODNAME
89,11
INT-COMMON

KW_IMPORTS
90,3
imports

MODNAME
90,11
ML-SYNTAX

KW_IMPORTS
91,3
imports

KW_PRIVATE
91,11
private

MODNAME
91,19
BOOL

KW_RULE
94,3
rule

BUBBLE
94,8
#Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
94,103
[

ATTR_KEY
94,104
simplification

RBRACK
94,118
]

KW_RULE
95,3
rule

BUBBLE
95,8
#Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
95,103
[

ATTR_KEY
95,104
simplification

RBRACK
95,118
]

KW_RULE
96,3
rule

BUBBLE
96,8
#Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
96,103
[

ATTR_KEY
96,104
simplification

RBRACK
96,118
]

KW_RULE
97,3
rule

BUBBLE
97,8
#Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
97,103
[

ATTR_KEY
97,104
simplification

RBRACK
97,118
]

KW_RULE
98,3
rule

BUBBLE
98,8
#Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
98,103
[

ATTR_KEY
98,104
simplification

RBRACK
98,118
]

KW_RULE
101,3
rule

BUBBLE
101,8
I +Int B => B +Int I

LBRACK
101,38
[

ATTR_KEY
101,39
concrete

LPAREN
101,47
(

ATTR_CONTENT
101,48
I

RPAREN
101,49
)

COMMA
101,50
,

ATTR_KEY
101,52
symbolic

LPAREN
101,60
(

ATTR_CONTENT
101,61
B

RPAREN
101,62
)

COMMA
101,63
,

ATTR_KEY
101,65
simplification

LPAREN
101,79
(

ATTR_CONTENT
101,80
51

RPAREN
101,82
)

RBRACK
101,83
]

KW_RULE
102,3
rule

BUBBLE
102,8
A -Int I => A +Int (0 -Int I)

LBRACK
102,38
[

ATTR_KEY
102,39
concrete

LPAREN
102,47
(

ATTR_CONTENT
102,48
I

RPAREN
102,49
)

COMMA
102,50
,

ATTR_KEY
102,52
symbolic

LPAREN
102,60
(

ATTR_CONTENT
102,61
A

RPAREN
102,62
)

COMMA
102,63
,

ATTR_KEY
102,65
simplification

LPAREN
102,79
(

ATTR_CONTENT
102,80
51

RPAREN
102,82
)

RBRACK
102,83
]

KW_RULE
104,3
rule

BUBBLE
104,8
(A +Int I2) +Int I3 => A +Int (I2 +Int I3)

LBRACK
104,51
[

ATTR_KEY
104,52
concrete

LPAREN
104,60
(

ATTR_CONTENT
104,61
I2, I3

RPAREN
104,67
)

COMMA
104,68
,

ATTR_KEY
104,70
symbolic

LPAREN
104,78
(

ATTR_CONTENT
104,79
A

RPAREN
104,80
)

COMMA
104,81
,

ATTR_KEY
104,83
simplification

RBRACK
104,97
]

KW_RULE
105,3
rule

BUBBLE
105,8
I1 +Int (B +Int I3) => B +Int (I1 +Int I3)

LBRACK
105,51
[

ATTR_KEY
105,52
concrete

LPAREN
105,60
(

ATTR_CONTENT
105,61
I1, I3

RPAREN
105,67
)

COMMA
105,68
,

ATTR_KEY
105,70
symbolic

LPAREN
105,78
(

ATTR_CONTENT
105,79
B

RPAREN
105,80
)

COMMA
105,81
,

ATTR_KEY
105,83
simplification

RBRACK
105,97
]

KW_RULE
106,3
rule

BUBBLE
106,8
I1 -Int (B +Int I3) => (I1 -Int I3) -Int B

LBRACK
106,51
[

ATTR_KEY
106,52
concrete

LPAREN
106,60
(

ATTR_CONTENT
106,61
I1, I3

RPAREN
106,67
)

COMMA
106,68
,

ATTR_KEY
106,70
symbolic

LPAREN
106,78
(

ATTR_CONTENT
106,79
B

RPAREN
106,80
)

COMMA
106,81
,

ATTR_KEY
106,83
simplification

RBRACK
106,97
]

KW_RULE
107,3
rule

BUBBLE
107,8
I1 +Int (I2 +Int C) => (I1 +Int I2) +Int C

LBRACK
107,51
[

ATTR_KEY
107,52
concrete

LPAREN
107,60
(

ATTR_CONTENT
107,61
I1, I2

RPAREN
107,67
)

COMMA
107,68
,

ATTR_KEY
107,70
symbolic

LPAREN
107,78
(

ATTR_CONTENT
107,79
C

RPAREN
107,80
)

COMMA
107,81
,

ATTR_KEY
107,83
simplification

RBRACK
107,97
]

KW_RULE
108,3
rule

BUBBLE
108,8
I1 +Int (I2 -Int C) => (I1 +Int I2) -Int C

LBRACK
108,51
[

ATTR_KEY
108,52
concrete

LPAREN
108,60
(

ATTR_CONTENT
108,61
I1, I2

RPAREN
108,67
)

COMMA
108,68
,

ATTR_KEY
108,70
symbolic

LPAREN
108,78
(

ATTR_CONTENT
108,79
C

RPAREN
108,80
)

COMMA
108,81
,

ATTR_KEY
108,83
simplification

RBRACK
108,97
]

KW_RULE
109,3
rule

BUBBLE
109,8
(I1 -Int B) +Int I3 => (I1 +Int I3) -Int B

LBRACK
109,51
[

ATTR_KEY
109,52
concrete

LPAREN
109,60
(

ATTR_CONTENT
109,61
I1, I3

RPAREN
109,67
)

COMMA
109,68
,

ATTR_KEY
109,70
symbolic

LPAREN
109,78
(

ATTR_CONTENT
109,79
B

RPAREN
109,80
)

COMMA
109,81
,

ATTR_KEY
109,83
simplification

RBRACK
109,97
]

KW_RULE
110,3
rule

BUBBLE
110,8
I1 -Int (I2 +Int C) => (I1 -Int I2) -Int C

LBRACK
110,51
[

ATTR_KEY
110,52
concrete

LPAREN
110,60
(

ATTR_CONTENT
110,61
I1, I2

RPAREN
110,67
)

COMMA
110,68
,

ATTR_KEY
110,70
symbolic

LPAREN
110,78
(

ATTR_CONTENT
110,79
C

RPAREN
110,80
)

COMMA
110,81
,

ATTR_KEY
110,83
simplification

RBRACK
110,97
]

KW_RULE
111,3
rule

BUBBLE
111,8
I1 -Int (I2 -Int C) => (I1 -Int I2) +Int C

LBRACK
111,51
[

ATTR_KEY
111,52
concrete

LPAREN
111,60
(

ATTR_CONTENT
111,61
I1, I2

RPAREN
111,67
)

COMMA
111,68
,

ATTR_KEY
111,70
symbolic

LPAREN
111,78
(

ATTR_CONTENT
111,79
C

RPAREN
111,80
)

COMMA
111,81
,

ATTR_KEY
111,83
simplification

RBRACK
111,97
]

KW_RULE
112,3
rule

BUBBLE
112,8
(C -Int I2) -Int I3 => C -Int (I2 +Int I3)

LBRACK
112,51
[

ATTR_KEY
112,52
concrete

LPAREN
112,60
(

ATTR_CONTENT
112,61
I2, I3

RPAREN
112,67
)

COMMA
112,68
,

ATTR_KEY
112,70
symbolic

LPAREN
112,78
(

ATTR_CONTENT
112,79
C

RPAREN
112,80
)

COMMA
112,81
,

ATTR_KEY
112,83
simplification

RBRACK
112,97
]

KW_RULE
114,3
rule

BUBBLE
114,8
I1 &Int (I2 &Int C) => (I1 &Int I2) &Int C

LBRACK
114,51
[

ATTR_KEY
114,52
concrete

LPAREN
114,60
(

ATTR_CONTENT
114,61
I1, I2

RPAREN
114,67
)

COMMA
114,68
,

ATTR_KEY
114,70
symbolic

LPAREN
114,78
(

ATTR_CONTENT
114,79
C

RPAREN
114,80
)

COMMA
114,81
,

ATTR_KEY
114,83
simplification

RBRACK
114,97
]

KW_ENDMODULE
116,1
endmodule

KW_MODULE
119,1
module

MODNAME
119,8
INT-KORE

LBRACK
119,17
[

ATTR_KEY
119,18
kore

COMMA
119,22
,

ATTR_KEY
119,24
symbolic

RBRACK
119,32
]

KW_IMPORTS
120,3
imports

KW_PRIVATE
120,11
private

MODNAME
120,19
K-EQUAL

KW_IMPORTS
121,3
imports

KW_PRIVATE
121,11
private

MODNAME
121,19
BOOL

KW_IMPORTS
122,3
imports

MODNAME
122,11
INT-COMMON

KW_RULE
124,3
rule

BUBBLE
124,8
I1:Int ==K I2:Int => I1 ==Int I2

LBRACK
124,41
[

ATTR_KEY
124,42
simplification

RBRACK
124,56
]

KW_RULE
125,3
rule

BUBBLE
125,8
{K1 ==Int K2 #Equals true} => {K1 #Equals K2}

LBRACK
125,54
[

ATTR_KEY
125,55
simplification

RBRACK
125,69
]

KW_RULE
126,3
rule

BUBBLE
126,8
{true #Equals K1 ==Int K2} => {K1 #Equals K2}

LBRACK
126,54
[

ATTR_KEY
126,55
simplification

RBRACK
126,69
]

KW_RULE
127,3
rule

BUBBLE
127,8
{K1 ==Int K2 #Equals false} => #Not({K1 #Equals K2})

LBRACK
127,61
[

ATTR_KEY
127,62
simplification

RBRACK
127,76
]

KW_RULE
128,3
rule

BUBBLE
128,8
{false #Equals K1 ==Int K2} => #Not({K1 #Equals K2})

LBRACK
128,61
[

ATTR_KEY
128,62
simplification

RBRACK
128,76
]

KW_RULE
129,3
rule

BUBBLE
129,8
{K1 =/=Int K2 #Equals true} => #Not({K1 #Equals K2})

LBRACK
129,61
[

ATTR_KEY
129,62
simplification

RBRACK
129,76
]

KW_RULE
130,3
rule

BUBBLE
130,8
{true #Equals K1 =/=Int K2} => #Not({K1 #Equals K2})

LBRACK
130,61
[

ATTR_KEY
130,62
simplification

RBRACK
130,76
]

KW_RULE
131,3
rule

BUBBLE
131,8
{K1 =/=Int K2 #Equals false} => {K1 #Equals K2}

LBRACK
131,56
[

ATTR_KEY
131,57
simplification

RBRACK
131,71
]

KW_RULE
132,3
rule

BUBBLE
132,8
{false #Equals K1 =/=Int K2} => {K1 #Equals K2}

LBRACK
132,56
[

ATTR_KEY
132,57
simplification

RBRACK
132,71
]

KW_ENDMODULE
134,1
endmodule

KW_MODULE
137,1
module

MODNAME
137,8
INT

KW_IMPORTS
138,3
imports

MODNAME
138,11
INT-COMMON

KW_IMPORTS
139,3
imports

MODNAME
139,11
INT-SYMBOLIC

KW_IMPORTS
140,3
imports

MODNAME
140,11
INT-KORE

KW_IMPORTS
141,3
imports

KW_PRIVATE
141,11
private

MODNAME
141,19
K-EQUAL

KW_IMPORTS
142,3
imports

KW_PRIVATE
142,11
private

MODNAME
142,19
BOOL

KW_RULE
144,3
rule

BUBBLE
144,8
bitRangeInt(I::Int, IDX::Int, LEN::Int) => (I >>Int IDX) modInt (1 <<Int LEN)

KW_RULE
146,3
rule

BUBBLE
146,8
signExtendBitRangeInt(I::Int, IDX::Int, LEN::Int) => (bitRangeInt(I, IDX, LEN) +Int (1 <<Int (LEN -Int 1))) modInt (1 <<Int LEN) -Int (1 <<Int (LEN -Int 1))

KW_RULE
148,3
rule

BUBBLE
148,8
I1:Int divInt I2:Int => (I1 -Int (I1 modInt I2)) /Int I2
  requires I2 =/=Int 0

KW_RULE
150,3
rule

BUBBLE
151,5
I1:Int modInt I2:Int
  =>
    ((I1 %Int absInt(I2)) +Int absInt(I2)) %Int absInt(I2)
  requires I2 =/=Int 0

LBRACK
154,27
[

ATTR_KEY
154,28
concrete

COMMA
154,36
,

ATTR_KEY
154,38
simplification

RBRACK
154,52
]

KW_RULE
156,3
rule

BUBBLE
156,8
minInt(I1:Int, I2:Int) => I1 requires I1 <=Int I2

KW_RULE
157,3
rule

BUBBLE
157,8
minInt(I1:Int, I2:Int) => I2 requires I1 >=Int I2

KW_RULE
159,3
rule

BUBBLE
159,8
I1:Int =/=Int I2:Int => notBool (I1 ==Int I2)

KW_RULE
160,3
rule

BUBBLE
160,8
(I1:Int dividesInt I2:Int) => (I2 %Int I1) ==Int 0

KW_SYNTAX
162,3
syntax

ID_UPPER
162,10
Int

DCOLONEQ
162,14
::=

ID_LOWER
162,18
freshInt

LPAREN
162,26
(

ID_UPPER
162,27
Int

RPAREN
162,30
)

LBRACK
162,35
[

ATTR_KEY
162,36
freshGenerator

COMMA
162,50
,

ATTR_KEY
162,52
function

COMMA
162,60
,

ATTR_KEY
162,62
total

COMMA
162,67
,

ATTR_KEY
162,69
private

RBRACK
162,76
]

KW_RULE
163,3
rule

BUBBLE
163,8
freshInt(I:Int) => I

KW_ENDMODULE
164,1
endmodule

EOF
164,9


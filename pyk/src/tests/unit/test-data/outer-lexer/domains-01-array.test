module ARRAY-SYNTAX
  imports private LIST

  syntax Array [hook(ARRAY.Array), unit(arrayCtor), element(_[_<-_])]

  syntax KItem ::= Array "[" Int "]" [function, hook(ARRAY.lookup)]

  syntax Array ::= Array "[" key: Int "<-" value: KItem "]" [function, hook(ARRAY.update), klabel(_[_<-_]), symbol]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function, hook(ARRAY.remove)]
  syntax Array ::= updateArray(Array, index: Int, List) [function, hook(ARRAY.updateAll)]
  syntax Array ::= fillArray(Array, index: Int, length: Int, value: KItem) [function, hook(ARRAY.fill)]

  syntax Bool ::= Int "in_keys" "(" Array ")" [function, total, hook(ARRAY.in_keys)]
endmodule


module ARRAY-IN-K [private]
  imports public ARRAY-SYNTAX
  imports private LIST
  imports private K-EQUAL
  imports private INT
  imports private BOOL

  syntax Array ::= makeArray(length: Int, value: KItem) [function, hook(ARRAY.make), public]
  syntax Array ::= arr(List, Int, KItem)

  rule makeArray(I::Int, D::KItem) => arr(.List, I, D)

  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)
  rule arr(_      , _, D::KItem) [ _        ] => D      [owise]

  syntax List ::= ensureOffsetList(List, Int, KItem) [function]
  rule ensureOffsetList(L::List, IDX::Int, D::KItem) => L makeList(IDX +Int 1 -Int size(L), D) requires         IDX >=Int size(L)
  rule ensureOffsetList(L::List, IDX::Int, _::KItem) => L                                      requires notBool IDX >=Int size(L)

  rule arr(L::List, I::Int, D::KItem) [ IDX::Int <- VAL::KItem ] => arr(ensureOffsetList(L, IDX, D) [ IDX <- VAL ], I, D)

  rule arr(L::List, I::Int, D::KItem) [ IDX::Int <- undef ] => arr(L, I, D) [ IDX <- D ]

  rule updateArray(arr(L::List, I::Int, D::KItem), IDX::Int, L2::List) => arr(updateList(ensureOffsetList(L, IDX +Int size(L2) -Int 1, D), IDX, L2), I, D)

  rule fillArray(arr(L::List, I::Int, D::KItem), IDX::Int, LEN::Int, VAL::KItem) => arr(fillList(ensureOffsetList(L, IDX +Int LEN -Int 1, D), IDX, LEN, VAL), I, D)

  rule IDX::Int in_keys(arr(_, I::Int, _)) => IDX >=Int 0 andBool IDX <Int I
endmodule


module ARRAY-SYMBOLIC [symbolic]
  imports ARRAY-IN-K
endmodule


module ARRAY-KORE [kore]
  imports ARRAY-IN-K
endmodule


module ARRAY
  imports ARRAY-SYMBOLIC
  imports ARRAY-KORE
endmodule
===
KW_MODULE
module

MODNAME
ARRAY-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
LIST

KW_SYNTAX
syntax

ID_UPPER
Array

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.Array

RPAREN
)

COMMA
,

ATTR_KEY
unit

LPAREN
(

ATTR_CONTENT
arrayCtor

RPAREN
)

COMMA
,

ATTR_KEY
element

LPAREN
(

ATTR_CONTENT
_[_<-_]

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_UPPER
Array

STRING
"["

ID_UPPER
Int

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.lookup

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_UPPER
Array

STRING
"["

ID_LOWER
key

COLON
:

ID_UPPER
Int

STRING
"<-"

ID_LOWER
value

COLON
:

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.update

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_[_<-_]

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_UPPER
Array

STRING
"["

ID_UPPER
Int

STRING
"<-"

STRING
"undef"

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.remove

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_LOWER
updateArray

LPAREN
(

ID_UPPER
Array

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

KW_LIST
List

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.updateAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_LOWER
fillArray

LPAREN
(

ID_UPPER
Array

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.fill

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Int

STRING
"in_keys"

STRING
"("

ID_UPPER
Array

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.in_keys

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ARRAY-IN-K

LBRACK
[

ATTR_KEY
private

RBRACK
]

KW_IMPORTS
imports

KW_PUBLIC
public

MODNAME
ARRAY-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
LIST

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_LOWER
makeArray

LPAREN
(

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
ARRAY.make

RPAREN
)

COMMA
,

ATTR_KEY
public

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Array

DCOLONEQ
::=

ID_LOWER
arr

LPAREN
(

KW_LIST
List

COMMA
,

ID_UPPER
Int

COMMA
,

ID_UPPER
KItem

RPAREN
)

KW_RULE
rule

BUBBLE
makeArray(I::Int, D::KItem) => arr(.List, I, D)

KW_RULE
rule

BUBBLE
arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)

KW_RULE
rule

BUBBLE
arr(_      , _, D::KItem) [ _        ] => D

LBRACK
[

ATTR_KEY
owise

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
ensureOffsetList

LPAREN
(

KW_LIST
List

COMMA
,

ID_UPPER
Int

COMMA
,

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

KW_RULE
rule

BUBBLE
ensureOffsetList(L::List, IDX::Int, D::KItem) => L makeList(IDX +Int 1 -Int size(L), D) requires         IDX >=Int size(L)

KW_RULE
rule

BUBBLE
ensureOffsetList(L::List, IDX::Int, _::KItem) => L                                      requires notBool IDX >=Int size(L)

KW_RULE
rule

BUBBLE
arr(L::List, I::Int, D::KItem) [ IDX::Int <- VAL::KItem ] => arr(ensureOffsetList(L, IDX, D) [ IDX <- VAL ], I, D)

KW_RULE
rule

BUBBLE
arr(L::List, I::Int, D::KItem) [ IDX::Int <- undef ] => arr(L, I, D) [ IDX <- D ]

KW_RULE
rule

BUBBLE
updateArray(arr(L::List, I::Int, D::KItem), IDX::Int, L2::List) => arr(updateList(ensureOffsetList(L, IDX +Int size(L2) -Int 1, D), IDX, L2), I, D)

KW_RULE
rule

BUBBLE
fillArray(arr(L::List, I::Int, D::KItem), IDX::Int, LEN::Int, VAL::KItem) => arr(fillList(ensureOffsetList(L, IDX +Int LEN -Int 1, D), IDX, LEN, VAL), I, D)

KW_RULE
rule

BUBBLE
IDX::Int in_keys(arr(_, I::Int, _)) => IDX >=Int 0 andBool IDX <Int I

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ARRAY-SYMBOLIC

LBRACK
[

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
ARRAY-IN-K

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ARRAY-KORE

LBRACK
[

ATTR_KEY
kore

RBRACK
]

KW_IMPORTS
imports

MODNAME
ARRAY-IN-K

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ARRAY

KW_IMPORTS
imports

MODNAME
ARRAY-SYMBOLIC

KW_IMPORTS
imports

MODNAME
ARRAY-KORE

KW_ENDMODULE
endmodule

EOF


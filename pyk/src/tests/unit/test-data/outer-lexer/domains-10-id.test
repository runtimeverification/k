module ID-SYNTAX-PROGRAM-PARSING
  imports BUILTIN-ID-TOKENS
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*"     [prec(1), token]
              | #LowerId                                             [token]
              | #UpperId                                             [token]
endmodule


module ID-SYNTAX
  syntax Id [token]
endmodule


module ID-COMMON
  imports ID-SYNTAX
  imports private STRING

  syntax String ::= Id2String ( Id )    [function, total, hook(STRING.token2string)]
  syntax Id ::= String2Id (String) [function, total, hook(STRING.string2token)]
  syntax Id ::= freshId(Int)    [freshGenerator, function, total, private]

  rule freshId(I:Int) => String2Id("_" +String Int2String(I))
endmodule


module ID
  imports ID-COMMON
endmodule
===
KW_MODULE
module

MODNAME
ID-SYNTAX-PROGRAM-PARSING

KW_IMPORTS
imports

MODNAME
BUILTIN-ID-TOKENS

KW_SYNTAX
syntax

ID_UPPER
Id

DCOLONEQ
::=

REGEX
r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*"

LBRACK
[

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
1

RPAREN
)

COMMA
,

ATTR_KEY
token

RBRACK
]

VBAR
|

ID_UPPER
#LowerId

LBRACK
[

ATTR_KEY
token

RBRACK
]

VBAR
|

ID_UPPER
#UpperId

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ID-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Id

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ID-COMMON

KW_IMPORTS
imports

MODNAME
ID-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
STRING

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Id2String

LPAREN
(

ID_UPPER
Id

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.token2string

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Id

DCOLONEQ
::=

ID_UPPER
String2Id

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.string2token

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Id

DCOLONEQ
::=

ID_LOWER
freshId

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
freshGenerator

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
private

RBRACK
]

KW_RULE
rule

BUBBLE
freshId(I:Int) => String2Id("_" +String Int2String(I))

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
ID

KW_IMPORTS
imports

MODNAME
ID-COMMON

KW_ENDMODULE
endmodule

EOF


module BYTES-SYNTAX
  imports private STRING-SYNTAX

  syntax Bytes [hook(BYTES.Bytes)]
  syntax Bytes ::= r"b[\\\"](([\\x20\\x21\\x23-\\x5B\\x5D-\\x7E])|([\\\\][tnfr\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2}))*[\\\"]"      [token]
endmodule


module BYTES-STRING-ENCODE [kore, symbolic]
  imports BYTES-SYNTAX
    syntax String ::= decodeBytes ( encoding: String , contents: Bytes ) [function, hook(BYTES.decodeBytes)]
    syntax Bytes ::= encodeBytes ( encoding: String , contents: String ) [function, hook(BYTES.encodeBytes)]
endmodule


module BYTES-HOOKED
  imports STRING-SYNTAX
  imports BYTES-SYNTAX
  imports BYTES-STRING-ENCODE

  syntax Bytes ::= ".Bytes" [function, total, hook(BYTES.empty)]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes), symbol]
                      | "BE" [klabel(bigEndianBytes), symbol]
  syntax Signedness ::= "Signed" [klabel(signedBytes), symbol]
                      | "Unsigned" [klabel(unsignedBytes), symbol]
  syntax Int ::= Bytes2Int(Bytes, Endianness, Signedness) [function, total, hook(BYTES.bytes2int)]
  syntax Bytes ::= Int2Bytes(length: Int, Int, Endianness) [function, total, hook(BYTES.int2bytes)]
                 | Int2Bytes(Int, Endianness, Signedness) [function, total, klabel(Int2BytesNoLen)]
  syntax String ::= Bytes2String(Bytes) [function, total, hook(BYTES.bytes2string)]
  syntax Bytes ::= String2Bytes(String) [function, total, hook(BYTES.string2bytes)]
  syntax Bytes ::= Bytes "[" index: Int "<-" value: Int "]" [function, hook(BYTES.update)]
  syntax Int ::= Bytes "[" Int "]" [function, hook(BYTES.get)]
  syntax Bytes ::= substrBytes(Bytes, startIndex: Int, endIndex: Int) [function, hook(BYTES.substr)]
  syntax Bytes ::= replaceAtBytes(dest: Bytes, index: Int, src: Bytes) [function, hook(BYTES.replaceAt)]
  syntax Bytes ::= padRightBytes(Bytes, length: Int, value: Int) [function, hook(BYTES.padRight)]
                 | padLeftBytes(Bytes, length: Int, value: Int) [function, hook(BYTES.padLeft)]
  syntax Bytes ::= reverseBytes(Bytes) [function, total, hook(BYTES.reverse)]
  syntax Int ::= lengthBytes(Bytes) [function, total, hook(BYTES.length), smtlib(lengthBytes)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function, total, hook(BYTES.concat), right]

endmodule


module BYTES-CONCRETE [concrete]
  imports BYTES-HOOKED
endmodule


module BYTES-KORE [kore]
  imports BYTES-HOOKED
  imports BYTES-SYMBOLIC-CEIL
endmodule


module BYTES-SYMBOLIC-CEIL [symbolic, kore]
  imports BYTES-HOOKED
  imports private INT
  imports private BOOL

  rule #Ceil(padRightBytes(_, LEN, VAL)) => {(0 <=Int LEN andBool 0 <=Int VAL andBool VAL <Int 256) #Equals true} [simplification]
  rule #Ceil(padLeftBytes(_, LEN, VAL))  => {(0 <=Int LEN andBool 0 <=Int VAL andBool VAL <Int 256) #Equals true} [simplification]
endmodule


module BYTES
  imports BYTES-CONCRETE
  imports BYTES-KORE
  imports private INT

  rule Int2Bytes(I::Int, E::Endianness, Unsigned) => Int2Bytes((log2Int(I) +Int 8) /Int 8, I, E)
    requires I >Int 0
  rule Int2Bytes(0, _::Endianness, _) => .Bytes
  rule Int2Bytes(I::Int, E::Endianness, Signed) => Int2Bytes((log2Int(I) +Int 9) /Int 8, I, E)
    requires I >Int 0
  rule Int2Bytes(I::Int, E::Endianness, Signed) => Int2Bytes((log2Int(~Int I) +Int 9) /Int 8, I, E)
    requires I <Int -1
  rule Int2Bytes(-1, E::Endianness, Signed) => Int2Bytes(1, -1, E)
endmodule
===
KW_MODULE
module

MODNAME
BYTES-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
STRING-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Bytes

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.Bytes

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

REGEX
r"b[\\\"](([\\x20\\x21\\x23-\\x5B\\x5D-\\x7E])|([\\\\][tnfr\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2}))*[\\\"]"

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES-STRING-ENCODE

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
BYTES-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
decodeBytes

LPAREN
(

ID_LOWER
encoding

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
contents

COLON
:

ID_UPPER
Bytes

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.decodeBytes

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_LOWER
encodeBytes

LPAREN
(

ID_LOWER
encoding

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
contents

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.encodeBytes

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES-HOOKED

KW_IMPORTS
imports

MODNAME
STRING-SYNTAX

KW_IMPORTS
imports

MODNAME
BYTES-SYNTAX

KW_IMPORTS
imports

MODNAME
BYTES-STRING-ENCODE

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

STRING
".Bytes"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.empty

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Endianness

DCOLONEQ
::=

STRING
"LE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
littleEndianBytes

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"BE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
bigEndianBytes

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Signedness

DCOLONEQ
::=

STRING
"Signed"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
signedBytes

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"Unsigned"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
unsignedBytes

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
Bytes2Int

LPAREN
(

ID_UPPER
Bytes

COMMA
,

ID_UPPER
Endianness

COMMA
,

ID_UPPER
Signedness

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.bytes2int

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_UPPER
Int2Bytes

LPAREN
(

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_UPPER
Int

COMMA
,

ID_UPPER
Endianness

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.int2bytes

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int2Bytes

LPAREN
(

ID_UPPER
Int

COMMA
,

ID_UPPER
Endianness

COMMA
,

ID_UPPER
Signedness

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Int2BytesNoLen

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Bytes2String

LPAREN
(

ID_UPPER
Bytes

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.bytes2string

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_UPPER
String2Bytes

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.string2bytes

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_UPPER
Bytes

STRING
"["

ID_LOWER
index

COLON
:

ID_UPPER
Int

STRING
"<-"

ID_LOWER
value

COLON
:

ID_UPPER
Int

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.update

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
Bytes

STRING
"["

ID_UPPER
Int

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.get

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_LOWER
substrBytes

LPAREN
(

ID_UPPER
Bytes

COMMA
,

ID_LOWER
startIndex

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
endIndex

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.substr

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_LOWER
replaceAtBytes

LPAREN
(

ID_LOWER
dest

COLON
:

ID_UPPER
Bytes

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
src

COLON
:

ID_UPPER
Bytes

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.replaceAt

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_LOWER
padRightBytes

LPAREN
(

ID_UPPER
Bytes

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.padRight

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
padLeftBytes

LPAREN
(

ID_UPPER
Bytes

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.padLeft

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_LOWER
reverseBytes

LPAREN
(

ID_UPPER
Bytes

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.reverse

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
lengthBytes

LPAREN
(

ID_UPPER
Bytes

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.length

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
lengthBytes

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bytes

DCOLONEQ
::=

ID_UPPER
Bytes

STRING
"+Bytes"

ID_UPPER
Bytes

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BYTES.concat

RPAREN
)

COMMA
,

ATTR_KEY
right

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES-CONCRETE

LBRACK
[

ATTR_KEY
concrete

RBRACK
]

KW_IMPORTS
imports

MODNAME
BYTES-HOOKED

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES-KORE

LBRACK
[

ATTR_KEY
kore

RBRACK
]

KW_IMPORTS
imports

MODNAME
BYTES-HOOKED

KW_IMPORTS
imports

MODNAME
BYTES-SYMBOLIC-CEIL

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES-SYMBOLIC-CEIL

LBRACK
[

ATTR_KEY
symbolic

COMMA
,

ATTR_KEY
kore

RBRACK
]

KW_IMPORTS
imports

MODNAME
BYTES-HOOKED

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
#Ceil(padRightBytes(_, LEN, VAL)) => {(0 <=Int LEN andBool 0 <=Int VAL andBool VAL <Int 256) #Equals true}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
#Ceil(padLeftBytes(_, LEN, VAL))  => {(0 <=Int LEN andBool 0 <=Int VAL andBool VAL <Int 256) #Equals true}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BYTES

KW_IMPORTS
imports

MODNAME
BYTES-CONCRETE

KW_IMPORTS
imports

MODNAME
BYTES-KORE

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_RULE
rule

BUBBLE
Int2Bytes(I::Int, E::Endianness, Unsigned) => Int2Bytes((log2Int(I) +Int 8) /Int 8, I, E)
    requires I >Int 0

KW_RULE
rule

BUBBLE
Int2Bytes(0, _::Endianness, _) => .Bytes

KW_RULE
rule

BUBBLE
Int2Bytes(I::Int, E::Endianness, Signed) => Int2Bytes((log2Int(I) +Int 9) /Int 8, I, E)
    requires I >Int 0

KW_RULE
rule

BUBBLE
Int2Bytes(I::Int, E::Endianness, Signed) => Int2Bytes((log2Int(~Int I) +Int 9) /Int 8, I, E)
    requires I <Int -1

KW_RULE
rule

BUBBLE
Int2Bytes(-1, E::Endianness, Signed) => Int2Bytes(1, -1, E)

KW_ENDMODULE
endmodule

EOF


// Copyright (c) K Team. All Rights Reserved.

package org.kframework.backend.java.symbolic;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.ListMultimap;
import com.google.common.collect.Multiset;
import com.google.common.collect.Multisets;
import com.google.common.collect.Sets;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.commons.lang3.tuple.Triple;
import org.kframework.attributes.Att;
import org.kframework.backend.java.builtins.BoolToken;
import org.kframework.backend.java.compile.KOREtoBackendKIL;
import org.kframework.backend.java.kil.Bottom;
import org.kframework.backend.java.kil.BuiltinList;
import org.kframework.backend.java.kil.BuiltinMap;
import org.kframework.backend.java.kil.BuiltinSet;
import org.kframework.backend.java.kil.ConstrainedTerm;
import org.kframework.backend.java.kil.Definition;
import org.kframework.backend.java.kil.GlobalContext;
import org.kframework.backend.java.kil.InnerRHSRewrite;
import org.kframework.backend.java.kil.KItem;
import org.kframework.backend.java.kil.KLabelConstant;
import org.kframework.backend.java.kil.KList;
import org.kframework.backend.java.kil.LocalRewriteTerm;
import org.kframework.backend.java.kil.Rule;
import org.kframework.backend.java.kil.RuleAutomatonDisjunction;
import org.kframework.backend.java.kil.Term;
import org.kframework.backend.java.kil.TermContext;
import org.kframework.backend.java.kil.Token;
import org.kframework.backend.java.kil.Variable;
import org.kframework.backend.java.util.FormulaContext;
import org.kframework.backend.java.util.StateLog;
import org.kframework.backend.java.utils.BitSet;
import org.kframework.builtin.KLabels;
import org.kframework.kore.KApply;
import org.kframework.utils.errorsystem.KEMException;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Collectors;

import static org.kframework.Collections.*;

/**
 * A very fast interpreted matching implementation based on merging the rules into a decision-tree like structure.
 * All possible matches are computed in one matching step. The merged term is obtained by putting a Matching Logic
 * disjunction between the bodies of all rules, and then pushing the disjunction down into the term by identifying
 * common structure. Information about the originating rule is retained via a predicate attached to each element of the
 * disjunction.
 */
public class FastRuleMatcher {

    private final Definition definition;
    private ConjunctiveFormula[] constraints;
    private final int ruleCount;
    private BitSet ruleMask;

    private BitSet empty;

    private final GlobalContext global;

    private boolean patternFold = false;
    private boolean partialSimplification = false;
    /**
     * True if the incremental constraints generated by this matcher should be always kept in simplified form.
     */
    private boolean continuousSimplification = true;
    private TermContext context;

    public static ConjunctiveFormula unify(Term term, Term otherTerm, TermContext context) {
        return new FastRuleMatcher(context.global(), 1).unifyEquality(term, otherTerm, false, false, true, context, false);
    }

    public static List<Substitution<Variable, Term>> match(Term subject, Term pattern, TermContext context) {
        return new FastRuleMatcher(context.global(), 1).matchSinglePattern(subject, pattern, context);
    }

    public FastRuleMatcher(GlobalContext global) {
        this(global, global.getDefinition().ruleTable.size());
    }

    public FastRuleMatcher(GlobalContext global, int ruleCount) {
        this(global, ruleCount, global.getDefinition());
    }

    public FastRuleMatcher(GlobalContext global, int ruleCount, Definition definition) {
        this.global = global;
        this.ruleCount = ruleCount;
        this.definition = definition;
        constraints = new ConjunctiveFormula[this.ruleCount];
        ruleMask = makeAllRuleBits(ruleCount);
    }

    static BitSet makeAllRuleBits(int size) {
        BitSet result = BitSet.apply(size);
        result.makeOnes(size);
        return result;
    }

    /**
     * Unifies the subject against the possibly-merged pattern.
     *
     * @return a list of constraints tagged with the Integer identifier of the rule they belong to and
     * with a Boolean which is true if the rule matched.
     */
    public List<RuleMatchResult> matchRulePattern(
            ConstrainedTerm subject,
            boolean narrowing,
            boolean computeOne,
            List<String> transitions,
            boolean proveFlag,
            TermContext context, int step) {
        if (global.javaExecutionOptions.logRulesPublic) {
            System.err.format("\nRegular rule automaton phase, step %d\n" +
                    "==========================================\n", step);
        }
        Rule automaton = definition.mainAutomaton();
        List<Pair<Rule, Integer>> automatonMatchedRules = matchWithAutomaton(subject, automaton);

        if (global.javaExecutionOptions.logRulesPublic) {
            System.err.format("\nRegular rule application, rules matched by automaton: %d\n" +
                    "------------------------------------------\n", automatonMatchedRules.size());
        }
        List<RuleMatchResult> structuralResults = new ArrayList<>();
        List<RuleMatchResult> transitionResults = new ArrayList<>();
        for (Pair<Rule, Integer> match : automatonMatchedRules) {
            Rule rule = match.getLeft();
            int i = match.getRight();
            // skip over IO rules when in prove rules
            if (proveFlag && rule.att().contains("stream")) {
                continue;
            }
            if (global.javaExecutionOptions.logRulesPublic) {
                System.err.format("\nRegular rule: attempting to match: %s %s\n-------------------------\n",
                        rule.getSource(), rule.getLocation());
            }

            // TODO(YilongL): remove TermContext from the signature once
            // ConstrainedTerm doesn't hold a TermContext anymore
            /* TODO(AndreiS): remove this hack for super strictness after strategies work */
            ConjunctiveFormula patternConstraint = ConjunctiveFormula.of(rule.lookups());
            if (!computeOne && rule.att().contains(Att.COOL()) && transitions.stream().anyMatch(rule.att()::contains)) {
                patternConstraint = patternConstraint.addAll(rule.requires().stream().filter(t -> !t.att().contains(Att.TRANSITION())).collect(Collectors.toList()));
            } else {
                patternConstraint = patternConstraint.addAll(rule.requires());
            }
            FormulaContext formulaContext = new FormulaContext(FormulaContext.Kind.RegularRule, rule, context.global());
            global.stateLog.log(StateLog.LogEvent.RULEATTEMPT, rule.toKRewrite(), subject.term(), subject.constraint());
            List<Triple<ConjunctiveFormula, Boolean, Map<scala.collection.immutable.List<Pair<Integer, Integer>>, Term>>> ruleResults = ConstrainedTerm.evaluateConstraints(
                    constraints[i],
                    subject.constraint(),
                    patternConstraint,
                    Sets.union(getLeftHandSide(automaton.leftHandSide(), i).variableSet(), patternConstraint.variableSet()).stream()
                            .filter(v -> !v.name().equals(KOREtoBackendKIL.THE_VARIABLE))
                            .collect(Collectors.toSet()),
                    context, formulaContext);
            for (Triple<ConjunctiveFormula, Boolean, Map<scala.collection.immutable.List<Pair<Integer, Integer>>, Term>> triple : ruleResults) {
                RuleMatchResult result = new RuleMatchResult(triple.getLeft(), triple.getMiddle(), triple.getRight(), i);
                if (transitions.stream().anyMatch(rule.att()::contains)) {
                    transitionResults.add(result);
                } else {
                    structuralResults.add(result);
                }
            }
            if (global.javaExecutionOptions.logRulesPublic) {
                if (ruleResults.isEmpty()) {
                    System.err.format("\nRegular rule: matching failed %s %s\n", rule.getSource(), rule.getLocation());
                } else {
                    System.err.format("\nRegular rule: matching successful(%d times), %s %s\n",
                            ruleResults.size(), rule.getSource(), rule.getLocation());
                }
            }
        }

        if (!structuralResults.isEmpty()) {
            return narrowing ? structuralResults : structuralResults.subList(0, 1);
        } else if (computeOne && !transitionResults.isEmpty()) {
            return transitionResults.subList(0, 1);
        } else {
            return transitionResults;
        }
    }

    /**
     * @return rules matching the subject
     */
    public List<Pair<Rule, Integer>> matchWithAutomaton(ConstrainedTerm subject, Rule automaton) {
        ruleMask.stream().forEach(i -> constraints[i] = ConjunctiveFormula.of(subject.termContext().global()));
        empty = BitSet.apply(ruleCount);
        BitSet matchingRuleBits =
                matchAndLog(subject.term(), automaton.leftHandSide(), ruleMask, List(), false);

        List<Pair<Rule, Integer>> result = new ArrayList<>();
        for (int i = matchingRuleBits.nextSetBit(0); i >= 0; i = matchingRuleBits.nextSetBit(i + 1)) {
            result.add(new ImmutablePair<>(definition.ruleTable.get(i), i));
        }
        return result;
    }

    public static class RuleMatchResult {
        public final ConjunctiveFormula constraint;
        public final boolean isMatching;
        /**
         * Stores the inner rewrites of a K rule as a map from paths in the subject to the terms in the right-hand-sides
         * of the inner rewrites. The path is a list of pairs of integers as opposed to a list of integers because
         * for associative operators the rule may substitute an interval of elements rather then only one element.
         */
        public final Map<scala.collection.immutable.List<Pair<Integer, Integer>>, Term> rewrites;
        public final int ruleIndex;

        private RuleMatchResult(
                ConjunctiveFormula constraint,
                boolean isMatching,
                Map<scala.collection.immutable.List<Pair<Integer, Integer>>, Term> rewrites,
                int ruleIndex) {
            this.constraint = constraint;
            this.isMatching = isMatching;
            this.rewrites = rewrites;
            this.ruleIndex = ruleIndex;
        }
    }

    /**
     * Matches the subject against the pattern. The pattern does not contain any disjunctions.
     */
    public ConjunctiveFormula unifyEquality(Term subject, Term pattern, boolean patternFold, boolean partialSimplification, boolean continuousSimplification, TermContext context, boolean logFailures) {
        this.patternFold = patternFold;
        this.partialSimplification = partialSimplification;
        this.continuousSimplification = continuousSimplification;
        this.context = context;
        constraints[0] = ConjunctiveFormula.of(global);
        empty = BitSet.apply(ruleCount);
        BitSet one = BitSet.apply(1);
        one.makeOnes(1);
        BitSet theMatchingRules = matchAndLog(subject, pattern, one, List(), logFailures);
        if (theMatchingRules.get(0)) {
            return constraints[0];
        } else {
            return ConjunctiveFormula.of(global).add(unificationFailureLeftHandSide, unificationFailureRightHandSide).simplify();
        }
    }

    /**
     * Matches the subject against the pattern. The pattern does not contain any disjunctions.
     */
    public List<Substitution<Variable, Term>> matchSinglePattern(Term subject, Term pattern, TermContext context) {
        constraints[0] = ConjunctiveFormula.of(global);
        empty = BitSet.apply(ruleCount);
        BitSet one = BitSet.apply(1);
        one.makeOnes(1);
        BitSet theMatchingRules = matchAndLog(subject, pattern, one, List(), false);
        if (theMatchingRules.get(0)) {
            return constraints[0].getDisjunctiveNormalForm().conjunctions().stream()
                    .map(c -> c.simplify(context))
                    .filter(c -> !c.isFalse())
                    .map(c -> c.orientSubstitution(pattern.variableSet()))
                    .filter(c -> c.isMatching(pattern.variableSet()))
                    .map(c -> c.substitution())
                    .collect(Collectors.toList());
        } else {
            return Collections.emptyList();
        }
    }

    /**
     * If (1) match fails (2) --log-basic or above is provided and (3) logFailures == true,
     * print a warning message with expected and actual term. Helps debugging spec issues related to final implication.
     * <p>
     * If exception is thrown during matching, print the warning message regardless of logFailures value.
     */
    private BitSet matchAndLog(Term subject, Term pattern, BitSet ruleMask,
                               scala.collection.immutable.List<Pair<Integer, Integer>> path,
                               boolean logFailures) {
        BitSet result;
        try {
            result = match(subject, pattern, ruleMask, path, logFailures);
        } catch (KEMException e) {
            addDetailedStackFrame(e, subject, pattern);
            throw e;
            // DISABLE EXCEPTION CHECKSTYLE
        } catch (RuntimeException | AssertionError | StackOverflowError e) {
            // ENABLE EXCEPTION CHECKSTYLE
            KEMException newExc = KEMException.criticalError("", e);
            addDetailedStackFrame(newExc, subject, pattern);
            throw newExc;
        }

        if (logFailures && global.javaExecutionOptions.logBasic && result.isEmpty()) {
            System.err.format("\nFinal implication term not matching\nActual:\n%s\nExpected:\n%s\n",
                    getLogString(subject), getLogString(pattern));
        }
        return result;
    }

    private void addDetailedStackFrame(KEMException e, Term subject, Term pattern) {
        e.exception.formatTraceFrame("while matching rule pattern:\n    Subject: %s\n    Pattern: %s",
                getLogString(subject), getLogString(pattern));
    }

    private String getLogString(Term subject) {
        final long lengthThreshold = 10000;
        String subjectStr = subject.toString();
        subjectStr = subjectStr.substring(0, (int) Math.min(subjectStr.length(), lengthThreshold));
        if (subjectStr.length() == lengthThreshold) {
            subjectStr += "...";
        }
        return subjectStr;
    }

    private BitSet match(Term subject, Term pattern, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path,
                         boolean logFailures) {
        assert !ruleMask.isEmpty();

        // if the pattern is a variable, try to add its binding to the current solution
        if (pattern instanceof Variable) {
            return addSubstitution((Variable) pattern, subject, ruleMask);
        }

        if (subject.isSymbolic()) {
            return addUnification(subject, pattern, ruleMask, path);
        }

        if (pattern instanceof RuleAutomatonDisjunction) {
            RuleAutomatonDisjunction automatonDisjunction = (RuleAutomatonDisjunction) pattern;
            BitSet returnSet = BitSet.apply(ruleCount);

            // handle variables in the disjunction
            List<Pair<Variable, BitSet>> pairs = automatonDisjunction.getVariablesForSort(subject.sort());
            for (Pair<Variable, BitSet> p : pairs) {
                if (ruleMask.intersects(p.getRight())) {
                    BitSet localRuleMask = ruleMask.clone();
                    localRuleMask.and(p.getRight());
                    returnSet.or(addSubstitution(p.getLeft(), subject, localRuleMask));
                }
            }

            // handle associative constructs with identity
            for (Pair<BuiltinList, BitSet> p : automatonDisjunction.assocDisjunctionArray[subject.sort().ordinal()]) {
                matchInside(subject, ruleMask, path, returnSet, p, logFailures);
            }

            if (subject instanceof KItem) {
                // main match of KItem
                matchInside(subject, ruleMask, path, returnSet, automatonDisjunction.getKItemPatternForKLabel((KLabelConstant) ((KItem) subject).kLabel()), logFailures);
                checkVarLabelPatterns(subject, ruleMask, path, automatonDisjunction, returnSet);
            } else if (subject instanceof Token) {
                // and matching Tokens
                BitSet rules = automatonDisjunction.tokenDisjunctions.get(subject);
                if (rules != null) {
                    BitSet localRuleMask = ruleMask.clone();
                    localRuleMask.and(rules);
                    returnSet.or(localRuleMask);
                }
            }

            return returnSet;
        }

        // register the RHS of the rewrite we have just encountered, and continue matching on its LHS
        if (pattern instanceof KItem && KLabels.KREWRITE.equals(((KItem) pattern).kLabel())) {
            KApply rw = (KApply) pattern;
            InnerRHSRewrite innerRHSRewrite = (InnerRHSRewrite) rw.klist().items().get(1);
            BitSet theNewMask = matchAndLog(subject, (Term) rw.klist().items().get(0), ruleMask, path, logFailures);

            for (int i = theNewMask.nextSetBit(0); i >= 0; i = theNewMask.nextSetBit(i + 1)) {
                if (i < innerRHSRewrite.theRHS.length) {
                    if (innerRHSRewrite.theRHS[i] != null) {
                        constraints[i] = constraints[i]
                                .add(new LocalRewriteTerm(path.reverse(), innerRHSRewrite.theRHS[i]), BoolToken.TRUE);
                    }
                } else {
                    //rule index i is not handled by this automaton.
                    theNewMask.clear(i);
                }
            }
            return theNewMask;
        }

        if (pattern.isSymbolic()) {
            return addUnification(subject, pattern, ruleMask, path);
        }

        // normalize associative representations
        if (subject instanceof BuiltinList && !(pattern instanceof BuiltinList)) {
            pattern = ((BuiltinList) subject).upElementToList(pattern);
        } else if (pattern instanceof BuiltinList && !(subject instanceof BuiltinList)) {
            subject = ((BuiltinList) pattern).upElementToList(subject);
        }

        if (subject instanceof KItem && pattern instanceof KItem) {
            KLabelConstant subjectKLabel = (KLabelConstant) ((KItem) subject).kLabel();
            KLabelConstant patternKLabel = (KLabelConstant) ((KItem) pattern).klabel();
            if (!subjectKLabel.name().equals(patternKLabel.name())) { // subjectKLabel != patternKLabel
                return empty;
            }

            KList subjectKList = (KList) ((KItem) subject).kList();
            KList patternKList = (KList) ((KItem) pattern).kList();
            int size = subjectKList.size();

            if (size != patternKList.size()) {
                return empty;
            }

            // main loop matching the klist
            for (int i = 0; i < size; ++i) {
                BitSet childrenDontCareRuleMaskForPosition = ((KItem) pattern).getChildrenDontCareRuleMaskForPosition(i);
                // continue if the pattern under this position only contains "don't care" variables
                if (childrenDontCareRuleMaskForPosition != null && ruleMask.subset(childrenDontCareRuleMaskForPosition)) {
                    continue;
                }

                ruleMask = matchAndLog(subjectKList.get(i), patternKList.get(i), ruleMask, path.$colon$colon(Pair.of(i, i + 1)), logFailures);
                if (ruleMask.isEmpty()) {
                    return ruleMask;
                }
            }

            return ruleMask;
        } else if (subject instanceof BuiltinList && pattern instanceof BuiltinList) {
            return matchAssoc((BuiltinList) subject, 0, (BuiltinList) pattern, 0, ruleMask, path,
                    logFailures);
        } else if (subject instanceof BuiltinMap && pattern instanceof BuiltinMap) {
            return unifyMapModuloPatternFolding((BuiltinMap) subject, (BuiltinMap) pattern, ruleMask, path,
                    logFailures);
        } else if (subject instanceof Token && pattern instanceof Token) {
            // TODO: make tokens unique?
            if (subject.equals(pattern)) {
                return ruleMask;
            } else {
                return empty;
            }
        } else if (subject instanceof BuiltinSet && pattern instanceof BuiltinSet) {
            return unifySet((BuiltinSet) subject, (BuiltinSet) pattern, ruleMask, path);
        } else {
            assert subject instanceof KItem || subject instanceof BuiltinList || subject instanceof Token ||
                    subject instanceof BuiltinMap : "unexpected subject class at matching: " + subject.getClass();
            assert pattern instanceof KItem || pattern instanceof BuiltinList || pattern instanceof Token :
                    "unexpected pattern class at matching: " + pattern.getClass();
            return empty;
        }
    }

    private void checkVarLabelPatterns(Term subject, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path, RuleAutomatonDisjunction automatonDisjunction, BitSet returnSet) {
        List<Pair<KItem, BitSet>> varLabelPatterns = automatonDisjunction.getKItemPatternByArity(((KItem) subject).klist().size());
        if (!(varLabelPatterns == null)) {
            for (Pair<KItem, BitSet> p : varLabelPatterns) {
                matchInside(subject, ruleMask, path, returnSet, p, false);
            }
        }
    }

    private void matchInside(Term subject, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path, BitSet returnSet, Pair<? extends Term, BitSet> pSeq, boolean logFailures) {
        if (pSeq != null) {
            if (ruleMask.intersects(pSeq.getRight())) {
                BitSet localRuleMaskSeq = ((BitSet) ruleMask.clone());
                localRuleMaskSeq.and(pSeq.getRight());
                localRuleMaskSeq = matchAndLog(subject, pSeq.getLeft(), localRuleMaskSeq, path, logFailures);
                returnSet.or(localRuleMaskSeq);
            }
        }
    }

    /**
     * Implements associative matching. The current implementation has the following limitations:
     * * assoc operation signature only of the form "s * s -> s"
     * * only one assoc operation per sort
     * * klabel variables only stand for non-assoc klabels
     * * no klist variables
     */
    private BitSet matchAssoc(BuiltinList subject, int subjectIndex, BuiltinList pattern, int patternIndex, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path, boolean logFailures) {
        assert subject.sort.equals(pattern.sort);

        /* match prefix of elements in subject and pattern */
        if (subjectIndex == subject.size() && patternIndex == pattern.size()) {
            /* end of matching */
            return ruleMask;
        }

        if (patternIndex == pattern.size()) {
            // fail
            return empty;
        }

        BuiltinList.ElementTailSplit patternElementTailSplit = pattern.splitElementTail(patternIndex, ruleCount);

        /* if the subject is not a list consisting only of elements, then the current algorithm removes a equal number
        of elements from the head of both the subject and the pattern, and creates an equality between the remaining
        tail of the subject and the pattern */
        if (subjectIndex < subject.size() && !subject.isElement(subjectIndex) && !ruleMask.subset(patternElementTailSplit.tailMask)) {
            return addUnification(
                    subject.range(subjectIndex, subject.size()),
                    pattern.range(patternIndex, pattern.size()),
                    ruleMask,
                    subject instanceof BuiltinList.SingletonBuiltinList ? path : path.$colon$colon(Pair.of(subjectIndex, subject.size())));
        }

        if (ruleMask.subset(patternElementTailSplit.combinedMask)) {
            BitSet elementMask;
            if (subjectIndex == subject.size()) {
                // fail
                elementMask = empty;
            } else {
                assert subjectIndex < subject.size();
                elementMask = patternElementTailSplit.elementMask.clone();
                elementMask.and(ruleMask);
                if (!elementMask.isEmpty()) {
                    elementMask = matchAndLog(subject.get(subjectIndex), patternElementTailSplit.element, elementMask, subject instanceof BuiltinList.SingletonBuiltinList ? path : path.$colon$colon(Pair.of(subjectIndex, subjectIndex + 1)), logFailures);
                    if (!elementMask.isEmpty()) {
                        elementMask = matchAssoc(subject, subjectIndex + 1, pattern, patternIndex + 1, elementMask, path, logFailures);
                    }
                }
            }

            BitSet tailMask = patternElementTailSplit.tailMask.clone();
            tailMask.and(ruleMask);
            if (!tailMask.isEmpty()) {
                tailMask = matchAndLog(subject.range(subjectIndex, subject.size()), patternElementTailSplit.tail, tailMask, path.$colon$colon(Pair.of(subjectIndex, subject.size())), logFailures);
            }

            BitSet resultSet = elementMask.clone();
            resultSet.or(tailMask);
            return resultSet;
        }

        if (!subject.isConcreteCollection()) {
            return addUnification(
                    subject.range(subjectIndex, subject.size()),
                    pattern.range(patternIndex, pattern.size()),
                    ruleMask,
                    subject instanceof BuiltinList.SingletonBuiltinList ? path : path.$colon$colon(Pair.of(subjectIndex, subject.size())));
        }

        ListMultimap<Integer, ConjunctiveFormula> nestedConstraints = ArrayListMultimap.create();
        for (int i = subjectIndex; i <= subject.size(); i++) {
            ConjunctiveFormula[] oldConstraints = constraints;
            constraints = new ConjunctiveFormula[constraints.length];
            ruleMask.stream().forEach(j -> constraints[j] = ConjunctiveFormula.of(global));
            BitSet oldRuleMask = ruleMask;
            ruleMask = oldRuleMask.clone();

            /* the path indices for the subject.range list may become inaccurate later on;
            this can only happen when the pattern contains a rewrite with a list pattern in the LHS,
            which means there are no deep-nested rewrites,
            which in turn means the inaccurate paths will never be used */
            ruleMask = matchAndLog(subject.range(subjectIndex, i), pattern.get(patternIndex), ruleMask, subject instanceof BuiltinList.SingletonBuiltinList ? path : path.$colon$colon(Pair.of(subjectIndex, i)), logFailures);

            if (!ruleMask.isEmpty()) {
                ruleMask = matchAssoc(subject, i, pattern, patternIndex + 1, ruleMask, path, logFailures);

                ruleMask.stream().forEach(j -> {
                    if (!constraints[j].isFalse()) {
                        nestedConstraints.put(j, constraints[j]);
                    }
                });
            }

            constraints = oldConstraints;
            ruleMask = oldRuleMask;
        }

        ruleMask = BitSet.apply(ruleCount);
        for (Map.Entry<Integer, Collection<ConjunctiveFormula>> entry : nestedConstraints.asMap().entrySet()) {
            int i = entry.getKey();
            Collection<ConjunctiveFormula> conjunctions = entry.getValue();
            if (conjunctions.size() != 1) {
                constraints[i] = constraints[i].add(new DisjunctiveFormula(conjunctions, global));
            } else {
                constraints[i] = constraints[i].add(conjunctions.iterator().next());
                if (continuousSimplification) {
                    constraints[i] = constraints[i].simplify();
                }
            }
            if (!constraints[i].isFalse()) {
                ruleMask.set(i);
            }
        }

        return ruleMask;
    }


    private BitSet addSubstitution(Variable variable, Term term, BitSet ruleMask) {
        if (variable.name().equals(KOREtoBackendKIL.THE_VARIABLE)) {
            return ruleMask;
        }

        if (variable.equals(term)) {
            return ruleMask;
        }

        if (!definition.subsorts().isSubsortedEq(variable.sort(), term.sort())) {
            return empty;
        }

        for (int i = ruleMask.nextSetBit(0); i >= 0; i = ruleMask.nextSetBit(i + 1)) {
            constraints[i] = constraints[i].add(variable, term);
            if (continuousSimplification) {
                constraints[i] = constraints[i].simplify();
            }
            if (constraints[i].isFalse()) {
                ruleMask.clear(i);
            }
        }

        return ruleMask;
    }

    private BitSet addUnification(Term subject, Term pattern, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path) {
        for (int i = ruleMask.nextSetBit(0); i >= 0; i = ruleMask.nextSetBit(i + 1)) {
            Term leftHandSide = getLeftHandSide(pattern, i);
            Term rightHandSide = getRightHandSide(pattern, i);
            if (leftHandSide instanceof Variable
                    && ((Variable) leftHandSide).name().equals(KOREtoBackendKIL.THE_VARIABLE)) {
                continue;
            }

            constraints[i] = constraints[i].add(subject, leftHandSide);
            if (continuousSimplification) {
                constraints[i] = constraints[i].simplify();
            }
            if (constraints[i].isFalse()) {
                ruleMask.clear(i);
                continue;
            }

            if (rightHandSide != null) {
                constraints[i] = constraints[i].add(new LocalRewriteTerm(path.reverse(), rightHandSide), BoolToken.TRUE);
            }
        }

        return ruleMask;
    }

    private Term getLeftHandSide(Term pattern, int i) {
        return (Term) pattern.accept(new CopyOnWriteTransformer(null) {
            @Override
            public Term transform(RuleAutomatonDisjunction ruleAutomatonDisjunction) {
                return (Term) ruleAutomatonDisjunction.disjunctions().stream()
                        .filter(p -> p.getRight().get(i))
                        .map(Pair::getLeft)
                        //If automaton doesn't include this rule, return BOTTOM, that will remove this rule from BitSet.
                        .findAny().orElse(Bottom.BOTTOM)
                        .accept(this);
            }

            @Override
            public Term transform(KItem kItem) {
                if (!KLabels.KREWRITE.equals(kItem.kLabel())) {
                    return (Term) super.transform(kItem);
                }

                return (Term) ((Term) kItem.klist().items().get(0)).accept(this);
            }
        });
    }

    private Term getRightHandSide(Term pattern, int i) {
        boolean[] hasRewrite = {false};
        Term result = (Term) pattern.accept(new CopyOnWriteTransformer(null) {
            @Override
            public Term transform(RuleAutomatonDisjunction ruleAutomatonDisjunction) {
                return (Term) ruleAutomatonDisjunction.disjunctions().stream()
                        .filter(p -> p.getRight().get(i))
                        .map(Pair::getLeft)
                        //If automaton doesn't include this rule, return BOTTOM, that will remove this rule from BitSet.
                        .findAny().orElse(Bottom.BOTTOM)
                        .accept(this);
            }

            @Override
            public Term transform(KItem kItem) {
                if (!KLabels.KREWRITE.equals(kItem.kLabel())) {
                    return (Term) super.transform(kItem);
                }

                Term rhs = ((InnerRHSRewrite) kItem.klist().items().get(1)).theRHS[i];
                if (rhs == null) {
                    return (Term) ((Term) kItem.klist().items().get(0)).accept(this);
                }

                hasRewrite[0] = true;
                return rhs;
            }
        });
        return hasRewrite[0] ? result : null;
    }

    /**
     * Unify maps modulo the rules defining recursive patterns. When these rules are oriented from right to left, they become non-deterministic.
     * This method explores all the possible ways of applying these rules.
     */
    private BitSet unifyMapModuloPatternFolding(BuiltinMap map, BuiltinMap otherMap, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path, boolean logFailures) {
        if (!patternFold) {
            return unifyMap(map, otherMap, ruleMask, path, logFailures);
        }

        Set<BuiltinMap> foldedMaps = Sets.newLinkedHashSet();
        foldedMaps.add(map);
        Queue<BuiltinMap> queue = new LinkedList<>();
        queue.add(map);
        while (!queue.isEmpty()) {
            BuiltinMap candidate = queue.remove();
            for (Rule rule : definition.patternFoldingRules()) {
                for (Substitution<Variable, Term> substitution : PatternMatcher.match(candidate, rule, context,
                        "unifyMap", 1)) {
                    BuiltinMap result = (BuiltinMap) rule.rightHandSide().substituteAndEvaluate(substitution, context);
                    if (foldedMaps.add(result)) {
                        queue.add(result);

                        ConjunctiveFormula resultConstraint = FastRuleMatcher.unify(result, otherMap, context).simplify();
                        if (resultConstraint.isFalse()) {
                            continue;
                        }

                        /* since here we have a non-deterministic choice to make, we only make
                         * a choice if it eliminates all map equalities */
                        if (!resultConstraint.hasMapEqualities()) {
                            constraints[0] = constraints[0].add(resultConstraint);
                            if (continuousSimplification) {
                                constraints[0] = constraints[0].simplify();
                            }
                            return ruleMask;
                        }
                    }
                }
            }
        }

        /* no folding occurred */
        if (foldedMaps.size() == 1) {
            return unifyMap(map, otherMap, ruleMask, path, logFailures);
        }

        /* made no progress */
        return addUnification(map, otherMap, ruleMask, path);
    }

    private BitSet unifyMap(BuiltinMap map, BuiltinMap otherMap, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path, boolean logFailures) {
        if (!(map.collectionFunctions().isEmpty() && otherMap.collectionFunctions().isEmpty())) {
            String mapErrorString = "Unevaluated function symbols in Map unification problem between:\n"
                                  + "\n"
                                  + "    " + map.toString() + "\n"
                                  + "\n"
                                  + "and:\n"
                                  + "\n"
                                  + "    " + otherMap.toString() + "\n";
            throw KEMException.criticalError(mapErrorString);
        }

        Map<Term, Term> entries = map.getEntries();
        Map<Term, Term> otherEntries = otherMap.getEntries();
        Set<Term> commonKeys = Sets.intersection(map.getEntries().keySet(), otherEntries.keySet());
        Map<Term, Term> remainingEntries = new HashMap<>();
        Map<Term, Term> otherRemainingEntries = new HashMap<>();
        for (Term key : commonKeys) {
            ruleMask = matchAndLog(entries.get(key), otherEntries.get(key), ruleMask, path, logFailures);
            if (ruleMask.isEmpty()) {
                return ruleMask;
            }
        }
        for (Term key : entries.keySet()) {
            if (!commonKeys.contains(key)) {
                remainingEntries.put(key, entries.get(key));
            }
        }
        for (Term key : otherEntries.keySet()) {
            if (!commonKeys.contains(key)) {
                otherRemainingEntries.put(key, otherEntries.get(key));
            }
        }

        Multiset<KItem> patterns = map.collectionPatterns();
        Multiset<KItem> otherPatterns = otherMap.collectionPatterns();
        Set<KItem> unifiedPatterns = new HashSet<>();
        Set<KItem> otherUnifiedPatterns = new HashSet<>();
        List<KItem> remainingPatterns = new ArrayList<>();
        List<KItem> otherRemainingPatterns = new ArrayList<>();
        for (KItem pattern : patterns) {
            for (KItem otherPattern : otherPatterns) {
                if (pattern.kLabel().equals(otherPattern.kLabel())
                        && pattern.getPatternInput().equals(otherPattern.getPatternInput())) {
                    List<Term> patternOutput = pattern.getPatternOutput();
                    List<Term> otherPatternOutput = otherPattern.getPatternOutput();
                    for (int i = 0; i < patternOutput.size(); ++i) {
                        matchAndLog(patternOutput.get(i), otherPatternOutput.get(i), ruleMask, path, logFailures);
                    }
                    unifiedPatterns.add(pattern);
                    otherUnifiedPatterns.add(otherPattern);
                }
            }
        }
        for (KItem pattern : patterns) {
            if (!unifiedPatterns.contains(pattern)) {
                remainingPatterns.add(pattern);
            }
        }
        for (KItem otherPattern : otherPatterns) {
            if (!otherUnifiedPatterns.contains(otherPattern)) {
                otherRemainingPatterns.add(otherPattern);
            }
        }

        Multiset<Variable> variables = map.collectionVariables();
        Multiset<Variable> otherVariables = otherMap.collectionVariables();
        Multiset<Variable> commonVariables = Multisets.intersection(variables, otherVariables);
        Multiset<Variable> remainingVariables = Multisets.difference(variables, commonVariables);
        Multiset<Variable> otherRemainingVariables = Multisets.difference(otherVariables, commonVariables);

        if (remainingEntries.isEmpty()
                && remainingPatterns.isEmpty()
                && remainingVariables.isEmpty()
                && !otherRemainingEntries.isEmpty()) {
            //fail(map, otherMap);
            return empty;
        }
        if (otherRemainingEntries.isEmpty()
                && otherRemainingPatterns.isEmpty()
                && otherRemainingVariables.isEmpty()
                && !remainingEntries.isEmpty()) {
            //fail(map, otherMap);
            return empty;
        }

        BuiltinMap.Builder builder = BuiltinMap.builder(global);
        builder.putAll(remainingEntries);
        builder.concatenate(remainingPatterns.toArray(new Term[remainingPatterns.size()]));
        builder.concatenate(remainingVariables.toArray(new Term[remainingVariables.size()]));
        Term remainingMap = builder.build();

        BuiltinMap.Builder otherBuilder = BuiltinMap.builder(global);
        otherBuilder.putAll(otherRemainingEntries);
        otherBuilder.concatenate(otherRemainingPatterns.toArray(new Term[otherRemainingPatterns.size()]));
        otherBuilder.concatenate(otherRemainingVariables.toArray(new Term[otherRemainingVariables.size()]));
        Term otherRemainingMap = otherBuilder.build();

        if (!(remainingMap instanceof BuiltinMap && ((BuiltinMap) remainingMap).isEmpty())
                || !(otherRemainingMap instanceof BuiltinMap && ((BuiltinMap) otherRemainingMap).isEmpty())) {
            if (remainingMap instanceof Variable || otherRemainingMap instanceof Variable || partialSimplification) {
                // map equality resolved or partial simplification enabled
                return addUnification(remainingMap, otherRemainingMap, ruleMask, path);
            } else {
                /* unable to dissolve the entire map equality; thus, we need to
                 * preserve the original map terms for pattern folding */
                return addUnification(map, otherMap, ruleMask, path);
            }
        }

        return ruleMask;
    }

    private BitSet unifySet(BuiltinSet set, BuiltinSet otherSet, BitSet ruleMask, scala.collection.immutable.List<Pair<Integer, Integer>> path) {
        assert set.collectionFunctions().isEmpty() && set.collectionPatterns().isEmpty()
                && otherSet.collectionFunctions().isEmpty() && otherSet.collectionPatterns().isEmpty();

        Set<Term> commonElements = Sets.intersection(set.elements(), otherSet.elements());
        Set<Term> remainingElements = Sets.difference(set.elements(), commonElements);
        Set<Term> otherRemainingElements =  Sets.difference(otherSet.elements(), commonElements);
        Multiset<Variable> commonVariables = Multisets.intersection(
                set.collectionVariables(),
                otherSet.collectionVariables());
        Multiset<Variable> remainingVariables = Multisets.difference(
                set.collectionVariables(),
                commonVariables);
        Multiset<Variable> otherRemainingVariables = Multisets.difference(
                otherSet.collectionVariables(),
                commonVariables);

        if (remainingElements.isEmpty()
                && remainingVariables.isEmpty()
                && !otherRemainingElements.isEmpty()) {
            return empty;
        }
        if (otherRemainingElements.isEmpty()
                && otherRemainingVariables.isEmpty()
                && !remainingElements.isEmpty()) {
            return empty;
        }

        BuiltinSet.Builder builder = BuiltinSet.builder(global);
        builder.addAll(remainingElements);
        builder.concatenate(remainingVariables.toArray(new Term[remainingVariables.size()]));
        Term remainingSet = builder.build();

        BuiltinSet.Builder otherBuilder = BuiltinSet.builder(global);
        otherBuilder.addAll(otherRemainingElements);
        otherBuilder.concatenate(otherRemainingVariables.toArray(new Term[otherRemainingVariables.size()]));
        Term otherRemainingSet = otherBuilder.build();

        if (!(remainingSet instanceof BuiltinSet && ((BuiltinSet) remainingSet).isEmpty())
                || !(otherRemainingSet instanceof BuiltinSet && ((BuiltinSet) otherRemainingSet).isEmpty())) {
            return addUnification(remainingSet, otherRemainingSet, ruleMask, path);
        }

        return ruleMask;
    }

    /**
     * Left-hand side of a minimal equality causing this unification to fail.
     * Must be set if this unification fails.
     */
    private Term unificationFailureLeftHandSide = BoolToken.TRUE;
    /**
     * Right-hand side of a minimal equality causing this unification to fail.
     * Must be set if this unification fails.
     */
    private Term unificationFailureRightHandSide = BoolToken.FALSE;

    public Term unificationFailureLeftHandSide() {
        return unificationFailureLeftHandSide;
    }

    public Term unificationFailureRightHandSide() {
        return unificationFailureRightHandSide;
    }

}

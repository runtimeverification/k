module MAP
  imports private BOOL-SYNTAX
  imports private INT-SYNTAX
  imports private LIST
  imports private SET

  syntax Map [hook(MAP.Map)]

  syntax Map ::= Map Map                        [left, function, hook(MAP.concat), klabel(_Map_), symbol, assoc, comm, unit(.Map), element(_|->_), index(0), format(%1%n%2)]
  syntax Map ::= ".Map"                         [function, total, hook(MAP.unit), klabel(.Map), symbol, latex(\dotCt{Map})]
  syntax Map ::= KItem "|->" KItem                      [function, total, hook(MAP.element), klabel(_|->_), symbol, latex({#1}\mapsto{#2}), injective]

  syntax priorities _|->_ > _Map_ .Map
  syntax non-assoc _|->_

  syntax KItem ::= Map "[" KItem "]"                    [function, hook(MAP.lookup), klabel(Map:lookup), symbol]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem      [function, total, hook(MAP.lookupOrDefault), klabel(Map:lookupOrDefault)]
  syntax Map ::= Map "[" key: KItem "<-" value: KItem "]"           [function, total, klabel(Map:update), symbol, hook(MAP.update), prefer]
  syntax Map ::= Map "[" KItem "<-" "undef" "]"     [function, total, hook(MAP.remove), klabel(_[_<-undef]), symbol]
  syntax Map ::= Map "-Map" Map                 [function, total, hook(MAP.difference), latex({#1}-_{\it Map}{#2})]
  syntax Map ::= updateMap(Map, Map)            [function, total, hook(MAP.updateAll)]
  syntax Map ::= removeAll(Map, Set)            [function, total, hook(MAP.removeAll)]
  syntax Set ::= keys(Map)                      [function, total, hook(MAP.keys)]
  syntax List ::= "keys_list" "(" Map ")"       [function, hook(MAP.keys_list)]
  syntax Bool ::= KItem "in_keys" "(" Map ")"       [function, total, hook(MAP.in_keys)]
  syntax List ::= values(Map)                   [function, hook(MAP.values)]
  syntax Int ::= size(Map)                      [function, total, hook(MAP.size), klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map               [function, total, hook(MAP.inclusion)]
  syntax KItem ::= choice(Map)                      [function, hook(MAP.choice), klabel(Map:choice)]
endmodule


module MAP-KORE-SYMBOLIC [kore,symbolic,haskell]
  imports MAP
  imports private K-EQUAL
  imports private BOOL

  rule #Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K) [simplification]

  // Symbolic update

  // Adding the definedness condition `notBool (K in_keys(M))` in the ensures clause of the following rule would be redundant
  // because K also appears in the rhs, preserving the case when it's #Bottom.
  rule (K |-> _ M:Map) [ K <- V ] => (K |-> V M) [simplification]
  rule M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M)) [simplification]
  rule M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ] [simplification]
  // Adding the definedness condition `notBool (K1 in_keys(M))` in the ensures clause of the following rule would be redundant
  // because K1 also appears in the rhs, preserving the case when it's #Bottom.
  rule (K1 |-> V1 M:Map) [ K2 <- V2 ] => (K1 |-> V1 (M [ K2 <- V2 ])) requires K1 =/=K K2 [simplification]

  // Symbolic remove
  rule (K |-> _ M:Map) [ K <- undef ] => M ensures notBool (K in_keys(M)) [simplification]
  rule M:Map [ K <- undef ] => M requires notBool (K in_keys(M)) [simplification]
  // Adding the definedness condition `notBool (K1 in_keys(M))` in the ensures clause of the following rule would be redundant
  // because K1 also appears in the rhs, preserving the case when it's #Bottom.
  rule (K1 |-> V1 M:Map) [ K2 <- undef ] => (K1 |-> V1 (M [ K2 <- undef ])) requires K1 =/=K K2 [simplification]

  // Symbolic lookup
  rule (K  |->  V M:Map) [ K ]  => V ensures notBool (K in_keys(M)) [simplification]
  rule (K1 |-> _V M:Map) [ K2 ] => M [K2] requires K1 =/=K K2 ensures notBool (K1 in_keys(M)) [simplification]
  rule (_MAP:Map [ K  <-  V1 ]) [ K ]  => V1 [simplification]
  rule ( MAP:Map [ K1 <- _V1 ]) [ K2 ] => MAP [ K2 ] requires K1 =/=K K2 [simplification]

  rule (K  |->  V M:Map) [  K ] orDefault _ => V ensures notBool (K in_keys(M)) [simplification]
  rule (K1 |-> _V M:Map) [ K2 ] orDefault D => M [K2] orDefault D requires K1 =/=K K2 ensures notBool (K1 in_keys(M)) [simplification]
  rule (_MAP:Map [ K  <-  V1 ]) [ K ] orDefault _ => V1 [simplification]
  rule ( MAP:Map [ K1 <- _V1 ]) [ K2 ] orDefault D => MAP [ K2 ] orDefault D requires K1 =/=K K2 [simplification]
  rule .Map [ _ ] orDefault D => D [simplification]

  // Symbolic in_keys
  rule K in_keys(_M [ K <- undef ]) => false [simplification]
  rule K in_keys(_M [ K <- _ ]) => true [simplification]
  rule K1 in_keys(M [ K2 <- _ ]) => true requires K1 ==K K2 orBool K1 in_keys(M) [simplification]
  rule K1 in_keys(M [ K2 <- _ ]) => K1 in_keys(M) requires K1 =/=K K2 [simplification]

  rule {false #Equals @Key in_keys(.Map)} => #Ceil(@Key) [simplification]
  rule {@Key in_keys(.Map) #Equals false} => #Ceil(@Key) [simplification]
  rule {false #Equals @Key in_keys(Key' |-> Val @M)} => #Ceil(@Key) #And #Ceil(Key' |-> Val @M) #And #Not({@Key #Equals Key'}) #And {false #Equals @Key in_keys(@M)} [simplification]
  rule {@Key in_keys(Key' |-> Val @M) #Equals false} => #Ceil(@Key) #And #Ceil(Key' |-> Val @M) #And #Not({@Key #Equals Key'}) #And {@Key in_keys(@M) #Equals false} [simplification]

/*
// The rule below is automatically generated by the frontend for every sort
// hooked to MAP.Map. It is left here to serve as documentation.

  rule #Ceil(@M:Map (@K:KItem |-> @V:KItem)) => {(@K in_keys(@M)) #Equals false} #And #Ceil(@M) #And #Ceil(@K) #And #Ceil(@V)
    [simplification]
*/
endmodule


module MAP-SYMBOLIC
  imports MAP-KORE-SYMBOLIC
endmodule
===
KW_MODULE
module

MODNAME
MAP

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
LIST

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
SET

KW_SYNTAX
syntax

ID_UPPER
Map

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.Map

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_UPPER
Map

ID_UPPER
Map

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.concat

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_Map_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
assoc

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
unit

LPAREN
(

ATTR_CONTENT
.Map

RPAREN
)

COMMA
,

ATTR_KEY
element

LPAREN
(

ATTR_CONTENT
_|->_

RPAREN
)

COMMA
,

ATTR_KEY
index

LPAREN
(

ATTR_CONTENT
0

RPAREN
)

COMMA
,

ATTR_KEY
format

LPAREN
(

ATTR_CONTENT
%1%n%2

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

STRING
".Map"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.unit

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
.Map

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\dotCt{Map}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_UPPER
KItem

STRING
"|->"

ID_UPPER
KItem

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.element

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_|->_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mapsto{#2}

RPAREN
)

COMMA
,

ATTR_KEY
injective

RBRACK
]

KW_SYNTAX
syntax

KW_PRIORITIES
priorities

KLABEL
_|->_

GT
>

KLABEL
_Map_

KLABEL
.Map

KW_SYNTAX
syntax

KW_NONASSOC
non-assoc

KLABEL
_|->_

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_UPPER
Map

STRING
"["

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.lookup

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Map:lookup

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_UPPER
Map

STRING
"["

ID_UPPER
KItem

STRING
"]"

STRING
"orDefault"

ID_UPPER
KItem

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.lookupOrDefault

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Map:lookupOrDefault

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_UPPER
Map

STRING
"["

ID_LOWER
key

COLON
:

ID_UPPER
KItem

STRING
"<-"

ID_LOWER
value

COLON
:

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Map:update

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.update

RPAREN
)

COMMA
,

ATTR_KEY
prefer

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_UPPER
Map

STRING
"["

ID_UPPER
KItem

STRING
"<-"

STRING
"undef"

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.remove

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_[_<-undef]

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_UPPER
Map

STRING
"-Map"

ID_UPPER
Map

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.difference

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}-_{\it Map}{#2}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_LOWER
updateMap

LPAREN
(

ID_UPPER
Map

COMMA
,

ID_UPPER
Map

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.updateAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Map

DCOLONEQ
::=

ID_LOWER
removeAll

LPAREN
(

ID_UPPER
Map

COMMA
,

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.removeAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_LOWER
keys

LPAREN
(

ID_UPPER
Map

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.keys

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

STRING
"keys_list"

STRING
"("

ID_UPPER
Map

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.keys_list

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
KItem

STRING
"in_keys"

STRING
"("

ID_UPPER
Map

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.in_keys

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
values

LPAREN
(

ID_UPPER
Map

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.values

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
size

LPAREN
(

ID_UPPER
Map

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.size

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
sizeMap

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Map

STRING
"<=Map"

ID_UPPER
Map

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.inclusion

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
choice

LPAREN
(

ID_UPPER
Map

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MAP.choice

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Map:choice

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
MAP-KORE-SYMBOLIC

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

COMMA
,

ATTR_KEY
haskell

RBRACK
]

KW_IMPORTS
imports

MODNAME
MAP

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
#Ceil(@M:Map [@K:KItem]) => {(@K in_keys(@M)) #Equals true} #And #Ceil(@M) #And #Ceil(@K)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K |-> _ M:Map) [ K <- V ] => (K |-> V M)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
M:Map [ K <- V ] => (K |-> V M) requires notBool (K in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
M:Map [ K <- _ ] [ K <- V ] => M [ K <- V ]

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K1 |-> V1 M:Map) [ K2 <- V2 ] => (K1 |-> V1 (M [ K2 <- V2 ])) requires K1 =/=K K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K |-> _ M:Map) [ K <- undef ] => M ensures notBool (K in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
M:Map [ K <- undef ] => M requires notBool (K in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K1 |-> V1 M:Map) [ K2 <- undef ] => (K1 |-> V1 (M [ K2 <- undef ])) requires K1 =/=K K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K  |->  V M:Map) [ K ]  => V ensures notBool (K in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K1 |-> _V M:Map) [ K2 ] => M [K2] requires K1 =/=K K2 ensures notBool (K1 in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(_MAP:Map [ K  <-  V1 ]) [ K ]  => V1

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
( MAP:Map [ K1 <- _V1 ]) [ K2 ] => MAP [ K2 ] requires K1 =/=K K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K  |->  V M:Map) [  K ] orDefault _ => V ensures notBool (K in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(K1 |-> _V M:Map) [ K2 ] orDefault D => M [K2] orDefault D requires K1 =/=K K2 ensures notBool (K1 in_keys(M))

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(_MAP:Map [ K  <-  V1 ]) [ K ] orDefault _ => V1

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
( MAP:Map [ K1 <- _V1 ]) [ K2 ] orDefault D => MAP [ K2 ] orDefault D requires K1 =/=K K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
.Map [ _ ] orDefault D => D

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
K in_keys(_M [ K <- undef ]) => false

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
K in_keys(_M [ K <- _ ]) => true

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
K1 in_keys(M [ K2 <- _ ]) => true requires K1 ==K K2 orBool K1 in_keys(M)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
K1 in_keys(M [ K2 <- _ ]) => K1 in_keys(M) requires K1 =/=K K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals @Key in_keys(.Map)} => #Ceil(@Key)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{@Key in_keys(.Map) #Equals false} => #Ceil(@Key)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals @Key in_keys(Key' |-> Val @M)} => #Ceil(@Key) #And #Ceil(Key' |-> Val @M) #And #Not({@Key #Equals Key'}) #And {false #Equals @Key in_keys(@M)}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{@Key in_keys(Key' |-> Val @M) #Equals false} => #Ceil(@Key) #And #Ceil(Key' |-> Val @M) #And #Not({@Key #Equals Key'}) #And {@Key in_keys(@M) #Equals false}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
MAP-SYMBOLIC

KW_IMPORTS
imports

MODNAME
MAP-KORE-SYMBOLIC

KW_ENDMODULE
endmodule

EOF


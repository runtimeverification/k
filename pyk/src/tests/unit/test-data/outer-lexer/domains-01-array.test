module ARRAY-SYNTAX
  imports private LIST

  syntax Array [hook(ARRAY.Array), unit(arrayCtor), element(_[_<-_])]

  syntax KItem ::= Array "[" Int "]" [function, hook(ARRAY.lookup)]

  syntax Array ::= Array "[" key: Int "<-" value: KItem "]" [function, hook(ARRAY.update), klabel(_[_<-_]), symbol]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function, hook(ARRAY.remove)]
  syntax Array ::= updateArray(Array, index: Int, List) [function, hook(ARRAY.updateAll)]
  syntax Array ::= fillArray(Array, index: Int, length: Int, value: KItem) [function, hook(ARRAY.fill)]

  syntax Bool ::= Int "in_keys" "(" Array ")" [function, total, hook(ARRAY.in_keys)]
endmodule


module ARRAY-IN-K [private]
  imports public ARRAY-SYNTAX
  imports private LIST
  imports private K-EQUAL
  imports private INT
  imports private BOOL

  syntax Array ::= makeArray(length: Int, value: KItem) [function, hook(ARRAY.make), public]
  syntax Array ::= arr(List, Int, KItem)

  rule makeArray(I::Int, D::KItem) => arr(.List, I, D)

  rule arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)
  rule arr(_      , _, D::KItem) [ _        ] => D      [owise]

  syntax List ::= ensureOffsetList(List, Int, KItem) [function]
  rule ensureOffsetList(L::List, IDX::Int, D::KItem) => L makeList(IDX +Int 1 -Int size(L), D) requires         IDX >=Int size(L)
  rule ensureOffsetList(L::List, IDX::Int, _::KItem) => L                                      requires notBool IDX >=Int size(L)

  rule arr(L::List, I::Int, D::KItem) [ IDX::Int <- VAL::KItem ] => arr(ensureOffsetList(L, IDX, D) [ IDX <- VAL ], I, D)

  rule arr(L::List, I::Int, D::KItem) [ IDX::Int <- undef ] => arr(L, I, D) [ IDX <- D ]

  rule updateArray(arr(L::List, I::Int, D::KItem), IDX::Int, L2::List) => arr(updateList(ensureOffsetList(L, IDX +Int size(L2) -Int 1, D), IDX, L2), I, D)

  rule fillArray(arr(L::List, I::Int, D::KItem), IDX::Int, LEN::Int, VAL::KItem) => arr(fillList(ensureOffsetList(L, IDX +Int LEN -Int 1, D), IDX, LEN, VAL), I, D)

  rule IDX::Int in_keys(arr(_, I::Int, _)) => IDX >=Int 0 andBool IDX <Int I
endmodule


module ARRAY-SYMBOLIC [symbolic]
  imports ARRAY-IN-K
endmodule


module ARRAY-KORE [kore]
  imports ARRAY-IN-K
endmodule


module ARRAY
  imports ARRAY-SYMBOLIC
  imports ARRAY-KORE
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
ARRAY-SYNTAX

KW_IMPORTS
2,3
imports

KW_PRIVATE
2,11
private

MODNAME
2,19
LIST

KW_SYNTAX
4,3
syntax

ID_UPPER
4,10
Array

LBRACK
4,16
[

ATTR_KEY
4,17
hook

LPAREN
4,21
(

ATTR_CONTENT
4,22
ARRAY.Array

RPAREN
4,33
)

COMMA
4,34
,

ATTR_KEY
4,36
unit

LPAREN
4,40
(

ATTR_CONTENT
4,41
arrayCtor

RPAREN
4,50
)

COMMA
4,51
,

ATTR_KEY
4,53
element

LPAREN
4,60
(

ATTR_CONTENT
4,61
_[_<-_]

RPAREN
4,68
)

RBRACK
4,69
]

KW_SYNTAX
6,3
syntax

ID_UPPER
6,10
KItem

DCOLONEQ
6,16
::=

ID_UPPER
6,20
Array

STRING
6,26
"["

ID_UPPER
6,30
Int

STRING
6,34
"]"

LBRACK
6,38
[

ATTR_KEY
6,39
function

COMMA
6,47
,

ATTR_KEY
6,49
hook

LPAREN
6,53
(

ATTR_CONTENT
6,54
ARRAY.lookup

RPAREN
6,66
)

RBRACK
6,67
]

KW_SYNTAX
8,3
syntax

ID_UPPER
8,10
Array

DCOLONEQ
8,16
::=

ID_UPPER
8,20
Array

STRING
8,26
"["

ID_LOWER
8,30
key

COLON
8,33
:

ID_UPPER
8,35
Int

STRING
8,39
"<-"

ID_LOWER
8,44
value

COLON
8,49
:

ID_UPPER
8,51
KItem

STRING
8,57
"]"

LBRACK
8,61
[

ATTR_KEY
8,62
function

COMMA
8,70
,

ATTR_KEY
8,72
hook

LPAREN
8,76
(

ATTR_CONTENT
8,77
ARRAY.update

RPAREN
8,89
)

COMMA
8,90
,

ATTR_KEY
8,92
klabel

LPAREN
8,98
(

ATTR_CONTENT
8,99
_[_<-_]

RPAREN
8,106
)

COMMA
8,107
,

ATTR_KEY
8,109
symbol

RBRACK
8,115
]

KW_SYNTAX
9,3
syntax

ID_UPPER
9,10
Array

DCOLONEQ
9,16
::=

ID_UPPER
9,20
Array

STRING
9,26
"["

ID_UPPER
9,30
Int

STRING
9,34
"<-"

STRING
9,39
"undef"

STRING
9,47
"]"

LBRACK
9,51
[

ATTR_KEY
9,52
function

COMMA
9,60
,

ATTR_KEY
9,62
hook

LPAREN
9,66
(

ATTR_CONTENT
9,67
ARRAY.remove

RPAREN
9,79
)

RBRACK
9,80
]

KW_SYNTAX
10,3
syntax

ID_UPPER
10,10
Array

DCOLONEQ
10,16
::=

ID_LOWER
10,20
updateArray

LPAREN
10,31
(

ID_UPPER
10,32
Array

COMMA
10,37
,

ID_LOWER
10,39
index

COLON
10,44
:

ID_UPPER
10,46
Int

COMMA
10,49
,

ID_UPPER
10,51
List

RPAREN
10,55
)

LBRACK
10,57
[

ATTR_KEY
10,58
function

COMMA
10,66
,

ATTR_KEY
10,68
hook

LPAREN
10,72
(

ATTR_CONTENT
10,73
ARRAY.updateAll

RPAREN
10,88
)

RBRACK
10,89
]

KW_SYNTAX
11,3
syntax

ID_UPPER
11,10
Array

DCOLONEQ
11,16
::=

ID_LOWER
11,20
fillArray

LPAREN
11,29
(

ID_UPPER
11,30
Array

COMMA
11,35
,

ID_LOWER
11,37
index

COLON
11,42
:

ID_UPPER
11,44
Int

COMMA
11,47
,

ID_LOWER
11,49
length

COLON
11,55
:

ID_UPPER
11,57
Int

COMMA
11,60
,

ID_LOWER
11,62
value

COLON
11,67
:

ID_UPPER
11,69
KItem

RPAREN
11,74
)

LBRACK
11,76
[

ATTR_KEY
11,77
function

COMMA
11,85
,

ATTR_KEY
11,87
hook

LPAREN
11,91
(

ATTR_CONTENT
11,92
ARRAY.fill

RPAREN
11,102
)

RBRACK
11,103
]

KW_SYNTAX
13,3
syntax

ID_UPPER
13,10
Bool

DCOLONEQ
13,15
::=

ID_UPPER
13,19
Int

STRING
13,23
"in_keys"

STRING
13,33
"("

ID_UPPER
13,37
Array

STRING
13,43
")"

LBRACK
13,47
[

ATTR_KEY
13,48
function

COMMA
13,56
,

ATTR_KEY
13,58
total

COMMA
13,63
,

ATTR_KEY
13,65
hook

LPAREN
13,69
(

ATTR_CONTENT
13,70
ARRAY.in_keys

RPAREN
13,83
)

RBRACK
13,84
]

KW_ENDMODULE
14,1
endmodule

KW_MODULE
17,1
module

MODNAME
17,8
ARRAY-IN-K

LBRACK
17,19
[

ATTR_KEY
17,20
private

RBRACK
17,27
]

KW_IMPORTS
18,3
imports

KW_PUBLIC
18,11
public

MODNAME
18,18
ARRAY-SYNTAX

KW_IMPORTS
19,3
imports

KW_PRIVATE
19,11
private

MODNAME
19,19
LIST

KW_IMPORTS
20,3
imports

KW_PRIVATE
20,11
private

MODNAME
20,19
K-EQUAL

KW_IMPORTS
21,3
imports

KW_PRIVATE
21,11
private

MODNAME
21,19
INT

KW_IMPORTS
22,3
imports

KW_PRIVATE
22,11
private

MODNAME
22,19
BOOL

KW_SYNTAX
24,3
syntax

ID_UPPER
24,10
Array

DCOLONEQ
24,16
::=

ID_LOWER
24,20
makeArray

LPAREN
24,29
(

ID_LOWER
24,30
length

COLON
24,36
:

ID_UPPER
24,38
Int

COMMA
24,41
,

ID_LOWER
24,43
value

COLON
24,48
:

ID_UPPER
24,50
KItem

RPAREN
24,55
)

LBRACK
24,57
[

ATTR_KEY
24,58
function

COMMA
24,66
,

ATTR_KEY
24,68
hook

LPAREN
24,72
(

ATTR_CONTENT
24,73
ARRAY.make

RPAREN
24,83
)

COMMA
24,84
,

ATTR_KEY
24,86
public

RBRACK
24,92
]

KW_SYNTAX
25,3
syntax

ID_UPPER
25,10
Array

DCOLONEQ
25,16
::=

ID_LOWER
25,20
arr

LPAREN
25,23
(

ID_UPPER
25,24
List

COMMA
25,28
,

ID_UPPER
25,30
Int

COMMA
25,33
,

ID_UPPER
25,35
KItem

RPAREN
25,40
)

KW_RULE
27,3
rule

BUBBLE
27,8
makeArray(I::Int, D::KItem) => arr(.List, I, D)

KW_RULE
29,3
rule

BUBBLE
29,8
arr(L::List, _, _       ) [ IDX::Int ] => L[IDX] requires 0 <=Int IDX andBool IDX  <Int size(L)

KW_RULE
30,3
rule

BUBBLE
30,8
arr(_      , _, D::KItem) [ _        ] => D

LBRACK
30,57
[

ATTR_KEY
30,58
owise

RBRACK
30,63
]

KW_SYNTAX
32,3
syntax

ID_UPPER
32,10
List

DCOLONEQ
32,15
::=

ID_LOWER
32,19
ensureOffsetList

LPAREN
32,35
(

ID_UPPER
32,36
List

COMMA
32,40
,

ID_UPPER
32,42
Int

COMMA
32,45
,

ID_UPPER
32,47
KItem

RPAREN
32,52
)

LBRACK
32,54
[

ATTR_KEY
32,55
function

RBRACK
32,63
]

KW_RULE
33,3
rule

BUBBLE
33,8
ensureOffsetList(L::List, IDX::Int, D::KItem) => L makeList(IDX +Int 1 -Int size(L), D) requires         IDX >=Int size(L)

KW_RULE
34,3
rule

BUBBLE
34,8
ensureOffsetList(L::List, IDX::Int, _::KItem) => L                                      requires notBool IDX >=Int size(L)

KW_RULE
36,3
rule

BUBBLE
36,8
arr(L::List, I::Int, D::KItem) [ IDX::Int <- VAL::KItem ] => arr(ensureOffsetList(L, IDX, D) [ IDX <- VAL ], I, D)

KW_RULE
38,3
rule

BUBBLE
38,8
arr(L::List, I::Int, D::KItem) [ IDX::Int <- undef ] => arr(L, I, D) [ IDX <- D ]

KW_RULE
40,3
rule

BUBBLE
40,8
updateArray(arr(L::List, I::Int, D::KItem), IDX::Int, L2::List) => arr(updateList(ensureOffsetList(L, IDX +Int size(L2) -Int 1, D), IDX, L2), I, D)

KW_RULE
42,3
rule

BUBBLE
42,8
fillArray(arr(L::List, I::Int, D::KItem), IDX::Int, LEN::Int, VAL::KItem) => arr(fillList(ensureOffsetList(L, IDX +Int LEN -Int 1, D), IDX, LEN, VAL), I, D)

KW_RULE
44,3
rule

BUBBLE
44,8
IDX::Int in_keys(arr(_, I::Int, _)) => IDX >=Int 0 andBool IDX <Int I

KW_ENDMODULE
45,1
endmodule

KW_MODULE
48,1
module

MODNAME
48,8
ARRAY-SYMBOLIC

LBRACK
48,23
[

ATTR_KEY
48,24
symbolic

RBRACK
48,32
]

KW_IMPORTS
49,3
imports

MODNAME
49,11
ARRAY-IN-K

KW_ENDMODULE
50,1
endmodule

KW_MODULE
53,1
module

MODNAME
53,8
ARRAY-KORE

LBRACK
53,19
[

ATTR_KEY
53,20
kore

RBRACK
53,24
]

KW_IMPORTS
54,3
imports

MODNAME
54,11
ARRAY-IN-K

KW_ENDMODULE
55,1
endmodule

KW_MODULE
58,1
module

MODNAME
58,8
ARRAY

KW_IMPORTS
59,3
imports

MODNAME
59,11
ARRAY-SYMBOLIC

KW_IMPORTS
60,3
imports

MODNAME
60,11
ARRAY-KORE

KW_ENDMODULE
61,1
endmodule

EOF
61,9


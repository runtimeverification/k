module SORT-BOOL
  syntax Bool [hook(BOOL.Bool)]
endmodule


module BOOL-SYNTAX
  imports SORT-BOOL
  syntax Bool ::= "true"  [token]
  syntax Bool ::= "false" [token]
endmodule


module BOOL-COMMON
  imports private BASIC-K
  imports BOOL-SYNTAX

  syntax Bool ::= "notBool" Bool          [function, total, klabel(notBool_), symbol, smt-hook(not), group(boolOperation), latex(\neg_{\scriptstyle\it Bool}{#1}), hook(BOOL.not)]
                > Bool "andBool" Bool     [function, total, klabel(_andBool_), symbol, left, smt-hook(and), group(boolOperation), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), hook(BOOL.and)]
                | Bool "andThenBool" Bool [function, total, klabel(_andThenBool_), symbol, left, smt-hook(and), group(boolOperation), hook(BOOL.andThen)]
                | Bool "xorBool" Bool     [function, total, klabel(_xorBool_), symbol, left, smt-hook(xor), group(boolOperation), hook(BOOL.xor)]
                | Bool "orBool" Bool      [function, total, klabel(_orBool_), symbol, left, smt-hook(or), group(boolOperation), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), hook(BOOL.or)]
                | Bool "orElseBool" Bool  [function, total, klabel(_orElseBool_), symbol, left, smt-hook(or), group(boolOperation), hook(BOOL.orElse)]
                | Bool "impliesBool" Bool [function, total, klabel(_impliesBool_), symbol, left, smt-hook(=>), group(boolOperation), hook(BOOL.implies)]
                > left:
                  Bool "==Bool" Bool      [function, total, klabel(_==Bool_), symbol, left, comm, smt-hook(=), hook(BOOL.eq)]
                | Bool "=/=Bool" Bool     [function, total, klabel(_=/=Bool_), symbol, left, comm, smt-hook(distinct), hook(BOOL.ne)]

  rule notBool true => false
  rule notBool false => true

  rule true andBool B:Bool => B:Bool
  rule B:Bool andBool true => B:Bool
  rule false andBool _:Bool => false
  rule _:Bool andBool false => false

  rule true andThenBool K::Bool => K
  rule K::Bool andThenBool true => K
  rule false andThenBool _ => false
  rule _ andThenBool false => false

  rule false xorBool B:Bool => B:Bool
  rule B:Bool xorBool false => B:Bool
  rule B:Bool xorBool B:Bool => false

  rule true orBool _:Bool => true
  rule _:Bool orBool true => true
  rule false orBool B:Bool => B
  rule B:Bool orBool false => B

  rule true orElseBool _ => true
  rule _ orElseBool true => true
  rule false orElseBool K::Bool => K
  rule K::Bool orElseBool false => K

  rule true impliesBool B:Bool => B
  rule false impliesBool _:Bool => true
  rule _:Bool impliesBool true => true
  rule B:Bool impliesBool false => notBool B

  rule B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)
endmodule


module BOOL-KORE [kore, symbolic]
  imports BOOL-COMMON

  rule {true #Equals notBool @B} => {false #Equals @B} [simplification]
  rule {notBool @B #Equals true} => {@B #Equals false} [simplification]
  rule {false #Equals notBool @B} => {true #Equals @B} [simplification]
  rule {notBool @B #Equals false} => {@B #Equals true} [simplification]

  rule {true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2} [simplification]
  rule {@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true} [simplification]
  rule {false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2} [simplification]
  rule {@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false} [simplification]
endmodule


module BOOL
  imports BOOL-COMMON
  imports BOOL-KORE
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
SORT-BOOL

KW_SYNTAX
2,3
syntax

ID_UPPER
2,10
Bool

LBRACK
2,15
[

ATTR_KEY
2,16
hook

LPAREN
2,20
(

ATTR_CONTENT
2,21
BOOL.Bool

RPAREN
2,30
)

RBRACK
2,31
]

KW_ENDMODULE
3,1
endmodule

KW_MODULE
6,1
module

MODNAME
6,8
BOOL-SYNTAX

KW_IMPORTS
7,3
imports

MODNAME
7,11
SORT-BOOL

KW_SYNTAX
8,3
syntax

ID_UPPER
8,10
Bool

DCOLONEQ
8,15
::=

STRING
8,19
"true"

LBRACK
8,27
[

ATTR_KEY
8,28
token

RBRACK
8,33
]

KW_SYNTAX
9,3
syntax

ID_UPPER
9,10
Bool

DCOLONEQ
9,15
::=

STRING
9,19
"false"

LBRACK
9,27
[

ATTR_KEY
9,28
token

RBRACK
9,33
]

KW_ENDMODULE
10,1
endmodule

KW_MODULE
13,1
module

MODNAME
13,8
BOOL-COMMON

KW_IMPORTS
14,3
imports

KW_PRIVATE
14,11
private

MODNAME
14,19
BASIC-K

KW_IMPORTS
15,3
imports

MODNAME
15,11
BOOL-SYNTAX

KW_SYNTAX
17,3
syntax

ID_UPPER
17,10
Bool

DCOLONEQ
17,15
::=

STRING
17,19
"notBool"

ID_UPPER
17,29
Bool

LBRACK
17,43
[

ATTR_KEY
17,44
function

COMMA
17,52
,

ATTR_KEY
17,54
total

COMMA
17,59
,

ATTR_KEY
17,61
klabel

LPAREN
17,67
(

ATTR_CONTENT
17,68
notBool_

RPAREN
17,76
)

COMMA
17,77
,

ATTR_KEY
17,79
symbol

COMMA
17,85
,

ATTR_KEY
17,87
smt-hook

LPAREN
17,95
(

ATTR_CONTENT
17,96
not

RPAREN
17,99
)

COMMA
17,100
,

ATTR_KEY
17,102
group

LPAREN
17,107
(

ATTR_CONTENT
17,108
boolOperation

RPAREN
17,121
)

COMMA
17,122
,

ATTR_KEY
17,124
latex

LPAREN
17,129
(

ATTR_CONTENT
17,130
\neg_{\scriptstyle\it Bool}{#1}

RPAREN
17,161
)

COMMA
17,162
,

ATTR_KEY
17,164
hook

LPAREN
17,168
(

ATTR_CONTENT
17,169
BOOL.not

RPAREN
17,177
)

RBRACK
17,178
]

GT
18,17
>

ID_UPPER
18,19
Bool

STRING
18,24
"andBool"

ID_UPPER
18,34
Bool

LBRACK
18,43
[

ATTR_KEY
18,44
function

COMMA
18,52
,

ATTR_KEY
18,54
total

COMMA
18,59
,

ATTR_KEY
18,61
klabel

LPAREN
18,67
(

ATTR_CONTENT
18,68
_andBool_

RPAREN
18,77
)

COMMA
18,78
,

ATTR_KEY
18,80
symbol

COMMA
18,86
,

ATTR_KEY
18,88
left

COMMA
18,92
,

ATTR_KEY
18,94
smt-hook

LPAREN
18,102
(

ATTR_CONTENT
18,103
and

RPAREN
18,106
)

COMMA
18,107
,

ATTR_KEY
18,109
group

LPAREN
18,114
(

ATTR_CONTENT
18,115
boolOperation

RPAREN
18,128
)

COMMA
18,129
,

ATTR_KEY
18,131
latex

LPAREN
18,136
(

ATTR_CONTENT
18,137
{#1}\wedge_{\scriptstyle\it Bool}{#2}

RPAREN
18,174
)

COMMA
18,175
,

ATTR_KEY
18,177
hook

LPAREN
18,181
(

ATTR_CONTENT
18,182
BOOL.and

RPAREN
18,190
)

RBRACK
18,191
]

VBAR
19,17
|

ID_UPPER
19,19
Bool

STRING
19,24
"andThenBool"

ID_UPPER
19,38
Bool

LBRACK
19,43
[

ATTR_KEY
19,44
function

COMMA
19,52
,

ATTR_KEY
19,54
total

COMMA
19,59
,

ATTR_KEY
19,61
klabel

LPAREN
19,67
(

ATTR_CONTENT
19,68
_andThenBool_

RPAREN
19,81
)

COMMA
19,82
,

ATTR_KEY
19,84
symbol

COMMA
19,90
,

ATTR_KEY
19,92
left

COMMA
19,96
,

ATTR_KEY
19,98
smt-hook

LPAREN
19,106
(

ATTR_CONTENT
19,107
and

RPAREN
19,110
)

COMMA
19,111
,

ATTR_KEY
19,113
group

LPAREN
19,118
(

ATTR_CONTENT
19,119
boolOperation

RPAREN
19,132
)

COMMA
19,133
,

ATTR_KEY
19,135
hook

LPAREN
19,139
(

ATTR_CONTENT
19,140
BOOL.andThen

RPAREN
19,152
)

RBRACK
19,153
]

VBAR
20,17
|

ID_UPPER
20,19
Bool

STRING
20,24
"xorBool"

ID_UPPER
20,34
Bool

LBRACK
20,43
[

ATTR_KEY
20,44
function

COMMA
20,52
,

ATTR_KEY
20,54
total

COMMA
20,59
,

ATTR_KEY
20,61
klabel

LPAREN
20,67
(

ATTR_CONTENT
20,68
_xorBool_

RPAREN
20,77
)

COMMA
20,78
,

ATTR_KEY
20,80
symbol

COMMA
20,86
,

ATTR_KEY
20,88
left

COMMA
20,92
,

ATTR_KEY
20,94
smt-hook

LPAREN
20,102
(

ATTR_CONTENT
20,103
xor

RPAREN
20,106
)

COMMA
20,107
,

ATTR_KEY
20,109
group

LPAREN
20,114
(

ATTR_CONTENT
20,115
boolOperation

RPAREN
20,128
)

COMMA
20,129
,

ATTR_KEY
20,131
hook

LPAREN
20,135
(

ATTR_CONTENT
20,136
BOOL.xor

RPAREN
20,144
)

RBRACK
20,145
]

VBAR
21,17
|

ID_UPPER
21,19
Bool

STRING
21,24
"orBool"

ID_UPPER
21,33
Bool

LBRACK
21,43
[

ATTR_KEY
21,44
function

COMMA
21,52
,

ATTR_KEY
21,54
total

COMMA
21,59
,

ATTR_KEY
21,61
klabel

LPAREN
21,67
(

ATTR_CONTENT
21,68
_orBool_

RPAREN
21,76
)

COMMA
21,77
,

ATTR_KEY
21,79
symbol

COMMA
21,85
,

ATTR_KEY
21,87
left

COMMA
21,91
,

ATTR_KEY
21,93
smt-hook

LPAREN
21,101
(

ATTR_CONTENT
21,102
or

RPAREN
21,104
)

COMMA
21,105
,

ATTR_KEY
21,107
group

LPAREN
21,112
(

ATTR_CONTENT
21,113
boolOperation

RPAREN
21,126
)

COMMA
21,127
,

ATTR_KEY
21,129
latex

LPAREN
21,134
(

ATTR_CONTENT
21,135
{#1}\vee_{\scriptstyle\it Bool}{#2}

RPAREN
21,170
)

COMMA
21,171
,

ATTR_KEY
21,173
hook

LPAREN
21,177
(

ATTR_CONTENT
21,178
BOOL.or

RPAREN
21,185
)

RBRACK
21,186
]

VBAR
22,17
|

ID_UPPER
22,19
Bool

STRING
22,24
"orElseBool"

ID_UPPER
22,37
Bool

LBRACK
22,43
[

ATTR_KEY
22,44
function

COMMA
22,52
,

ATTR_KEY
22,54
total

COMMA
22,59
,

ATTR_KEY
22,61
klabel

LPAREN
22,67
(

ATTR_CONTENT
22,68
_orElseBool_

RPAREN
22,80
)

COMMA
22,81
,

ATTR_KEY
22,83
symbol

COMMA
22,89
,

ATTR_KEY
22,91
left

COMMA
22,95
,

ATTR_KEY
22,97
smt-hook

LPAREN
22,105
(

ATTR_CONTENT
22,106
or

RPAREN
22,108
)

COMMA
22,109
,

ATTR_KEY
22,111
group

LPAREN
22,116
(

ATTR_CONTENT
22,117
boolOperation

RPAREN
22,130
)

COMMA
22,131
,

ATTR_KEY
22,133
hook

LPAREN
22,137
(

ATTR_CONTENT
22,138
BOOL.orElse

RPAREN
22,149
)

RBRACK
22,150
]

VBAR
23,17
|

ID_UPPER
23,19
Bool

STRING
23,24
"impliesBool"

ID_UPPER
23,38
Bool

LBRACK
23,43
[

ATTR_KEY
23,44
function

COMMA
23,52
,

ATTR_KEY
23,54
total

COMMA
23,59
,

ATTR_KEY
23,61
klabel

LPAREN
23,67
(

ATTR_CONTENT
23,68
_impliesBool_

RPAREN
23,81
)

COMMA
23,82
,

ATTR_KEY
23,84
symbol

COMMA
23,90
,

ATTR_KEY
23,92
left

COMMA
23,96
,

ATTR_KEY
23,98
smt-hook

LPAREN
23,106
(

ATTR_CONTENT
23,107
=>

RPAREN
23,109
)

COMMA
23,110
,

ATTR_KEY
23,112
group

LPAREN
23,117
(

ATTR_CONTENT
23,118
boolOperation

RPAREN
23,131
)

COMMA
23,132
,

ATTR_KEY
23,134
hook

LPAREN
23,138
(

ATTR_CONTENT
23,139
BOOL.implies

RPAREN
23,151
)

RBRACK
23,152
]

GT
24,17
>

KW_LEFT
24,19
left

COLON
24,23
:

ID_UPPER
25,19
Bool

STRING
25,24
"==Bool"

ID_UPPER
25,33
Bool

LBRACK
25,43
[

ATTR_KEY
25,44
function

COMMA
25,52
,

ATTR_KEY
25,54
total

COMMA
25,59
,

ATTR_KEY
25,61
klabel

LPAREN
25,67
(

ATTR_CONTENT
25,68
_==Bool_

RPAREN
25,76
)

COMMA
25,77
,

ATTR_KEY
25,79
symbol

COMMA
25,85
,

ATTR_KEY
25,87
left

COMMA
25,91
,

ATTR_KEY
25,93
comm

COMMA
25,97
,

ATTR_KEY
25,99
smt-hook

LPAREN
25,107
(

ATTR_CONTENT
25,108
=

RPAREN
25,109
)

COMMA
25,110
,

ATTR_KEY
25,112
hook

LPAREN
25,116
(

ATTR_CONTENT
25,117
BOOL.eq

RPAREN
25,124
)

RBRACK
25,125
]

VBAR
26,17
|

ID_UPPER
26,19
Bool

STRING
26,24
"=/=Bool"

ID_UPPER
26,34
Bool

LBRACK
26,43
[

ATTR_KEY
26,44
function

COMMA
26,52
,

ATTR_KEY
26,54
total

COMMA
26,59
,

ATTR_KEY
26,61
klabel

LPAREN
26,67
(

ATTR_CONTENT
26,68
_=/=Bool_

RPAREN
26,77
)

COMMA
26,78
,

ATTR_KEY
26,80
symbol

COMMA
26,86
,

ATTR_KEY
26,88
left

COMMA
26,92
,

ATTR_KEY
26,94
comm

COMMA
26,98
,

ATTR_KEY
26,100
smt-hook

LPAREN
26,108
(

ATTR_CONTENT
26,109
distinct

RPAREN
26,117
)

COMMA
26,118
,

ATTR_KEY
26,120
hook

LPAREN
26,124
(

ATTR_CONTENT
26,125
BOOL.ne

RPAREN
26,132
)

RBRACK
26,133
]

KW_RULE
28,3
rule

BUBBLE
28,8
notBool true => false

KW_RULE
29,3
rule

BUBBLE
29,8
notBool false => true

KW_RULE
31,3
rule

BUBBLE
31,8
true andBool B:Bool => B:Bool

KW_RULE
32,3
rule

BUBBLE
32,8
B:Bool andBool true => B:Bool

KW_RULE
33,3
rule

BUBBLE
33,8
false andBool _:Bool => false

KW_RULE
34,3
rule

BUBBLE
34,8
_:Bool andBool false => false

KW_RULE
36,3
rule

BUBBLE
36,8
true andThenBool K::Bool => K

KW_RULE
37,3
rule

BUBBLE
37,8
K::Bool andThenBool true => K

KW_RULE
38,3
rule

BUBBLE
38,8
false andThenBool _ => false

KW_RULE
39,3
rule

BUBBLE
39,8
_ andThenBool false => false

KW_RULE
41,3
rule

BUBBLE
41,8
false xorBool B:Bool => B:Bool

KW_RULE
42,3
rule

BUBBLE
42,8
B:Bool xorBool false => B:Bool

KW_RULE
43,3
rule

BUBBLE
43,8
B:Bool xorBool B:Bool => false

KW_RULE
45,3
rule

BUBBLE
45,8
true orBool _:Bool => true

KW_RULE
46,3
rule

BUBBLE
46,8
_:Bool orBool true => true

KW_RULE
47,3
rule

BUBBLE
47,8
false orBool B:Bool => B

KW_RULE
48,3
rule

BUBBLE
48,8
B:Bool orBool false => B

KW_RULE
50,3
rule

BUBBLE
50,8
true orElseBool _ => true

KW_RULE
51,3
rule

BUBBLE
51,8
_ orElseBool true => true

KW_RULE
52,3
rule

BUBBLE
52,8
false orElseBool K::Bool => K

KW_RULE
53,3
rule

BUBBLE
53,8
K::Bool orElseBool false => K

KW_RULE
55,3
rule

BUBBLE
55,8
true impliesBool B:Bool => B

KW_RULE
56,3
rule

BUBBLE
56,8
false impliesBool _:Bool => true

KW_RULE
57,3
rule

BUBBLE
57,8
_:Bool impliesBool true => true

KW_RULE
58,3
rule

BUBBLE
58,8
B:Bool impliesBool false => notBool B

KW_RULE
60,3
rule

BUBBLE
60,8
B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)

KW_ENDMODULE
61,1
endmodule

KW_MODULE
64,1
module

MODNAME
64,8
BOOL-KORE

LBRACK
64,18
[

ATTR_KEY
64,19
kore

COMMA
64,23
,

ATTR_KEY
64,25
symbolic

RBRACK
64,33
]

KW_IMPORTS
65,3
imports

MODNAME
65,11
BOOL-COMMON

KW_RULE
67,3
rule

BUBBLE
67,8
{true #Equals notBool @B} => {false #Equals @B}

LBRACK
67,56
[

ATTR_KEY
67,57
simplification

RBRACK
67,71
]

KW_RULE
68,3
rule

BUBBLE
68,8
{notBool @B #Equals true} => {@B #Equals false}

LBRACK
68,56
[

ATTR_KEY
68,57
simplification

RBRACK
68,71
]

KW_RULE
69,3
rule

BUBBLE
69,8
{false #Equals notBool @B} => {true #Equals @B}

LBRACK
69,56
[

ATTR_KEY
69,57
simplification

RBRACK
69,71
]

KW_RULE
70,3
rule

BUBBLE
70,8
{notBool @B #Equals false} => {@B #Equals true}

LBRACK
70,56
[

ATTR_KEY
70,57
simplification

RBRACK
70,71
]

KW_RULE
72,3
rule

BUBBLE
72,8
{true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2}

LBRACK
72,85
[

ATTR_KEY
72,86
simplification

RBRACK
72,100
]

KW_RULE
73,3
rule

BUBBLE
73,8
{@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true}

LBRACK
73,85
[

ATTR_KEY
73,86
simplification

RBRACK
73,100
]

KW_RULE
74,3
rule

BUBBLE
74,8
{false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2}

LBRACK
74,87
[

ATTR_KEY
74,88
simplification

RBRACK
74,102
]

KW_RULE
75,3
rule

BUBBLE
75,8
{@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false}

LBRACK
75,87
[

ATTR_KEY
75,88
simplification

RBRACK
75,102
]

KW_ENDMODULE
76,1
endmodule

KW_MODULE
79,1
module

MODNAME
79,8
BOOL

KW_IMPORTS
80,3
imports

MODNAME
80,11
BOOL-COMMON

KW_IMPORTS
81,3
imports

MODNAME
81,11
BOOL-KORE

KW_ENDMODULE
82,1
endmodule

EOF
82,9


// Tests for commutativity of the addition operation
//
// Source:
//
// int x, y, a, b, res;
// x = X:Int;
// y = Y:Int;
// a = x + y;
// b = y + x;
// if ((a <= b) && (b <= a)) { // a == b
//     res = 0;
// } else {
//     res = 1;
// }

Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortPgm{}, SortKItem{}}(Lblint'UndsSClnUnds'{}(Lbl'UndsCommUnds'{}(\dv{SortId{}}("x"),Lbl'UndsCommUnds'{}(\dv{SortId{}}("y"),Lbl'UndsCommUnds'{}(\dv{SortId{}}("a"),Lbl'UndsCommUnds'{}(\dv{SortId{}}("b"),Lbl'UndsCommUnds'{}(\dv{SortId{}}("res"),Lbl'Stop'List'LBraQuotUndsCommUndsQuotRBra'{}()))))),Lbl'UndsUnds'{}(Lbl'UndsUnds'{}(Lbl'UndsUnds'{}(Lbl'UndsUnds'{}(Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("x"),VarX : SortInt{}),Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("y"),VarY : SortInt{})),Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("a"),Lbl'UndsPlusUnds'{}(inj{SortId{}, SortAExp{}}(\dv{SortId{}}("x")),inj{SortId{}, SortAExp{}}(\dv{SortId{}}("y"))))),Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("b"),Lbl'UndsPlusUnds'{}(inj{SortId{}, SortAExp{}}(\dv{SortId{}}("y")),inj{SortId{}, SortAExp{}}(\dv{SortId{}}("x"))))),Lblif'LParUndsRParUnds'else'Unds'{}(Lbl'UndsAnd-And-Unds'{}(Lbl'Unds-LT-EqlsUnds'{}(inj{SortId{}, SortAExp{}}(\dv{SortId{}}("a")),inj{SortId{}, SortAExp{}}(\dv{SortId{}}("b"))),Lbl'Unds-LT-EqlsUnds'{}(inj{SortId{}, SortAExp{}}(\dv{SortId{}}("b")),inj{SortId{}, SortAExp{}}(\dv{SortId{}}("a")))),Lbl'LBraUndsRBra'{}(Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("res"),inj{SortInt{}, SortAExp{}}(\dv{SortInt{}}("0")))),Lbl'LBraUndsRBra'{}(Lbl'UndsEqlsUndsSCln'{}(\dv{SortId{}}("res"),inj{SortInt{}, SortAExp{}}(\dv{SortInt{}}("1")))))))),dotk{}())),Lbl'-LT-'state'-GT-'{}(Lbl'Stop'Map{}())),Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0")))

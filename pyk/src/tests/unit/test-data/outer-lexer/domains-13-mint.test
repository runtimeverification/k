module MINT-SYNTAX
  /*@\section{Description} The MInt implements machine integers of arbitrary
   * bit width represented in 2's complement. */
  syntax {Width} MInt{Width} [hook(MINT.MInt)]

  /*@ Machine integer of bit width and value. */
  syntax {Width} MInt{Width} ::= r"[\\+-]?[0-9]+[pP][0-9]+" [token, prec(2), hook(MINT.literal)]
endmodule


module MINT
  imports MINT-SYNTAX
  imports private INT
  imports private BOOL

  syntax {Width} Int ::= bitwidthMInt(MInt{Width})   [function, total, hook(MINT.bitwidth)]

  syntax {Width} Int ::= MInt2Signed(MInt{Width})     [function, total, hook(MINT.svalue)]
                       | MInt2Unsigned(MInt{Width})     [function, total, hook(MINT.uvalue), smt-hook(bv2int)]

  syntax {Width} MInt{Width} ::= Int2MInt(Int) [function, total, hook(MINT.integer), smt-hook(int2bv)]

  syntax Int ::= sminMInt(Int)    [function]
               | smaxMInt(Int)    [function]
               | uminMInt(Int)    [function]
               | umaxMInt(Int)    [function]
  rule sminMInt(N:Int) => 0 -Int (1 <<Int (N -Int 1))
  rule smaxMInt(N:Int) => (1 <<Int (N -Int 1)) -Int 1
  rule uminMInt(_:Int) => 0
  rule umaxMInt(N:Int) => (1 <<Int N) -Int 1

  syntax Bool ::= soverflowMInt(width: Int, Int)   [function]
                | uoverflowMInt(width: Int, Int)   [function]
  rule
    soverflowMInt(N:Int, I:Int)
  =>
    I <Int sminMInt(N) orBool I >Int smaxMInt(N)
  rule
    uoverflowMInt(N:Int, I:Int)
  =>
    I <Int uminMInt(N) orBool I >Int umaxMInt(N)

  syntax {Width} MInt{Width} ::= "~MInt" MInt{Width} [function, total, hook(MINT.not), smt-hook(bvnot)]
                               | "--MInt" MInt{Width} [function, total, hook(MINT.neg), smt-hook(bvuminus)]
                               > left:
                                 MInt{Width} "*MInt" MInt{Width} [function, total, hook(MINT.mul), smt-hook(bvmul)]
                               | MInt{Width} "/sMInt" MInt{Width} [function, hook(MINT.sdiv), smt-hook(bvsdiv)]
                               | MInt{Width} "%sMInt" MInt{Width} [function, hook(MINT.srem), smt-hook(bvsrem)]
                               | MInt{Width} "/uMInt" MInt{Width} [function, hook(MINT.udiv), smt-hook(bvudiv)]
                               | MInt{Width} "%uMInt" MInt{Width} [function, hook(MINT.urem), smt-hook(bvurem)]
                               > left:
                                 MInt{Width} "+MInt" MInt{Width} [function, total, hook(MINT.add), smt-hook(bvadd)]
                               | MInt{Width} "-MInt" MInt{Width} [function, total, hook(MINT.sub), smt-hook(bvsub)]
                               > left:
                                 MInt{Width} "<<MInt" MInt{Width} [function, hook(MINT.shl), smt-hook(bvshl)]
                               | MInt{Width} ">>aMInt" MInt{Width} [function, hook(MINT.ashr), smt-hook(bvashr)]
                               | MInt{Width} ">>lMInt" MInt{Width} [function, hook(MINT.lshr), smt-hook(bvlshr)]
                               > left:
                                 MInt{Width} "&MInt" MInt{Width} [function, total, hook(MINT.and), smt-hook(bvand)]
                               > left:
                                 MInt{Width} "xorMInt" MInt{Width} [function, total, hook(MINT.xor), smt-hook(bvxor)]
                               > left:
                                 MInt{Width} "|MInt" MInt{Width} [function, total, hook(MINT.or), smt-hook(bvor)]

  syntax {Width} Bool ::= MInt{Width} "<sMInt" MInt{Width} [function, total, hook(MINT.slt), smt-hook(bvslt)]
                        | MInt{Width} "<uMInt" MInt{Width} [function, total, hook(MINT.ult), smt-hook(bvult)]
                        | MInt{Width} "<=sMInt" MInt{Width} [function, total, hook(MINT.sle), smt-hook(bvsle)]
                        | MInt{Width} "<=uMInt" MInt{Width} [function, total, hook(MINT.ule), smt-hook(bvule)]
                        | MInt{Width} ">sMInt" MInt{Width} [function, total, hook(MINT.sgt), smt-hook(bvsgt)]
                        | MInt{Width} ">uMInt" MInt{Width} [function, total, hook(MINT.ugt), smt-hook(bvugt)]
                        | MInt{Width} ">=sMInt" MInt{Width} [function, total, hook(MINT.sge), smt-hook(bvsge)]
                        | MInt{Width} ">=uMInt" MInt{Width} [function, total, hook(MINT.uge), smt-hook(bvuge)]
                        | MInt{Width} "==MInt" MInt{Width} [function, total, hook(MINT.eq), smt-hook(=)]
                        | MInt{Width} "=/=MInt" MInt{Width} [function, total, hook(MINT.ne), smt-hook(distinct)]

  syntax {Width} MInt{Width} ::= sMaxMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.smax), smt-hook((ite (bvslt #1 #2) #2 #1))]
                               | sMinMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.smin), smt-hook((ite (bvslt #1 #2) #1 #2))]
                               | uMaxMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.umax), smt-hook((ite (bvult #1 #2) #2 #1))]
                               | uMinMInt(MInt{Width}, MInt{Width}) [function, total, hook(MINT.umin), smt-hook((ite (bvult #1 #2) #1 #2))]

  syntax {Width1, Width2} MInt{Width1} ::= roundMInt(MInt{Width2}) [function, total, hook(MINT.round)]
endmodule
===
KW_MODULE
module

MODNAME
MINT-SYNTAX

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.MInt

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

DCOLONEQ
::=

REGEX
r"[\\+-]?[0-9]+[pP][0-9]+"

LBRACK
[

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
2

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.literal

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
MINT

KW_IMPORTS
imports

MODNAME
MINT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
bitwidthMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.bitwidth

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
MInt2Signed

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.svalue

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt2Unsigned

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.uvalue

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bv2int

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

DCOLONEQ
::=

ID_UPPER
Int2MInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.integer

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
int2bv

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
sminMInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

ID_LOWER
smaxMInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

ID_LOWER
uminMInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

ID_LOWER
umaxMInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

KW_RULE
rule

BUBBLE
sminMInt(N:Int) => 0 -Int (1 <<Int (N -Int 1))

KW_RULE
rule

BUBBLE
smaxMInt(N:Int) => (1 <<Int (N -Int 1)) -Int 1

KW_RULE
rule

BUBBLE
uminMInt(_:Int) => 0

KW_RULE
rule

BUBBLE
umaxMInt(N:Int) => (1 <<Int N) -Int 1

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_LOWER
soverflowMInt

LPAREN
(

ID_LOWER
width

COLON
:

ID_UPPER
Int

COMMA
,

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

ID_LOWER
uoverflowMInt

LPAREN
(

ID_LOWER
width

COLON
:

ID_UPPER
Int

COMMA
,

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

KW_RULE
rule

BUBBLE
soverflowMInt(N:Int, I:Int)
  =>
    I <Int sminMInt(N) orBool I >Int smaxMInt(N)

KW_RULE
rule

BUBBLE
uoverflowMInt(N:Int, I:Int)
  =>
    I <Int uminMInt(N) orBool I >Int umaxMInt(N)

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

DCOLONEQ
::=

STRING
"~MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.not

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvnot

RPAREN
)

RBRACK
]

VBAR
|

STRING
"--MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.neg

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvuminus

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"*MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.mul

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvmul

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"/sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.sdiv

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsdiv

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"%sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.srem

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsrem

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"/uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.udiv

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvudiv

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"%uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.urem

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvurem

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"+MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.add

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvadd

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"-MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.sub

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsub

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"<<MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.shl

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvshl

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">>aMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.ashr

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvashr

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">>lMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.lshr

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvlshr

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"&MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.and

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvand

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"xorMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.xor

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvxor

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"|MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.or

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvor

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"<sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.slt

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvslt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"<uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.ult

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvult

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"<=sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.sle

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsle

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"<=uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.ule

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvule

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.sgt

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsgt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.ugt

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvugt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">=sMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.sge

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvsge

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
">=uMInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.uge

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
bvuge

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"==MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.eq

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
=

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

STRING
"=/=MInt"

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.ne

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
distinct

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

DCOLONEQ
::=

ID_LOWER
sMaxMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

COMMA
,

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.smax

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (bvslt #1 #2) #2 #1)

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
sMinMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

COMMA
,

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.smin

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (bvslt #1 #2) #1 #2)

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
uMaxMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

COMMA
,

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.umax

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (bvult #1 #2) #2 #1)

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
uMinMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

COMMA
,

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.umin

RPAREN
)

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (bvult #1 #2) #1 #2)

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Width1

COMMA
,

ID_UPPER
Width2

RBRACE
}

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width1

RBRACE
}

DCOLONEQ
::=

ID_LOWER
roundMInt

LPAREN
(

ID_UPPER
MInt

LBRACE
{

ID_UPPER
Width2

RBRACE
}

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
MINT.round

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

EOF


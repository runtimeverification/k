name: 'Release'
on:
  pull_request:
    types: [opened, edited, reopened, synchronize]
    branches:
      - 'develop'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  source-tarball:
    name: 'Create source tarball'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 'Create source tarball'
        env:
          GITHUB_TOKEN: ${{ secrets.JENKINS_GITHUB_PAT }}
        run: |
          set -x
          tarball=kframework-src.tar.gz
          find . -name .git | xargs rm -r
          CURDIR=$(pwd)
          cd ..
          tar czvf ${tarball} $(basename ${CURDIR})
          cd -
          mv ../${tarball} .
      - name: 'Upload tarball artifact'
        uses: actions/upload-artifact@v4
        with:
          name: kframework-src.tar.gz
          path: kframework-src.tar.gz
          if-no-files-found: error
          retention-days: 1

  macos-build:
    name: 'Build MacOS Package'
    runs-on: macos-14
    timeout-minutes: 120
    needs: [source-tarball]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: kframework

      - name: Check out matching homebrew repo branch
        uses: actions/checkout@v4
        id: checkout
        with:
          repository: runtimeverification/homebrew-k
          path: homebrew-k
          ref: staging
        continue-on-error: true

      - name: Check out homebrew repo master branch
        uses: actions/checkout@v4
        if: ${{ steps.checkout.outcome == 'failure' }}
        with:
          repository: runtimeverification/homebrew-k
          path: homebrew-k

      - name: Cache maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Mac Dependencies
        run: |
          # Via: https://github.com/ledger/ledger/commit/1eec9f86667cad3b0bbafb82a83739a0d30ca09f
          # Unlink and re-link to prevent errors when github mac runner images
          # install python outside of brew, for example:
          # https://github.com/orgs/Homebrew/discussions/3895
          # https://github.com/actions/setup-python/issues/577
          # https://github.com/actions/runner-images/issues/6459
          # https://github.com/actions/runner-images/issues/6507
          # https://github.com/actions/runner-images/issues/2322
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done

      - name: 'Download K package from the Summary Page'
        uses: actions/download-artifact@v4
        with:
          name: kframework-src.tar.gz

      - name: Build brew bottle
        id: build
        env:
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
          MAVEN_OPTS: >-
              -Dhttp.keepAlive=false
              -Dmaven.wagon.http.pool=false
              -Dmaven.wagon.httpconnectionManager.ttlSeconds=30
        run: |
          PACKAGE=kframework
          VERSION=$(cat kframework/package/version)
          ROOT_URL='https://github.com/runtimeverification/k/releases/download'
          # wget "$ROOT_URL/v${VERSION}/kframework-${VERSION}-src.tar.gz"
          mv kframework-src.tar.gz "kframework-${VERSION}-src.tar.gz"
          cd homebrew-k
          ../kframework/package/macos/brew-update-to-local ${PACKAGE} ${VERSION}
          git commit Formula/$PACKAGE.rb -m "Update ${PACKAGE} to ${VERSION}: part 1"
          ../kframework/package/macos/brew-build-and-update-to-local-bottle ${PACKAGE} ${VERSION} ${ROOT_URL}
          git reset HEAD^
          LOCAL_BOTTLE_NAME=$(basename $(find . -name "kframework--${VERSION}.arm64_sonoma.bottle*.tar.gz"))
          BOTTLE_NAME=$(echo ${LOCAL_BOTTLE_NAME#./} | sed 's!kframework--!kframework-!')
          ../kframework/package/macos/brew-update-to-final ${PACKAGE} ${VERSION} ${ROOT_URL}
          echo "path=${LOCAL_BOTTLE_NAME}" >> ${GITHUB_OUTPUT}
          echo "path_remote=${BOTTLE_NAME}" >> ${GITHUB_OUTPUT}
          echo "version=${VERSION}" >> ${GITHUB_OUTPUT}

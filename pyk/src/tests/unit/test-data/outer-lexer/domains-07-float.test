module FLOAT-SYNTAX
  syntax Float [hook(FLOAT.Float)]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [token, prec(1)]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [token, prec(3)]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [token, prec(3)]
endmodule


module FLOAT
  imports FLOAT-SYNTAX
  imports private BOOL
  imports private INT-SYNTAX

  syntax Int ::= precisionFloat(Float) [function, total, hook(FLOAT.precision)]

  syntax Int ::= exponentBitsFloat(Float) [function, total, hook(FLOAT.exponentBits)]

  syntax Int ::= exponentFloat(Float) [function, total, hook(FLOAT.exponent)]

  syntax Bool ::= signFloat(Float)      [function, total, hook(FLOAT.sign)]

  syntax Bool ::= isNaN(Float)          [function, total, smt-hook(fp.isNaN), hook(FLOAT.isNaN)]
                | isInfinite(Float)     [function, total]

  syntax Float ::= "--Float" Float             [function, total, smt-hook(fp.neg), hook(FLOAT.neg)]
                 > Float "^Float" Float        [function, left, latex({#1}^{#2}), hook(FLOAT.pow)]
                 > left:
                   Float "*Float" Float        [function, left, smt-hook((fp.mul roundNearestTiesToEven #1 #2)), latex({#1}\mathrel{\ast_{\scriptstyle\it Float}}{#2}), hook(FLOAT.mul)]
                 | Float "/Float" Float        [function, left, smt-hook((fp.div roundNearestTiesToEven #1 #2)), latex({#1}\mathrel{\div_{\scriptstyle\it Float}}{#2}), hook(FLOAT.div)]
                 | Float "%Float" Float        [function, left, smt-hook((fp.rem roundNearestTiesToEven #1 #2)), latex({#1}\mathrel{\%_{\scriptstyle\it Float}}{#2}), hook(FLOAT.rem)]
                 > left:
                   Float "+Float" Float        [function, left, smt-hook((fp.add roundNearestTiesToEven #1 #2)), latex({#1}\mathrel{+_{\scriptstyle\it Float}}{#2}), hook(FLOAT.add)]
                 | Float "-Float" Float        [function, left, smt-hook((fp.sub roundNearestTiesToEven #1 #2)), latex({#1}\mathrel{-_{\scriptstyle\it Float}}{#2}), hook(FLOAT.sub)]

  syntax Float ::= rootFloat(Float, Int)        [function, hook(FLOAT.root)]
                 | absFloat(Float)              [function, total, smt-hook(fp.abs), hook(FLOAT.abs)]
                 | roundFloat(Float, precision: Int, exponentBits: Int)  [function, hook(FLOAT.round)]
                 | floorFloat(Float)            [function, total, hook(FLOAT.floor)]
                 | ceilFloat(Float)             [function, total, hook(FLOAT.ceil)]
                 | truncFloat(Float)            [function, total, hook(FLOAT.trunc)]
                 | expFloat(Float)              [function, total, hook(FLOAT.exp)]
                 | logFloat(Float)              [function, hook(FLOAT.log)]
                 | sinFloat(Float)              [function, total, hook(FLOAT.sin)]
                 | cosFloat(Float)              [function, total, hook(FLOAT.cos)]
                 | tanFloat(Float)              [function, hook(FLOAT.tan)]
                 | asinFloat(Float)             [function, hook(FLOAT.asin)]
                 | acosFloat(Float)             [function, hook(FLOAT.acos)]
                 | atanFloat(Float)             [function, total, hook(FLOAT.atan)]
                 | atan2Float(Float, Float)     [function, hook(FLOAT.atan2)]
                 | maxFloat(Float, Float)       [function, smt-hook(fp.max), hook(FLOAT.max)]
                 | minFloat(Float, Float)       [function, smt-hook(fp.min), hook(FLOAT.min)]
                 | sqrtFloat(Float)             [function]
                 | maxValueFloat(precision: Int, exponentBits: Int)      [function, hook(FLOAT.maxValue)]
                 | minValueFloat(precision: Int, exponentBits: Int)      [function, hook(FLOAT.minValue)]

  syntax Bool ::= Float "<=Float" Float       [function, smt-hook(fp.leq), latex({#1}\mathrel{\leq_{\scriptstyle\it Float}}{#2}), hook(FLOAT.le)]
                | Float "<Float" Float        [function, smt-hook(fp.lt), latex({#1}\mathrel{<_{\scriptstyle\it Float}}{#2}), hook(FLOAT.lt)]
                | Float ">=Float" Float       [function, smt-hook(fp.geq), latex({#1}\mathrel{\geq_{\scriptstyle\it Float}}{#2}), hook(FLOAT.ge)]
                | Float ">Float" Float        [function, smt-hook(fg.gt), latex({#1}\mathrel{>_{\scriptstyle\it Float}}{#2}), hook(FLOAT.gt)]
                | Float "==Float" Float       [function, comm, smt-hook(fp.eq), latex({#1}\mathrel{==_{\scriptstyle\it Float}}{#2}), hook(FLOAT.eq), klabel(_==Float_)]
                | Float "=/=Float" Float      [function, comm, smt-hook((not (fp.eq #1 #2))), latex({#1}\mathrel{\neq_{\scriptstyle\it Float}}{#2})]

  rule F1:Float =/=Float F2:Float => notBool (F1 ==Float F2)

  syntax Float ::= Int2Float(Int, precision: Int, exponentBits: Int)    [function, latex({\\it{}Int2Float}), hook(FLOAT.int2float)]
  syntax Int ::= Float2Int(Float)    [function, total, latex({\\it{}Float2Int}), hook(FLOAT.float2int)]

  rule sqrtFloat(F:Float) => rootFloat(F, 2)

  rule isInfinite(F:Float) => F >Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F)) orBool F <Float --Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F))

endmodule
===
KW_MODULE
module

MODNAME
FLOAT-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Float

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.Float

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

REGEX
r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?"

LBRACK
[

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
1

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

REGEX
r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?"

LBRACK
[

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
3

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

REGEX
r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?"

LBRACK
[

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
3

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
FLOAT

KW_IMPORTS
imports

MODNAME
FLOAT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
precisionFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.precision

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
exponentBitsFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.exponentBits

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
exponentFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.exponent

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_LOWER
signFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.sign

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_LOWER
isNaN

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.isNaN

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.isNaN

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
isInfinite

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

STRING
"--Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.neg

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.neg

RPAREN
)

RBRACK
]

GT
>

ID_UPPER
Float

STRING
"^Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}^{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.pow

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Float

STRING
"*Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(fp.mul roundNearestTiesToEven #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\ast_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.mul

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"/Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(fp.div roundNearestTiesToEven #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\div_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.div

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"%Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(fp.rem roundNearestTiesToEven #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\%_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.rem

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Float

STRING
"+Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(fp.add roundNearestTiesToEven #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{+_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.add

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"-Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(fp.sub roundNearestTiesToEven #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{-_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.sub

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

ID_LOWER
rootFloat

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.root

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
absFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.abs

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.abs

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
roundFloat

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_LOWER
precision

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
exponentBits

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.round

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
floorFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.floor

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
ceilFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.ceil

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
truncFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.trunc

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
expFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.exp

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
logFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.log

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
sinFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.sin

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
cosFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.cos

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
tanFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.tan

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
asinFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.asin

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
acosFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.acos

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
atanFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.atan

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
atan2Float

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.atan2

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
maxFloat

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.max

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.max

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
minFloat

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.min

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.min

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
sqrtFloat

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

ID_LOWER
maxValueFloat

LPAREN
(

ID_LOWER
precision

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
exponentBits

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.maxValue

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
minValueFloat

LPAREN
(

ID_LOWER
precision

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
exponentBits

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.minValue

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Float

STRING
"<=Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.leq

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\leq_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.le

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"<Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.lt

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{<_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.lt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
">=Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.geq

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\geq_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.ge

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
">Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fg.gt

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{>_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.gt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"==Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
fp.eq

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{==_{\scriptstyle\it Float}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.eq

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_==Float_

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Float

STRING
"=/=Float"

ID_UPPER
Float

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(not (fp.eq #1 #2))

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\neq_{\scriptstyle\it Float}}{#2}

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
F1:Float =/=Float F2:Float => notBool (F1 ==Float F2)

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

ID_UPPER
Int2Float

LPAREN
(

ID_UPPER
Int

COMMA
,

ID_LOWER
precision

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
exponentBits

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{\\it{}Int2Float}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.int2float

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
Float2Int

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{\\it{}Float2Int}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
FLOAT.float2int

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
sqrtFloat(F:Float) => rootFloat(F, 2)

KW_RULE
rule

BUBBLE
isInfinite(F:Float) => F >Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F)) orBool F <Float --Float maxValueFloat(precisionFloat(F), exponentBitsFloat(F))

KW_ENDMODULE
endmodule

EOF


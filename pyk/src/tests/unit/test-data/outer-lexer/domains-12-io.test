module K-IO
  imports private LIST
  imports private STRING
  imports private INT

  syntax IOError ::= "#EOF" [klabel(#EOF), symbol] | #unknownIOError(errno: Int) [symbol]
                   | "#E2BIG" [klabel(#E2BIG), symbol]
                   | "#EACCES" [klabel(#EACCES), symbol]
                   | "#EAGAIN" [klabel(#EAGAIN), symbol]
                   | "#EBADF" [klabel(#EBADF), symbol]
                   | "#EBUSY" [klabel(#EBUSY), symbol]
                   | "#ECHILD" [klabel(#ECHILD), symbol]
                   | "#EDEADLK" [klabel(#EDEADLK), symbol]
                   | "#EDOM" [klabel(#EDOM), symbol]
                   | "#EEXIST" [klabel(#EEXIST), symbol]
                   | "#EFAULT" [klabel(#EFAULT), symbol]
                   | "#EFBIG" [klabel(#EFBIG), symbol]
                   | "#EINTR" [klabel(#EINTR), symbol]
                   | "#EINVAL" [klabel(#EINVAL), symbol]
                   | "#EIO" [klabel(#EIO), symbol]
                   | "#EISDIR" [klabel(#EISDIR), symbol]
                   | "#EMFILE" [klabel(#EMFILE), symbol]
                   | "#EMLINK" [klabel(#EMLINK), symbol]
                   | "#ENAMETOOLONG" [klabel(#ENAMETOOLONG), symbol]
                   | "#ENFILE" [klabel(#ENFILE), symbol]
                   | "#ENODEV" [klabel(#ENODEV), symbol]
                   | "#ENOENT" [klabel(#ENOENT), symbol]
                   | "#ENOEXEC" [klabel(#ENOEXEC), symbol]
                   | "#ENOLCK" [klabel(#ENOLCK), symbol]
                   | "#ENOMEM" [klabel(#ENOMEM), symbol]
                   | "#ENOSPC" [klabel(#ENOSPC), symbol]
                   | "#ENOSYS" [klabel(#ENOSYS), symbol]
                   | "#ENOTDIR" [klabel(#ENOTDIR), symbol]
                   | "#ENOTEMPTY" [klabel(#ENOTEMPTY), symbol]
                   | "#ENOTTY" [klabel(#ENOTTY), symbol]
                   | "#ENXIO" [klabel(#ENXIO), symbol]
                   | "#EPERM" [klabel(#EPERM), symbol]
                   | "#EPIPE" [klabel(#EPIPE), symbol]
                   | "#ERANGE" [klabel(#ERANGE), symbol]
                   | "#EROFS" [klabel(#EROFS), symbol]
                   | "#ESPIPE" [klabel(#ESPIPE), symbol]
                   | "#ESRCH" [klabel(#ESRCH), symbol]
                   | "#EXDEV" [klabel(#EXDEV), symbol]
                   | "#EWOULDBLOCK" [klabel(#EWOULDBLOCK), symbol]
                   | "#EINPROGRESS" [klabel(#EINPROGRESS), symbol]
                   | "#EALREADY" [klabel(#EALREADY), symbol]
                   | "#ENOTSOCK" [klabel(#ENOTSOCK), symbol]
                   | "#EDESTADDRREQ" [klabel(#EDESTADDRREQ), symbol]
                   | "#EMSGSIZE" [klabel(#EMSGSIZE), symbol]
                   | "#EPROTOTYPE" [klabel(#EPROTOTYPE), symbol]
                   | "#ENOPROTOOPT" [klabel(#ENOPROTOOPT), symbol]
                   | "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT), symbol]
                   | "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT), symbol]
                   | "#EOPNOTSUPP" [klabel(#EOPNOTSUPP), symbol]
                   | "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT), symbol]
                   | "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT), symbol]
                   | "#EADDRINUSE" [klabel(#EADDRINUSE), symbol]
                   | "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL), symbol]
                   | "#ENETDOWN" [klabel(#ENETDOWN), symbol]
                   | "#ENETUNREACH" [klabel(#ENETUNREACH), symbol]
                   | "#ENETRESET" [klabel(#ENETRESET), symbol]
                   | "#ECONNABORTED" [klabel(#ECONNABORTED), symbol]
                   | "#ECONNRESET" [klabel(#ECONNRESET), symbol]
                   | "#ENOBUFS" [klabel(#ENOBUFS), symbol]
                   | "#EISCONN" [klabel(#EISCONN), symbol]
                   | "#ENOTCONN" [klabel(#ENOTCONN), symbol]
                   | "#ESHUTDOWN" [klabel(#ESHUTDOWN), symbol]
                   | "#ETOOMANYREFS" [klabel(#ETOOMANYREFS), symbol]
                   | "#ETIMEDOUT" [klabel(#ETIMEDOUT), symbol]
                   | "#ECONNREFUSED" [klabel(#ECONNREFUSED), symbol]
                   | "#EHOSTDOWN" [klabel(#EHOSTDOWN), symbol]
                   | "#EHOSTUNREACH" [klabel(#EHOSTUNREACH), symbol]
                   | "#ELOOP" [klabel(#ELOOP), symbol]
                   | "#EOVERFLOW" [klabel(#EOVERFLOW), symbol]

  syntax IOInt ::= Int | IOError
  syntax IOString ::= String | IOError

  syntax IOInt ::= "#open" "(" path: String ")" [function]
               | "#open" "(" path: String "," mode: String ")" [function, hook(IO.open), impure]

  rule #open(S:String) => #open(S:String, "r+")

  syntax IOInt ::= "#tell" "(" fd: Int ")" [function, hook(IO.tell), impure]
  syntax K ::= "#seek" "(" fd: Int "," index: Int ")" [function, hook(IO.seek), impure]
             | "#seekEnd" "(" fd: Int "," fromEnd: Int ")" [function, hook(IO.seekEnd), impure]

  syntax IOInt ::= "#getc" "(" fd: Int ")"             [function, hook(IO.getc), impure]
  syntax IOString ::= "#read" "(" fd: Int "," length: Int ")"    [function, hook(IO.read), impure]

  syntax K ::= "#putc" "(" fd: Int "," value: Int ")"      [function, hook(IO.putc), impure]
             | "#write" "(" fd: Int "," value: String ")" [function, hook(IO.write), impure]

  syntax K ::= "#close" "(" fd: Int ")" [function, hook(IO.close), impure]

  syntax K ::= "#lock" "(" fd: Int "," endIndex: Int ")" [function, hook(IO.lock), impure]
             | "#unlock" "(" fd: Int "," endIndex: Int ")" [function, hook(IO.unlock), impure]

  syntax IOInt ::= "#accept" "(" fd: Int ")" [function, hook(IO.accept), impure]
  syntax K ::= "#shutdownWrite" "(" fd: Int ")" [function, hook(IO.shutdownWrite), impure]

  syntax Int ::= "#time" "(" ")" [function, hook(IO.time), impure]
  syntax Int ::= "#stdin"   [function, total]
                | "#stdout" [function, total]
                | "#stderr" [function, total]

  rule #stdin => 0
  rule #stdout => 1
  rule #stderr => 2

  syntax KItem ::= #system ( String ) [function, hook(IO.system), impure]
                 | "#systemResult" "(" Int /* exit code */ "," String /* stdout */ "," String /* stderr */ ")" [klabel(#systemResult), symbol]

  syntax IOFile ::= #mkstemp(template: String) [function, hook(IO.mkstemp), impure]
  syntax IOFile ::= IOError
                  | "#tempFile" "(" path: String "," fd: Int ")" [klabel(#tempFile), symbol]

  syntax K ::= #remove(path: String) [function, total, hook(IO.remove), impure]

  syntax K ::= #logToFile(name: String, value: String) [function, total, hook(IO.log), impure, returnsUnit, symbol]
  syntax K ::= #log(value: String) [function, total, hook(IO.logString), impure, returnsUnit, symbol]

  syntax K ::= #trace(value: KItem) [function, total, hook(IO.traceTerm), impure, returnsUnit, symbol]
             | #traceK(value: K)    [function, total, hook(IO.traceTerm), impure, returnsUnit, symbol]

  syntax Stream ::= #buffer(K)
                  | #istream(Int)
                  | #parseInput(String, String)
                  | #ostream(Int)

endmodule

// NOTE: DO NOT DIRECTLY IMPORT *-STREAM MODULES
// These stream modules will be automatically instantiated and implicitly imported
// into the main module when `stream` attributes appear in configuration cells.
// Only `Stream` productions and `[stream]` rules will be imported.
// The cell name will be replaced with the one of the main configuration.

module STDIN-STREAM
  imports K-IO
  imports K-REFLECTION
  imports LIST
  imports INT
  imports BOOL

  configuration <stdin> ListItem(#buffer($STDIN:String)) ListItem($IO:String) ListItem(#istream(#stdin)) </stdin>

  // read one character at a time until we read whitespace
  rule [stdinGetc]:
       <stdin>
       ListItem(#parseInput(_:String, Delimiters:String))
       ListItem(#buffer(S:String => S +String chrChar({#getc(N)}:>Int)))
       ListItem("on")
       ListItem(#istream(N:Int))
       </stdin>
    requires findChar(S, Delimiters, 0) ==Int -1 // [stdin]
       [stream, priority(200)]

  // when we reach whitespace, if it parses create a ListItem
  rule [stdinParseString]:
       <stdin>
       (ListItem(#parseInput("String", Delimiters:String)) => ListItem(S))
       ListItem(#buffer(S:String => ""))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1 // [stdin]
       [stream]

  // a hack: handle the case when we read integers without the help of the IO server
  rule [stdinParseInt]:
       <stdin>
       (ListItem(#parseInput("Int", Delimiters:String))
       => ListItem(String2Int(substrString(S, 0, findChar(S, Delimiters, 0)))))
       ListItem(#buffer(S:String => substrString(S,findChar(S, Delimiters, 0) +Int 1, lengthString(S))))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1
       andBool lengthString(S) >Int 1 // [stdin]
       [stream]

  rule [stdinTrim]:
       <stdin>
       ListItem(#parseInput(Sort:String, Delimiters:String))
       ListItem(#buffer(S:String => substrString(S, 1, lengthString(S))))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1
       andBool Sort =/=String "String"
       andBool lengthString(S) <=Int 1 // [stdin]
       [stream]

  // NOTE: This unblocking rule will be instantiated and inserted carefully
  // when necessary according to user-defined rules, since otherwise it will
  // lead to a diverging (i.e., non-terminating) transition system definition.
  // Currently, it supports only a simple pattern matching on the top of the
  // input stream cell, e.g.,
  //   rule <k> read() => V ... </k> <in> ListItem(V:Int) => .List ...  </in>
  // Non-supported rules that refer to the input stream cell in a sophisticated
  // way will get stuck in concrete execution mode with real IO enabled (i.e.,
  // under `--io on` option), while they will still work in symbolic execution
  // mode or concrete execution mode with real IO disabled (i.e., under `--io
  // off`, `--search`, or `--debug` options).
  //
  // TODO: More patterns need to be supported as well. In that case, we need to
  // have a way to specify such patterns.
  rule [stdinUnblock]:
       <stdin>
         (.List => ListItem(#parseInput(?Sort:String, ?Delimiters:String)))
         ListItem(#buffer(_:String))
         ...
       </stdin>
       [unblock]

  /*
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(_))
       (ListItem(#noIO) ListItem(#istream(_:Int)) => .List) [stdin]
  */

endmodule


module STDOUT-STREAM
  imports K-IO
  imports LIST
  imports STRING

  configuration <stdout> ListItem(#ostream(#stdout)) ListItem($IO:String) ListItem(#buffer("")) </stdout>
//configuration <stderr> ListItem(#ostream(#stderr)) ListItem($IO:String) ListItem(#buffer("")) </stderr>

  rule [stdoutBufferFloat]:
       <stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String Float2String(F)))
       (ListItem(F:Float) => .List)
       _:List
       </stdout>
       // [stdout, stderr]
       [stream, priority(25)]
  rule [stdoutBufferInt]:
       <stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String Int2String(I)))
       (ListItem(I:Int) => .List)
       _:List
       </stdout>
       // [stdout, stderr]
       [stream, priority(25)]
  rule [stdoutBufferString]:
       <stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String S))
       (ListItem(S:String) => .List)
       _:List
       </stdout>
       // [stdout, stderr]
       [stream, priority(25)]

  // Send first char from the buffer to the server
  rule [stdoutWrite]:
       <stdout>
       ListItem(#ostream(N:Int => {#write(N, S) ~> N:Int}:>Int))
       ListItem("on")
       ListItem(#buffer(S:String => ""))
       _:List
       </stdout>
    requires S =/=String "" // [stdout, stderr]
       [stream, priority(30)]

  /*
  syntax Stream ::= "#noIO"

  rule ListItem(#buffer(Buffer:String => Buffer +String Float2String(F)))
       (ListItem(F:Float) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String Int2String(I)))
       (ListItem(I:Int) => .List)
       _:List [stdout, stderr]
  rule ListItem(#buffer(Buffer:String => Buffer +String S))
       (ListItem(S:String) => .List)
       _:List [stdout, stderr]

  rule (ListItem(#ostream(_:Int)) ListItem(#noIO) => .List)
       ListItem(#buffer(_))
       _:List [stdout, stderr]
  */

endmodule
===
KW_MODULE
module

MODNAME
K-IO

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
LIST

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
STRING

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_SYNTAX
syntax

ID_UPPER
IOError

DCOLONEQ
::=

STRING
"#EOF"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EOF

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

ID_LOWER
#unknownIOError

LPAREN
(

ID_LOWER
errno

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#E2BIG"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#E2BIG

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EACCES"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EACCES

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EAGAIN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EAGAIN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EBADF"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EBADF

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EBUSY"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EBUSY

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ECHILD"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ECHILD

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EDEADLK"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EDEADLK

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EDOM"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EDOM

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EEXIST"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EEXIST

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EFAULT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EFAULT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EFBIG"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EFBIG

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EINTR"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EINTR

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EINVAL"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EINVAL

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EIO"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EIO

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EISDIR"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EISDIR

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EMFILE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EMFILE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EMLINK"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EMLINK

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENAMETOOLONG"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENAMETOOLONG

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENFILE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENFILE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENODEV"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENODEV

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOENT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOENT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOEXEC"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOEXEC

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOLCK"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOLCK

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOMEM"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOMEM

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOSPC"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOSPC

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOSYS"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOSYS

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOTDIR"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOTDIR

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOTEMPTY"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOTEMPTY

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOTTY"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOTTY

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENXIO"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENXIO

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EPERM"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EPERM

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EPIPE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EPIPE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ERANGE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ERANGE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EROFS"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EROFS

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ESPIPE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ESPIPE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ESRCH"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ESRCH

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EXDEV"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EXDEV

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EWOULDBLOCK"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EWOULDBLOCK

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EINPROGRESS"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EINPROGRESS

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EALREADY"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EALREADY

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOTSOCK"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOTSOCK

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EDESTADDRREQ"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EDESTADDRREQ

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EMSGSIZE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EMSGSIZE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EPROTOTYPE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EPROTOTYPE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOPROTOOPT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOPROTOOPT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EPROTONOSUPPORT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EPROTONOSUPPORT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ESOCKTNOSUPPORT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ESOCKTNOSUPPORT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EOPNOTSUPP"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EOPNOTSUPP

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EPFNOSUPPORT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EPFNOSUPPORT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EAFNOSUPPORT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EAFNOSUPPORT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EADDRINUSE"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EADDRINUSE

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EADDRNOTAVAIL"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EADDRNOTAVAIL

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENETDOWN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENETDOWN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENETUNREACH"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENETUNREACH

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENETRESET"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENETRESET

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ECONNABORTED"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ECONNABORTED

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ECONNRESET"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ECONNRESET

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOBUFS"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOBUFS

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EISCONN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EISCONN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ENOTCONN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ENOTCONN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ESHUTDOWN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ESHUTDOWN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ETOOMANYREFS"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ETOOMANYREFS

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ETIMEDOUT"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ETIMEDOUT

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ECONNREFUSED"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ECONNREFUSED

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EHOSTDOWN"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EHOSTDOWN

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EHOSTUNREACH"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EHOSTUNREACH

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#ELOOP"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#ELOOP

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"#EOVERFLOW"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#EOVERFLOW

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOInt

DCOLONEQ
::=

ID_UPPER
Int

VBAR
|

ID_UPPER
IOError

KW_SYNTAX
syntax

ID_UPPER
IOString

DCOLONEQ
::=

ID_UPPER
String

VBAR
|

ID_UPPER
IOError

KW_SYNTAX
syntax

ID_UPPER
IOInt

DCOLONEQ
::=

STRING
"#open"

STRING
"("

ID_LOWER
path

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

RBRACK
]

VBAR
|

STRING
"#open"

STRING
"("

ID_LOWER
path

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
mode

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.open

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_RULE
rule

BUBBLE
#open(S:String) => #open(S:String, "r+")

KW_SYNTAX
syntax

ID_UPPER
IOInt

DCOLONEQ
::=

STRING
"#tell"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.tell

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#seek"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
index

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.seek

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

VBAR
|

STRING
"#seekEnd"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
fromEnd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.seekEnd

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOInt

DCOLONEQ
::=

STRING
"#getc"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.getc

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOString

DCOLONEQ
::=

STRING
"#read"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
length

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.read

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#putc"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
value

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.putc

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

VBAR
|

STRING
"#write"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
value

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.write

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#close"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.close

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#lock"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
endIndex

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.lock

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

VBAR
|

STRING
"#unlock"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
","

ID_LOWER
endIndex

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.unlock

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOInt

DCOLONEQ
::=

STRING
"#accept"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.accept

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#shutdownWrite"

STRING
"("

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.shutdownWrite

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

STRING
"#time"

STRING
"("

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.time

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

STRING
"#stdin"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

VBAR
|

STRING
"#stdout"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

VBAR
|

STRING
"#stderr"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

KW_RULE
rule

BUBBLE
#stdin => 0

KW_RULE
rule

BUBBLE
#stdout => 1

KW_RULE
rule

BUBBLE
#stderr => 2

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
#system

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.system

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

VBAR
|

STRING
"#systemResult"

STRING
"("

ID_UPPER
Int

STRING
","

ID_UPPER
String

STRING
","

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#systemResult

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOFile

DCOLONEQ
::=

ID_LOWER
#mkstemp

LPAREN
(

ID_LOWER
template

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.mkstemp

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOFile

DCOLONEQ
::=

ID_UPPER
IOError

VBAR
|

STRING
"#tempFile"

STRING
"("

ID_LOWER
path

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
fd

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#tempFile

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
#remove

LPAREN
(

ID_LOWER
path

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.remove

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
#logToFile

LPAREN
(

ID_LOWER
name

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
value

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.log

RPAREN
)

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
returnsUnit

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
#log

LPAREN
(

ID_LOWER
value

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.logString

RPAREN
)

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
returnsUnit

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
#trace

LPAREN
(

ID_LOWER
value

COLON
:

ID_UPPER
KItem

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.traceTerm

RPAREN
)

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
returnsUnit

COMMA
,

ATTR_KEY
symbol

RBRACK
]

VBAR
|

ID_LOWER
#traceK

LPAREN
(

ID_LOWER
value

COLON
:

ID_UPPER
K

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
IO.traceTerm

RPAREN
)

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
returnsUnit

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Stream

DCOLONEQ
::=

ID_LOWER
#buffer

LPAREN
(

ID_UPPER
K

RPAREN
)

VBAR
|

ID_LOWER
#istream

LPAREN
(

ID_UPPER
Int

RPAREN
)

VBAR
|

ID_LOWER
#parseInput

LPAREN
(

ID_UPPER
String

COMMA
,

ID_UPPER
String

RPAREN
)

VBAR
|

ID_LOWER
#ostream

LPAREN
(

ID_UPPER
Int

RPAREN
)

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STDIN-STREAM

KW_IMPORTS
imports

MODNAME
K-IO

KW_IMPORTS
imports

MODNAME
K-REFLECTION

KW_IMPORTS
imports

MODNAME
LIST

KW_IMPORTS
imports

MODNAME
INT

KW_IMPORTS
imports

MODNAME
BOOL

KW_CONFIG
configuration

BUBBLE
<stdin> ListItem(#buffer($STDIN:String)) ListItem($IO:String) ListItem(#istream(#stdin)) </stdin>

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdinGetc

RBRACK
]

COLON
:

BUBBLE
<stdin>
       ListItem(#parseInput(_:String, Delimiters:String))
       ListItem(#buffer(S:String => S +String chrChar({#getc(N)}:>Int)))
       ListItem("on")
       ListItem(#istream(N:Int))
       </stdin>
    requires findChar(S, Delimiters, 0) ==Int -1 // [stdin]

LBRACK
[

ATTR_KEY
stream

COMMA
,

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
200

RPAREN
)

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdinParseString

RBRACK
]

COLON
:

BUBBLE
<stdin>
       (ListItem(#parseInput("String", Delimiters:String)) => ListItem(S))
       ListItem(#buffer(S:String => ""))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1 // [stdin]

LBRACK
[

ATTR_KEY
stream

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdinParseInt

RBRACK
]

COLON
:

BUBBLE
<stdin>
       (ListItem(#parseInput("Int", Delimiters:String))
       => ListItem(String2Int(substrString(S, 0, findChar(S, Delimiters, 0)))))
       ListItem(#buffer(S:String => substrString(S,findChar(S, Delimiters, 0) +Int 1, lengthString(S))))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1
       andBool lengthString(S) >Int 1 // [stdin]

LBRACK
[

ATTR_KEY
stream

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdinTrim

RBRACK
]

COLON
:

BUBBLE
<stdin>
       ListItem(#parseInput(Sort:String, Delimiters:String))
       ListItem(#buffer(S:String => substrString(S, 1, lengthString(S))))
       _:List
       </stdin>
    requires findChar(S, Delimiters, 0) =/=Int -1
       andBool Sort =/=String "String"
       andBool lengthString(S) <=Int 1 // [stdin]

LBRACK
[

ATTR_KEY
stream

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdinUnblock

RBRACK
]

COLON
:

BUBBLE
<stdin>
         (.List => ListItem(#parseInput(?Sort:String, ?Delimiters:String)))
         ListItem(#buffer(_:String))
         ...
       </stdin>

LBRACK
[

ATTR_KEY
unblock

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STDOUT-STREAM

KW_IMPORTS
imports

MODNAME
K-IO

KW_IMPORTS
imports

MODNAME
LIST

KW_IMPORTS
imports

MODNAME
STRING

KW_CONFIG
configuration

BUBBLE
<stdout> ListItem(#ostream(#stdout)) ListItem($IO:String) ListItem(#buffer("")) </stdout>

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdoutBufferFloat

RBRACK
]

COLON
:

BUBBLE
<stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String Float2String(F)))
       (ListItem(F:Float) => .List)
       _:List
       </stdout>
       // [stdout, stderr]

LBRACK
[

ATTR_KEY
stream

COMMA
,

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
25

RPAREN
)

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdoutBufferInt

RBRACK
]

COLON
:

BUBBLE
<stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String Int2String(I)))
       (ListItem(I:Int) => .List)
       _:List
       </stdout>
       // [stdout, stderr]

LBRACK
[

ATTR_KEY
stream

COMMA
,

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
25

RPAREN
)

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdoutBufferString

RBRACK
]

COLON
:

BUBBLE
<stdout>
       ListItem(#ostream(_))
       ListItem(_)
       ListItem(#buffer(Buffer:String => Buffer +String S))
       (ListItem(S:String) => .List)
       _:List
       </stdout>
       // [stdout, stderr]

LBRACK
[

ATTR_KEY
stream

COMMA
,

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
25

RPAREN
)

RBRACK
]

KW_RULE
rule

LBRACK
[

RULE_LABEL
stdoutWrite

RBRACK
]

COLON
:

BUBBLE
<stdout>
       ListItem(#ostream(N:Int => {#write(N, S) ~> N:Int}:>Int))
       ListItem("on")
       ListItem(#buffer(S:String => ""))
       _:List
       </stdout>
    requires S =/=String "" // [stdout, stderr]

LBRACK
[

ATTR_KEY
stream

COMMA
,

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
30

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

EOF


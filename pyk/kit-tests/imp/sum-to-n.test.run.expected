+ init sum-to-n sum-to-n-spec.k
+ list-cfgs
SUM-TO-N-SPEC.main
+ split-node #init N ==Int 1 --alias-true init-1 --alias-false init-not-1
+ split-node @init-not-1 N ==Int 2 --alias-true init-2 --alias-false init-not-1-2
+ split-node @init-not-1-2 N ==Int 10 --alias-true init-10
+ show-edge @init-not-1-2,@init-10
91c88c..f061ad (expanded, @init-not-1-2)
│ N:Int ==Int 10
c4ad22..79ff4a (frontier, leaf, @init-10)

+ show-node @init-10
<generatedTop>
  <T>
    <k>
      int $n , $s , .Ids ; $n = N:Int ; $s = 0 ; while ( ! $n <= 0 ) { $s = $s + $n ; $n = $n + -1 ; }
    </k>
    <state>
      .Map
    </state>
  </T>
  ...
</generatedTop>
#And { true #Equals N:Int >=Int 0 }
#And { true #Equals N:Int ==Int 10 }
#And { true #Equals notBool ( N:Int ==Int 1 ) }
#And { true #Equals notBool ( N:Int ==Int 2 ) }
+ build-edges @init-1,#target
+ verify-edges --edges @init-1,#target
+ build-edges @init-10,#target
+ verify-edges --edges @init-10,#target
+ build-edges @init-2,@init-10
CRITICAL - Could not verify claim: BASIC-BLOCK-58f58f9aff5bf55a969e444a0df1f67fecc6e2b124bc40cb6acd16b17c25986d-TO-c4ad220dbd093f445dc7733196c226307f0391dd2dd7a783e330667e7a79ff4a

Prover output:

<generatedTop>
  <T>
    <k>
      int $s , .Ids ; $n = 2 ; $s = 0 ; while ( ! $n <= 0 ) { $s = $s + $n ; $n = $n + -1 ; }
    </k>
    <state>
      $n |-> 0
    </state>
  </T>
  ...
</generatedTop>
#And #Top.
+ show-cfg

┌  4f03b9..e100c3 (init, expanded)
│
┣━ 0566ac..c60853 (expanded, @init-1)    N:Int ==Int 1
┃   │
┃   │  [1m[32m(verified)[0m[0m
┃   │  (-1 steps)
┃   └  76b287..c61318 (target, leaf)
┃
┗━ d9ed37..e32051 (expanded, @init-not-1)    notBool ( N:Int ==Int 1 )
    │
    ┣━ 58f58f..25986d (expanded, @init-2)    N:Int ==Int 2
    ┃   │
    ┃   │  (-1 steps)
    ┃   ├  c4ad22..79ff4a (expanded, @init-10)
    ┃   │
    ┃   │  [1m[32m(verified)[0m[0m
    ┃   │  (-1 steps)
    ┃   └  76b287..c61318 (target, leaf)
    ┃
    ┗━ 91c88c..f061ad (expanded, @init-not-1-2)    notBool ( N:Int ==Int 2 )
        │
        ┣━ c4ad22..79ff4a (expanded, @init-10)    N:Int ==Int 10
        ┃   ┊
        ┃   └╌ (continues as previously)
        ┃
        ┗━ [1m3cf5c5..2a0dcb (frontier, leaf)[0m    notBool ( N:Int ==Int 10 )

module STRING-SYNTAX
  syntax String [hook(STRING.String)]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]"      [token]
endmodule


module STRING-COMMON
  imports STRING-SYNTAX
  imports private INT
  imports private FLOAT-SYNTAX
  imports private K-EQUAL
  imports private BOOL

  syntax String ::= String "+String" String    [function, total, left, latex({#1}+_{\scriptstyle\it String}{#2}), hook(STRING.concat)]

  syntax Int ::= lengthString ( String ) [function, total, hook(STRING.length)]

  syntax String ::= chrChar ( Int )      [function, hook(STRING.chr)]
  syntax Int ::= ordChar ( String )      [function, hook(STRING.ord)]

  syntax String ::= substrString ( String , startIndex: Int , endIndex: Int ) [function, total, hook(STRING.substr)]

  syntax Int ::= findString ( haystack: String , needle: String , index: Int )   [function, hook(STRING.find)]
  syntax Int ::= rfindString ( haystack: String , needle: String , index: Int )  [function, hook(STRING.rfind)]

  syntax Int ::= findChar ( haystack: String , needles: String , index: Int )     [function, hook(STRING.findChar)]
  syntax Int ::= rfindChar ( haystack: String , needles: String , index: Int )    [function, hook(STRING.rfindChar)]

  syntax String ::= Bool2String(Bool) [function, total]
  rule Bool2String(true)  => "true"
  rule Bool2String(false) => "false"

  syntax Bool ::= String2Bool(String) [function]
  rule String2Bool("true")  => true
  rule String2Bool("false") => false

  syntax String ::= Float2String ( Float )              [function, total, hook(STRING.float2string)]
  syntax String ::= Float2String ( Float , format: String )     [function, klabel(FloatFormat), hook(STRING.floatFormat)]
  syntax Float  ::= String2Float ( String )             [function, hook(STRING.string2float)]

  syntax Int    ::= String2Int   ( String )             [function, hook(STRING.string2int)]
  syntax String ::= Int2String   ( Int )                [function, total, hook(STRING.int2string)]
  syntax String ::= Base2String  ( Int , base: Int )          [function, hook(STRING.base2string)]
  syntax Int    ::= String2Base  ( String , base: Int )       [function, hook(STRING.string2base)]

  syntax String ::= "replaceAll" "(" haystack: String "," needle: String "," replacement: String ")"      [function, total, hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" haystack: String "," needle: String "," replacement: String "," times: Int ")" [function, hook(STRING.replace)]
  syntax String ::= "replaceFirst" "(" haystack: String "," needle: String "," replacement: String ")"    [function, total, hook(STRING.replaceFirst)]
  syntax Int ::= "countAllOccurrences" "(" haystack: String "," needle: String ")"            [function, total, hook(STRING.countAllOccurrences)]

  syntax Bool ::= String "==String" String  [function, total, comm, hook(STRING.eq)]
                | String "=/=String" String [function, total, comm, hook(STRING.ne)]
  rule S1:String =/=String S2:String => notBool (S1 ==String S2)

  syntax Bool ::= String  "<String" String [function, total, hook(STRING.lt)]
                | String "<=String" String [function, total, hook(STRING.le)]
                | String  ">String" String [function, total, hook(STRING.gt)]
                | String ">=String" String [function, total, hook(STRING.ge)]

  syntax String ::= categoryChar(String)       [function, hook(STRING.category)]
                  | directionalityChar(String) [function, hook(STRING.directionality)]

  syntax String ::= "newUUID" [function, hook(STRING.uuid), impure]

  rule S1:String <=String S2:String => notBool (S2 <String S1)
  rule S1:String >String S2:String => S2 <String S1
  rule S1:String >=String S2:String => notBool (S1 <String S2)

  rule findChar(S1:String, S2:String, I:Int) => #if findString(S1, substrString(S2, 0, 1), I) ==Int -1 #then findChar(S1, substrString(S2, 1, lengthString(S2)), I) #else #if findChar(S1, substrString(S2, 1, lengthString(S2)), I) ==Int -1 #then findString(S1, substrString(S2, 0, 1), I) #else minInt(findString(S1, substrString(S2, 0, 1), I), findChar(S1, substrString(S2, 1, lengthString(S2)), I)) #fi #fi requires S2 =/=String ""
  rule findChar(_, "", _) => -1
  rule rfindChar(S1:String, S2:String, I:Int) => maxInt(rfindString(S1, substrString(S2, 0, 1), I), rfindChar(S1, substrString(S2, 1, lengthString(S2)), I)) requires S2 =/=String ""
  rule rfindChar(_, "", _) => -1

  rule countAllOccurrences(Source:String, ToCount:String) => 0
            requires findString(Source, ToCount, 0) <Int 0
  rule countAllOccurrences(Source:String, ToCount:String) => 1 +Int countAllOccurrences(substrString(Source, findString(Source, ToCount, 0) +Int lengthString(ToCount), lengthString(Source)), ToCount)
            requires findString(Source, ToCount, 0) >=Int 0

  rule replaceFirst(Source:String, ToReplace:String, Replacement:String) => substrString(Source, 0, findString(Source, ToReplace, 0))
                +String Replacement +String substrString(Source, findString(Source, ToReplace, 0) +Int lengthString(ToReplace), lengthString(Source))
                requires findString(Source, ToReplace, 0) >=Int 0
  rule replaceFirst(Source:String, ToReplace:String, _:String) => Source
        requires findString(Source, ToReplace, 0) <Int 0


  rule replace(Source:String, ToReplace:String, Replacement:String, Count:Int) =>
       substrString(Source, 0, findString(Source, ToReplace, 0)) +String Replacement +String
       replace(substrString(Source, findString(Source, ToReplace, 0) +Int lengthString(ToReplace), lengthString(Source)), ToReplace, Replacement, Count -Int 1)
        requires Count >Int 0
  rule replace(Source:String, _, _, 0) => Source
  rule replaceAll(Source:String, ToReplace:String, Replacement:String) => replace(Source, ToReplace, Replacement, countAllOccurrences(Source, ToReplace))

endmodule


module STRING-KORE [kore, symbolic]
  imports private K-EQUAL
  imports STRING-COMMON

  rule S1:String ==K S2:String => S1 ==String S2 [simplification]

endmodule


module STRING
  imports STRING-COMMON
  imports STRING-KORE
endmodule


module STRING-BUFFER-IN-K [symbolic]
  imports private BASIC-K
  imports STRING

  syntax StringBuffer ::= ".StringBuffer" [function, total]
  syntax StringBuffer ::= StringBuffer "+String" String [function, total, avoid]
  syntax StringBuffer ::= String
  syntax String ::= StringBuffer2String ( StringBuffer ) [function, total]

  rule {SB:String +String S:String}<:StringBuffer => (SB +String S)::String
  rule .StringBuffer => ""
  rule StringBuffer2String(S:String) => S
endmodule


module STRING-BUFFER-HOOKED [concrete]
  imports private BASIC-K
  imports STRING

  syntax StringBuffer [hook(BUFFER.StringBuffer)]
  syntax StringBuffer ::= ".StringBuffer" [function, total, hook(BUFFER.empty), impure]
  syntax StringBuffer ::= StringBuffer "+String" String [function, total, hook(BUFFER.concat), avoid]
  syntax String ::= StringBuffer2String ( StringBuffer ) [function, total, hook(BUFFER.toString)]
endmodule


module STRING-BUFFER
  imports STRING-BUFFER-HOOKED
  imports STRING-BUFFER-IN-K
endmodule
===
KW_MODULE
module

MODNAME
STRING-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
String

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.String

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

REGEX
r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]"

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING-COMMON

KW_IMPORTS
imports

MODNAME
STRING-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
FLOAT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
String

STRING
"+String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}+_{\scriptstyle\it String}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.concat

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
lengthString

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.length

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
chrChar

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.chr

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
ordChar

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.ord

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
substrString

LPAREN
(

ID_UPPER
String

COMMA
,

ID_LOWER
startIndex

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
endIndex

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.substr

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
findString

LPAREN
(

ID_LOWER
haystack

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
needle

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.find

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
rfindString

LPAREN
(

ID_LOWER
haystack

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
needle

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.rfind

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
findChar

LPAREN
(

ID_LOWER
haystack

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
needles

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.findChar

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
rfindChar

LPAREN
(

ID_LOWER
haystack

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
needles

COLON
:

ID_UPPER
String

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.rfindChar

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Bool2String

LPAREN
(

ID_UPPER
Bool

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

KW_RULE
rule

BUBBLE
Bool2String(true)  => "true"

KW_RULE
rule

BUBBLE
Bool2String(false) => "false"

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
String2Bool

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

RBRACK
]

KW_RULE
rule

BUBBLE
String2Bool("true")  => true

KW_RULE
rule

BUBBLE
String2Bool("false") => false

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Float2String

LPAREN
(

ID_UPPER
Float

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.float2string

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Float2String

LPAREN
(

ID_UPPER
Float

COMMA
,

ID_LOWER
format

COLON
:

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
FloatFormat

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.floatFormat

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Float

DCOLONEQ
::=

ID_UPPER
String2Float

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.string2float

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
String2Int

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.string2int

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Int2String

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.int2string

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
Base2String

LPAREN
(

ID_UPPER
Int

COMMA
,

ID_LOWER
base

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.base2string

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_UPPER
String2Base

LPAREN
(

ID_UPPER
String

COMMA
,

ID_LOWER
base

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.string2base

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

STRING
"replaceAll"

STRING
"("

ID_LOWER
haystack

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
needle

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
replacement

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.replaceAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

STRING
"replace"

STRING
"("

ID_LOWER
haystack

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
needle

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
replacement

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
times

COLON
:

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.replace

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

STRING
"replaceFirst"

STRING
"("

ID_LOWER
haystack

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
needle

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
replacement

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.replaceFirst

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

STRING
"countAllOccurrences"

STRING
"("

ID_LOWER
haystack

COLON
:

ID_UPPER
String

STRING
","

ID_LOWER
needle

COLON
:

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.countAllOccurrences

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
String

STRING
"==String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.eq

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
String

STRING
"=/=String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.ne

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
S1:String =/=String S2:String => notBool (S1 ==String S2)

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
String

STRING
"<String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.lt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
String

STRING
"<=String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.le

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
String

STRING
">String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.gt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
String

STRING
">=String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.ge

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
categoryChar

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.category

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
directionalityChar

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.directionality

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

STRING
"newUUID"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
STRING.uuid

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_RULE
rule

BUBBLE
S1:String <=String S2:String => notBool (S2 <String S1)

KW_RULE
rule

BUBBLE
S1:String >String S2:String => S2 <String S1

KW_RULE
rule

BUBBLE
S1:String >=String S2:String => notBool (S1 <String S2)

KW_RULE
rule

BUBBLE
findChar(S1:String, S2:String, I:Int) => #if findString(S1, substrString(S2, 0, 1), I) ==Int -1 #then findChar(S1, substrString(S2, 1, lengthString(S2)), I) #else #if findChar(S1, substrString(S2, 1, lengthString(S2)), I) ==Int -1 #then findString(S1, substrString(S2, 0, 1), I) #else minInt(findString(S1, substrString(S2, 0, 1), I), findChar(S1, substrString(S2, 1, lengthString(S2)), I)) #fi #fi requires S2 =/=String ""

KW_RULE
rule

BUBBLE
findChar(_, "", _) => -1

KW_RULE
rule

BUBBLE
rfindChar(S1:String, S2:String, I:Int) => maxInt(rfindString(S1, substrString(S2, 0, 1), I), rfindChar(S1, substrString(S2, 1, lengthString(S2)), I)) requires S2 =/=String ""

KW_RULE
rule

BUBBLE
rfindChar(_, "", _) => -1

KW_RULE
rule

BUBBLE
countAllOccurrences(Source:String, ToCount:String) => 0
            requires findString(Source, ToCount, 0) <Int 0

KW_RULE
rule

BUBBLE
countAllOccurrences(Source:String, ToCount:String) => 1 +Int countAllOccurrences(substrString(Source, findString(Source, ToCount, 0) +Int lengthString(ToCount), lengthString(Source)), ToCount)
            requires findString(Source, ToCount, 0) >=Int 0

KW_RULE
rule

BUBBLE
replaceFirst(Source:String, ToReplace:String, Replacement:String) => substrString(Source, 0, findString(Source, ToReplace, 0))
                +String Replacement +String substrString(Source, findString(Source, ToReplace, 0) +Int lengthString(ToReplace), lengthString(Source))
                requires findString(Source, ToReplace, 0) >=Int 0

KW_RULE
rule

BUBBLE
replaceFirst(Source:String, ToReplace:String, _:String) => Source
        requires findString(Source, ToReplace, 0) <Int 0

KW_RULE
rule

BUBBLE
replace(Source:String, ToReplace:String, Replacement:String, Count:Int) =>
       substrString(Source, 0, findString(Source, ToReplace, 0)) +String Replacement +String
       replace(substrString(Source, findString(Source, ToReplace, 0) +Int lengthString(ToReplace), lengthString(Source)), ToReplace, Replacement, Count -Int 1)
        requires Count >Int 0

KW_RULE
rule

BUBBLE
replace(Source:String, _, _, 0) => Source

KW_RULE
rule

BUBBLE
replaceAll(Source:String, ToReplace:String, Replacement:String) => replace(Source, ToReplace, Replacement, countAllOccurrences(Source, ToReplace))

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING-KORE

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

MODNAME
STRING-COMMON

KW_RULE
rule

BUBBLE
S1:String ==K S2:String => S1 ==String S2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING

KW_IMPORTS
imports

MODNAME
STRING-COMMON

KW_IMPORTS
imports

MODNAME
STRING-KORE

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING-BUFFER-IN-K

LBRACK
[

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_IMPORTS
imports

MODNAME
STRING

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

DCOLONEQ
::=

STRING
".StringBuffer"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

DCOLONEQ
::=

ID_UPPER
StringBuffer

STRING
"+String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
avoid

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

DCOLONEQ
::=

ID_UPPER
String

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
StringBuffer2String

LPAREN
(

ID_UPPER
StringBuffer

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

RBRACK
]

KW_RULE
rule

BUBBLE
{SB:String +String S:String}<:StringBuffer => (SB +String S)::String

KW_RULE
rule

BUBBLE
.StringBuffer => ""

KW_RULE
rule

BUBBLE
StringBuffer2String(S:String) => S

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING-BUFFER-HOOKED

LBRACK
[

ATTR_KEY
concrete

RBRACK
]

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_IMPORTS
imports

MODNAME
STRING

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BUFFER.StringBuffer

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

DCOLONEQ
::=

STRING
".StringBuffer"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BUFFER.empty

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
StringBuffer

DCOLONEQ
::=

ID_UPPER
StringBuffer

STRING
"+String"

ID_UPPER
String

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BUFFER.concat

RPAREN
)

COMMA
,

ATTR_KEY
avoid

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_UPPER
StringBuffer2String

LPAREN
(

ID_UPPER
StringBuffer

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BUFFER.toString

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRING-BUFFER

KW_IMPORTS
imports

MODNAME
STRING-BUFFER-HOOKED

KW_IMPORTS
imports

MODNAME
STRING-BUFFER-IN-K

KW_ENDMODULE
endmodule

EOF


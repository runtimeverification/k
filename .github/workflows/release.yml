name: "Release"
on:
  release:
    types:
      - prereleased

jobs:
  nix-release:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          submodules: recursive

      - name: Install Nix
        uses: cachix/install-nix-action@v14.1
        with:
          install_url: "https://releases.nixos.org/nix/nix-2.3.16/install"

      - name: Upload release.nix
        uses: ttuegel/upload-release.nix@v1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  macos-build:
    runs-on: macos-11
    environment: production
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
          path: kframework

      - name: Check out matching homebrew repo branch
        uses: actions/checkout@v2.3.4
        id: checkout
        with:
          repository: kframework/homebrew-k
          path: homebrew-k
          ref: staging
        continue-on-error: true

      - name: Check out homebrew repo master branch
        uses: actions/checkout@v2.3.4
        if: ${{ steps.checkout.outcome == 'failure' }}
        with:
          repository: kframework/homebrew-k
          path: homebrew-k

      - name: Cache maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Get upload_url
        run: |
          echo "::set-output name=release_id::$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)"
          echo "::set-output name=upload_url::https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/$(jq --raw-output '.release.id' $GITHUB_EVENT_PATH)/assets{?name,label}"
        id: release

      - name: Build brew bottle
        id: build
        run: |
          PACKAGE=kframework
          VERSION=$(cat kframework/package/version)
          ROOT_URL='https://github.com/runtimeverification/k/releases/download'
          wget "$ROOT_URL/v${VERSION}/kframework-${VERSION}-src.tar.gz"
          cd homebrew-k
          ../kframework/package/macos/brew-update-to-local ${PACKAGE} ${VERSION}
          git commit Formula/$PACKAGE.rb -m "Update ${PACKAGE} to ${VERSION}: part 1"
          ../kframework/package/macos/brew-build-and-update-to-local-bottle ${PACKAGE} ${VERSION} ${ROOT_URL}
          git reset HEAD^
          LOCAL_BOTTLE_NAME=$(basename $(find . -name "kframework--${VERSION}.big_sur.bottle*.tar.gz"))
          BOTTLE_NAME=$(echo ${LOCAL_BOTTLE_NAME#./} | sed 's!kframework--!kframework-!')
          ../kframework/package/macos/brew-update-to-final ${PACKAGE} ${VERSION} ${ROOT_URL}
          echo "::set-output name=path::$LOCAL_BOTTLE_NAME"
          echo "::set-output name=path_remote::$BOTTLE_NAME"
          echo "::set-output name=version::$VERSION"

      - name: Upload bottle
        uses: actions/upload-artifact@v2
        with:
          name: homebrew
          path: homebrew-k

      - name: Delete Release
        if: failure()
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            await github.repos.deleteRelease({ owner, repo, release_id: ${{ steps.release.outputs.release_id }} })

    outputs:
      bottle_path: ${{ steps.build.outputs.path }}
      bottle_path_remote: ${{ steps.build.outputs.path_remote }}
      release_id: ${{ steps.release.outputs.release_id }}
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ steps.build.outputs.version }}

  macos-test:
    runs-on: macos-11
    environment: production
    needs: macos-build
    steps:
      - name: Check out matching homebrew repo branch
        uses: actions/checkout@v2.3.4
        id: checkout
        with:
          repository: kframework/homebrew-k
          path: homebrew-k
          ref: staging
          persist-credentials: false
        continue-on-error: true

      - name: Check out homebrew repo master branch
        uses: actions/checkout@v2.3.4
        if: ${{ steps.checkout.outcome == 'failure' }}
        with:
          repository: kframework/homebrew-k
          path: homebrew-k
          persist-credentials: false

      - name: Download bottle
        uses: actions/download-artifact@v2
        with:
          name: homebrew
          path: homebrew-k-old

      - name: Test brew bottle
        id: test
        env:
          # github actions sets the JAVA_HOME variable to Java 8 explicitly for
          # some reason. There doesn't seem to be a way to tell it to unset the
          # variable, so instead we just have to tell it to use Java 11
          # explicitly intead.
          JAVA_HOME: ${{ env.JAVA_HOME_11_X64 }}
        run: |
          cd homebrew-k-old
          brew tap kframework/k "file:///$(pwd)"
          brew install ${{ needs.macos-build.outputs.bottle_path }} -v
          cp -R /usr/local/share/kframework/pl-tutorial ~
          WD=`pwd`
          cd
          echo 'Starting kserver...'
          spawn-kserver $WD/kserver.log
          cd pl-tutorial
          echo 'Testing tutorial in user environment...'
          make -j`sysctl -n hw.ncpu` ${MAKE_EXTRA_ARGS}
          cd ~
          echo 'module TEST imports BOOL endmodule' > test.k
          kompile test.k --backend llvm
          kompile test.k --backend haskell

      - name: Upload bottle to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_content_type: "application/gzip"
          asset_name: ${{ needs.macos-build.outputs.bottle_path_remote }}
          asset_path: homebrew-k-old/${{ needs.macos-build.outputs.bottle_path }}
          upload_url: ${{ needs.macos-build.outputs.upload_url }}

      - name: Add ssh key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.HOMEBREW_SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS_GITHUB_COM }}

      - name: Commit changes
        run: |
          cp homebrew-k-old/Formula/kframework.rb homebrew-k/Formula/kframework.rb
          cd homebrew-k
          git commit -m 'Update brew package version' Formula/kframework.rb
          git remote set-url origin git@github.com:kframework/homebrew-k.git
          git push origin master

      - name: Delete Release
        if: failure()
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            await github.repos.deleteRelease({ owner, repo, release_id: ${{ needs.macos-build.outputs.release_id }} })

  macos-release:
    runs-on: ubuntu-latest
    environment: production
    needs: [nix-release, macos-build, macos-test]
    steps:
      - name: Publish release
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { owner, repo } = context.repo
            await github.repos.updateRelease({ owner, repo, release_id: ${{ needs.macos-build.outputs.release_id }}, prerelease: false })
      - name: Update dependents
        env:
          JENKINS_DEVOPS_TOKEN: ${{ secrets.JENKINS_DEVOPS_TOKEN }}
          VERSION: ${{ needs.macos-build.outputs.version }}
        run: |
          curl --fail 'https://office.runtimeverification.com/jenkins/buildByToken/buildWithParameters' \
              --data job=Devops/master \
              --data token=$JENKINS_DEVOPS_TOKEN \
              --data UPDATE_DEPS=true \
              --data UPDATE_DEPS_REPO=runtimeverification/k \
              --data UPDATE_DEPS_VERSION=v$VERSION

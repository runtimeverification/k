module UNSIGNED-INT-SYNTAX
  syntax Int [hook(INT.Int)]
  syntax Int ::= r"[0-9]+" [prefer, token, prec(2)]
endmodule


module INT-SYNTAX
  imports UNSIGNED-INT-SYNTAX
  syntax Int ::= r"[\\+-]?[0-9]+" [prefer, token, prec(2)]
endmodule


module INT-COMMON
  imports INT-SYNTAX
  imports private BOOL

  syntax Int ::= "~Int" Int                     [function, klabel(~Int_), symbol, total, latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}), hook(INT.not), smtlib(notInt)]
               > left:
                 Int "^Int" Int                 [function, klabel(_^Int_), symbol, left, smt-hook(^), latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}), hook(INT.pow)]
               | Int "^%Int" Int Int            [function, klabel(_^%Int__), symbol, left, smt-hook((mod (^ #1 #2) #3)), hook(INT.powmod)]
               > left:
                 Int "*Int" Int                 [function, total, klabel(_*Int_), symbol, left, comm, smt-hook(*), latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}), hook(INT.mul)]
               /* FIXME: translate /Int and %Int into smtlib */
               /* /Int and %Int implement t-division, which rounds towards 0 */
               | Int "/Int" Int                 [function, klabel(_/Int_), symbol, left, smt-hook(div), latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}), hook(INT.tdiv)]
               | Int "%Int" Int                 [function, klabel(_%Int_), symbol, left, smt-hook(mod), latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}), hook(INT.tmod)]
               /* divInt and modInt implement e-division according to the Euclidean division theorem, therefore the remainder is always positive */
               | Int "divInt" Int               [function, klabel(_divInt_), symbol, left, smt-hook(div), hook(INT.ediv)]
               | Int "modInt" Int               [function, klabel(_modInt_), symbol, left, smt-hook(mod), hook(INT.emod)]
               > left:
                 Int "+Int" Int                 [function, total, klabel(_+Int_), symbol, left, comm, smt-hook(+), latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}), hook(INT.add)]
               | Int "-Int" Int                 [function, total, klabel(_-Int_), symbol, left, smt-hook(-), latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}), hook(INT.sub)]
               > left:
                 Int ">>Int" Int                [function, klabel(_>>Int_), symbol, left, latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}), hook(INT.shr), smtlib(shrInt)]
               | Int "<<Int" Int                [function, klabel(_<<Int_), symbol, left, latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}), hook(INT.shl), smtlib(shlInt)]
               > left:
                 Int "&Int" Int                 [function, total, klabel(_&Int_), symbol, left, comm, latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}), hook(INT.and), smtlib(andInt)]
               > left:
                 Int "xorInt" Int               [function, total, klabel(_xorInt_), symbol, left, comm, latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}), hook(INT.xor), smtlib(xorInt)]
               > left:
                 Int "|Int" Int                 [function, total, klabel(_|Int_), symbol, left, comm, latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}), hook(INT.or), smtlib(orInt)]

  syntax Int ::= "minInt" "(" Int "," Int ")"   [function, total, smt-hook((ite (< #1 #2) #1 #2)), hook(INT.min)]
               | "maxInt" "(" Int "," Int ")"   [function, total, smt-hook((ite (< #1 #2) #2 #1)), hook(INT.max)]

  syntax Int ::= absInt ( Int )                 [function, total, smt-hook((ite (< #1 0) (- 0 #1) #1)), hook(INT.abs)]

  syntax Int ::= log2Int ( Int )                [function, hook(INT.log2)]

  syntax Int ::= bitRangeInt           ( Int, index: Int, length: Int ) [function, hook(INT.bitRange)]
               | signExtendBitRangeInt ( Int, index: Int, length: Int ) [function, hook(INT.signExtendBitRange)]

  syntax Bool ::= Int "<=Int" Int         [function, total, klabel(_<=Int_), symbol, smt-hook(<=), latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}), hook(INT.le)]
                | Int "<Int" Int          [function, total, klabel(_<Int_), symbol, smt-hook(<), latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}), hook(INT.lt)]
                | Int ">=Int" Int         [function, total, klabel(_>=Int_), symbol, smt-hook(>=), latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}), hook(INT.ge)]
                | Int ">Int" Int          [function, total, klabel(_>Int_), symbol, smt-hook(>), latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}), hook(INT.gt)]
                | Int "==Int" Int         [function, total, klabel(_==Int_), symbol, comm, smt-hook(=), latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}), hook(INT.eq)]
                | Int "=/=Int" Int        [function, total, klabel(_=/=Int_), symbol, comm, smt-hook(distinct), latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}), hook(INT.ne)]

  syntax Bool ::= Int "dividesInt" Int    [function]

  syntax Int ::= randInt(Int) [function, hook(INT.rand), impure]
  syntax K ::= srandInt(Int) [function, hook(INT.srand), impure]

endmodule


module INT-SYMBOLIC [symbolic]
  imports INT-COMMON
  imports INT-SYMBOLIC-KORE
  imports private BOOL

  // Arithmetic Normalization
  rule I +Int 0 => I [simplification]
  rule I -Int 0 => I [simplification]

  rule X modInt N => X requires 0 <=Int X andBool X <Int N [simplification]
  rule X   %Int N => X requires 0 <=Int X andBool X <Int N [simplification]

  // Bit-shifts
  rule X <<Int 0 => X [simplification]
  rule 0 <<Int _ => 0 [simplification]
  rule X >>Int 0 => X [simplification]
  rule 0 >>Int _ => 0 [simplification]
endmodule


module INT-SYMBOLIC-KORE [symbolic, kore, haskell]
  imports INT-COMMON
  imports ML-SYNTAX
  imports private BOOL

  // Definability Conditions
  rule #Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]
  rule #Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2) [simplification]

  // Arithmetic Normalization
  rule I +Int B => B +Int I          [concrete(I), symbolic(B), simplification(51)]
  rule A -Int I => A +Int (0 -Int I) [concrete(I), symbolic(A), simplification(51)]

  rule (A +Int I2) +Int I3 => A +Int (I2 +Int I3) [concrete(I2, I3), symbolic(A), simplification]
  rule I1 +Int (B +Int I3) => B +Int (I1 +Int I3) [concrete(I1, I3), symbolic(B), simplification]
  rule I1 -Int (B +Int I3) => (I1 -Int I3) -Int B [concrete(I1, I3), symbolic(B), simplification]
  rule I1 +Int (I2 +Int C) => (I1 +Int I2) +Int C [concrete(I1, I2), symbolic(C), simplification]
  rule I1 +Int (I2 -Int C) => (I1 +Int I2) -Int C [concrete(I1, I2), symbolic(C), simplification]
  rule (I1 -Int B) +Int I3 => (I1 +Int I3) -Int B [concrete(I1, I3), symbolic(B), simplification]
  rule I1 -Int (I2 +Int C) => (I1 -Int I2) -Int C [concrete(I1, I2), symbolic(C), simplification]
  rule I1 -Int (I2 -Int C) => (I1 -Int I2) +Int C [concrete(I1, I2), symbolic(C), simplification]
  rule (C -Int I2) -Int I3 => C -Int (I2 +Int I3) [concrete(I2, I3), symbolic(C), simplification]

  rule I1 &Int (I2 &Int C) => (I1 &Int I2) &Int C [concrete(I1, I2), symbolic(C), simplification]

endmodule


module INT-KORE [kore, symbolic]
  imports private K-EQUAL
  imports private BOOL
  imports INT-COMMON

  rule I1:Int ==K I2:Int => I1 ==Int I2 [simplification]
  rule {K1 ==Int K2 #Equals true} => {K1 #Equals K2} [simplification]
  rule {true #Equals K1 ==Int K2} => {K1 #Equals K2} [simplification]
  rule {K1 ==Int K2 #Equals false} => #Not({K1 #Equals K2}) [simplification]
  rule {false #Equals K1 ==Int K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=Int K2 #Equals true} => #Not({K1 #Equals K2}) [simplification]
  rule {true #Equals K1 =/=Int K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=Int K2 #Equals false} => {K1 #Equals K2} [simplification]
  rule {false #Equals K1 =/=Int K2} => {K1 #Equals K2} [simplification]

endmodule


module INT
  imports INT-COMMON
  imports INT-SYMBOLIC
  imports INT-KORE
  imports private K-EQUAL
  imports private BOOL

  rule bitRangeInt(I::Int, IDX::Int, LEN::Int) => (I >>Int IDX) modInt (1 <<Int LEN)

  rule signExtendBitRangeInt(I::Int, IDX::Int, LEN::Int) => (bitRangeInt(I, IDX, LEN) +Int (1 <<Int (LEN -Int 1))) modInt (1 <<Int LEN) -Int (1 <<Int (LEN -Int 1))

  rule I1:Int divInt I2:Int => (I1 -Int (I1 modInt I2)) /Int I2
  requires I2 =/=Int 0
  rule
    I1:Int modInt I2:Int
  =>
    ((I1 %Int absInt(I2)) +Int absInt(I2)) %Int absInt(I2)
  requires I2 =/=Int 0    [concrete, simplification]

  rule minInt(I1:Int, I2:Int) => I1 requires I1 <=Int I2
  rule minInt(I1:Int, I2:Int) => I2 requires I1 >=Int I2

  rule I1:Int =/=Int I2:Int => notBool (I1 ==Int I2)
  rule (I1:Int dividesInt I2:Int) => (I2 %Int I1) ==Int 0

  syntax Int ::= freshInt(Int)    [freshGenerator, function, total, private]
  rule freshInt(I:Int) => I
endmodule
===
KW_MODULE
module

MODNAME
UNSIGNED-INT-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Int

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.Int

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

REGEX
r"[0-9]+"

LBRACK
[

ATTR_KEY
prefer

COMMA
,

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
2

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

MODNAME
UNSIGNED-INT-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

REGEX
r"[\\+-]?[0-9]+"

LBRACK
[

ATTR_KEY
prefer

COMMA
,

ATTR_KEY
token

COMMA
,

ATTR_KEY
prec

LPAREN
(

ATTR_CONTENT
2

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT-COMMON

KW_IMPORTS
imports

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

STRING
"~Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
~Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\mathop{\sim_{\scriptstyle\it Int}}{#1}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.not

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
notInt

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"^Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_^Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
^

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.pow

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"^%Int"

ID_UPPER
Int

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_^%Int__

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(mod (^ #1 #2) #3)

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.powmod

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"*Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_*Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
*

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.mul

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"/Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_/Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
div

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.tdiv

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"%Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_%Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
mod

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.tmod

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"divInt"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_divInt_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
div

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.ediv

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"modInt"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_modInt_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
mod

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.emod

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"+Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_+Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
+

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{+_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.add

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"-Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_-Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
-

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{-_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.sub

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
">>Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_>>Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.shr

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
shrInt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"<<Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_<<Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.shl

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
shlInt

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"&Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_&Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.and

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
andInt

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"xorInt"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_xorInt_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.xor

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
xorInt

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Int

STRING
"|Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_|Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{|_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.or

RPAREN
)

COMMA
,

ATTR_KEY
smtlib

LPAREN
(

ATTR_CONTENT
orInt

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

STRING
"minInt"

STRING
"("

ID_UPPER
Int

STRING
","

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (< #1 #2) #1 #2)

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.min

RPAREN
)

RBRACK
]

VBAR
|

STRING
"maxInt"

STRING
"("

ID_UPPER
Int

STRING
","

ID_UPPER
Int

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (< #1 #2) #2 #1)

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.max

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
absInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
(ite (< #1 0) (- 0 #1) #1)

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.abs

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
log2Int

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.log2

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
bitRangeInt

LPAREN
(

ID_UPPER
Int

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.bitRange

RPAREN
)

RBRACK
]

VBAR
|

ID_LOWER
signExtendBitRangeInt

LPAREN
(

ID_UPPER
Int

COMMA
,

ID_LOWER
index

COLON
:

ID_UPPER
Int

COMMA
,

ID_LOWER
length

COLON
:

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.signExtendBitRange

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Int

STRING
"<=Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_<=Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
<=

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.le

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"<Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_<Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
<

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{<_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.lt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
">=Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_>=Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
>=

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.ge

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
">Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_>Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
>

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{>_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.gt

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"==Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_==Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
=

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.eq

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Int

STRING
"=/=Int"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_=/=Int_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
distinct

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.ne

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
Int

STRING
"dividesInt"

ID_UPPER
Int

LBRACK
[

ATTR_KEY
function

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
randInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.rand

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
srandInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
INT.srand

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT-SYMBOLIC

LBRACK
[

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
INT-COMMON

KW_IMPORTS
imports

MODNAME
INT-SYMBOLIC-KORE

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
I +Int 0 => I

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I -Int 0 => I

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X modInt N => X requires 0 <=Int X andBool X <Int N

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X   %Int N => X requires 0 <=Int X andBool X <Int N

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X <<Int 0 => X

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
0 <<Int _ => 0

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
X >>Int 0 => X

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
0 >>Int _ => 0

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT-SYMBOLIC-KORE

LBRACK
[

ATTR_KEY
symbolic

COMMA
,

ATTR_KEY
kore

COMMA
,

ATTR_KEY
haskell

RBRACK
]

KW_IMPORTS
imports

MODNAME
INT-COMMON

KW_IMPORTS
imports

MODNAME
ML-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
#Ceil(@I1:Int /Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
#Ceil(@I1:Int %Int   @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
#Ceil(@I1:Int modInt @I2:Int) => {(@I2 =/=Int 0) #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
#Ceil(@I1:Int >>Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
#Ceil(@I1:Int <<Int  @I2:Int) => {(@I2 >=Int 0)  #Equals true} #And #Ceil(@I1) #And #Ceil(@I2)

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I +Int B => B +Int I

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
B

RPAREN
)

COMMA
,

ATTR_KEY
simplification

LPAREN
(

ATTR_CONTENT
51

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
A -Int I => A +Int (0 -Int I)

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
A

RPAREN
)

COMMA
,

ATTR_KEY
simplification

LPAREN
(

ATTR_CONTENT
51

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
(A +Int I2) +Int I3 => A +Int (I2 +Int I3)

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I2, I3

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
A

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 +Int (B +Int I3) => B +Int (I1 +Int I3)

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I3

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
B

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 -Int (B +Int I3) => (I1 -Int I3) -Int B

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I3

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
B

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 +Int (I2 +Int C) => (I1 +Int I2) +Int C

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I2

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 +Int (I2 -Int C) => (I1 +Int I2) -Int C

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I2

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(I1 -Int B) +Int I3 => (I1 +Int I3) -Int B

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I3

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
B

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 -Int (I2 +Int C) => (I1 -Int I2) -Int C

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I2

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 -Int (I2 -Int C) => (I1 -Int I2) +Int C

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I2

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
(C -Int I2) -Int I3 => C -Int (I2 +Int I3)

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I2, I3

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
I1 &Int (I2 &Int C) => (I1 &Int I2) &Int C

LBRACK
[

ATTR_KEY
concrete

LPAREN
(

ATTR_CONTENT
I1, I2

RPAREN
)

COMMA
,

ATTR_KEY
symbolic

LPAREN
(

ATTR_CONTENT
C

RPAREN
)

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT-KORE

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_IMPORTS
imports

MODNAME
INT-COMMON

KW_RULE
rule

BUBBLE
I1:Int ==K I2:Int => I1 ==Int I2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 ==Int K2 #Equals true} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{true #Equals K1 ==Int K2} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 ==Int K2 #Equals false} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals K1 ==Int K2} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 =/=Int K2 #Equals true} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{true #Equals K1 =/=Int K2} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 =/=Int K2 #Equals false} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals K1 =/=Int K2} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
INT

KW_IMPORTS
imports

MODNAME
INT-COMMON

KW_IMPORTS
imports

MODNAME
INT-SYMBOLIC

KW_IMPORTS
imports

MODNAME
INT-KORE

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_RULE
rule

BUBBLE
bitRangeInt(I::Int, IDX::Int, LEN::Int) => (I >>Int IDX) modInt (1 <<Int LEN)

KW_RULE
rule

BUBBLE
signExtendBitRangeInt(I::Int, IDX::Int, LEN::Int) => (bitRangeInt(I, IDX, LEN) +Int (1 <<Int (LEN -Int 1))) modInt (1 <<Int LEN) -Int (1 <<Int (LEN -Int 1))

KW_RULE
rule

BUBBLE
I1:Int divInt I2:Int => (I1 -Int (I1 modInt I2)) /Int I2
  requires I2 =/=Int 0

KW_RULE
rule

BUBBLE
I1:Int modInt I2:Int
  =>
    ((I1 %Int absInt(I2)) +Int absInt(I2)) %Int absInt(I2)
  requires I2 =/=Int 0

LBRACK
[

ATTR_KEY
concrete

COMMA
,

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
minInt(I1:Int, I2:Int) => I1 requires I1 <=Int I2

KW_RULE
rule

BUBBLE
minInt(I1:Int, I2:Int) => I2 requires I1 >=Int I2

KW_RULE
rule

BUBBLE
I1:Int =/=Int I2:Int => notBool (I1 ==Int I2)

KW_RULE
rule

BUBBLE
(I1:Int dividesInt I2:Int) => (I2 %Int I1) ==Int 0

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
freshInt

LPAREN
(

ID_UPPER
Int

RPAREN
)

LBRACK
[

ATTR_KEY
freshGenerator

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
private

RBRACK
]

KW_RULE
rule

BUBBLE
freshInt(I:Int) => I

KW_ENDMODULE
endmodule

EOF


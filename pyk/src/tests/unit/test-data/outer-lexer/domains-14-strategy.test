module STRATEGY
    imports ML-SYNTAX
    imports KVARIABLE-SYNTAX
    imports private K-EQUAL

    syntax #RuleTag ::= #KVariable

    syntax Strategy ::= #STUCK()    [symbol]
                      | "^" #RuleTag [symbol, klabel(#applyRule)]
                      | "~" #RuleTag [symbol, klabel(#appliedRule)]

    configuration <s> $STRATEGY:K </s>
endmodule


module RULE-TAG-SYNTAX
    imports BUILTIN-ID-TOKENS

    syntax #RuleTag ::= #LowerId [token]
endmodule


module DEFAULT-STRATEGY-CONCRETE [concrete]
    imports STRATEGY
    imports RULE-TAG-SYNTAX
    rule ~ regular => ^ regular [anywhere]
endmodule


module DEFAULT-STRATEGY-SYMBOLIC [symbolic]
    imports STRATEGY
    imports RULE-TAG-SYNTAX
    rule <s> ~ regular => ^ regular ... </s>
endmodule


module DEFAULT-STRATEGY
    imports STRATEGY
    imports DEFAULT-STRATEGY-CONCRETE
    imports DEFAULT-STRATEGY-SYMBOLIC

    rule initSCell(_) => <s> ^ regular </s> [priority(25)]
endmodule


module STRATEGY-ABSTRACT
    imports STRATEGY

    syntax #RuleTag ::= "(" #RuleTag ")" [bracket]
 // ----------------------------------------------

    syntax Strategy ::= ".Strategy"
                      | "(" Strategy ")" [bracket]
 // ----------------------------------------------
    rule <s> .Strategy => . ... </s>

    syntax KItem ::= #catchSTUCK ( Strategy )
 // -----------------------------------------
    rule <s> #catchSTUCK(_) => . ... </s>
    rule <s> #STUCK() ~> (_S:Strategy => .) ... </s>
    rule <s> #STUCK() ~> #catchSTUCK(S) => S ... </s>

    syntax Strategy ::= Strategy ";" Strategy [left]
 // ------------------------------------------------
    rule <s> S:Strategy ; S':Strategy => S ~> S' ... </s>

    syntax #RuleTag ::= #RuleTag "|" #RuleTag [left, klabel(#alternateRule)]
 // ------------------------------------------------------------------------
    rule <s> ^ RT:#RuleTag | RT':#RuleTag => ^ RT ~> #catchSTUCK(^ RT') ... </s>

    syntax #RuleTag ::= #RuleTag "*" [klabel(#repeatRule)]
 // ------------------------------------------------------
    rule <s> ^ RT:#RuleTag * => ^ RT ~> ^ RT * ~> #catchSTUCK(.Strategy) ... </s>
endmodule
===
KW_MODULE
module

MODNAME
STRATEGY

KW_IMPORTS
imports

MODNAME
ML-SYNTAX

KW_IMPORTS
imports

MODNAME
KVARIABLE-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
K-EQUAL

KW_SYNTAX
syntax

ID_UPPER
#RuleTag

DCOLONEQ
::=

ID_UPPER
#KVariable

KW_SYNTAX
syntax

ID_UPPER
Strategy

DCOLONEQ
::=

ID_UPPER
#STUCK

LPAREN
(

RPAREN
)

LBRACK
[

ATTR_KEY
symbol

RBRACK
]

VBAR
|

STRING
"^"

ID_UPPER
#RuleTag

LBRACK
[

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#applyRule

RPAREN
)

RBRACK
]

VBAR
|

STRING
"~"

ID_UPPER
#RuleTag

LBRACK
[

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#appliedRule

RPAREN
)

RBRACK
]

KW_CONFIG
configuration

BUBBLE
<s> $STRATEGY:K </s>

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
RULE-TAG-SYNTAX

KW_IMPORTS
imports

MODNAME
BUILTIN-ID-TOKENS

KW_SYNTAX
syntax

ID_UPPER
#RuleTag

DCOLONEQ
::=

ID_UPPER
#LowerId

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
DEFAULT-STRATEGY-CONCRETE

LBRACK
[

ATTR_KEY
concrete

RBRACK
]

KW_IMPORTS
imports

MODNAME
STRATEGY

KW_IMPORTS
imports

MODNAME
RULE-TAG-SYNTAX

KW_RULE
rule

BUBBLE
~ regular => ^ regular

LBRACK
[

ATTR_KEY
anywhere

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
DEFAULT-STRATEGY-SYMBOLIC

LBRACK
[

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
STRATEGY

KW_IMPORTS
imports

MODNAME
RULE-TAG-SYNTAX

KW_RULE
rule

BUBBLE
<s> ~ regular => ^ regular ... </s>

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
DEFAULT-STRATEGY

KW_IMPORTS
imports

MODNAME
STRATEGY

KW_IMPORTS
imports

MODNAME
DEFAULT-STRATEGY-CONCRETE

KW_IMPORTS
imports

MODNAME
DEFAULT-STRATEGY-SYMBOLIC

KW_RULE
rule

BUBBLE
initSCell(_) => <s> ^ regular </s>

LBRACK
[

ATTR_KEY
priority

LPAREN
(

ATTR_CONTENT
25

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
STRATEGY-ABSTRACT

KW_IMPORTS
imports

MODNAME
STRATEGY

KW_SYNTAX
syntax

ID_UPPER
#RuleTag

DCOLONEQ
::=

STRING
"("

ID_UPPER
#RuleTag

STRING
")"

LBRACK
[

ATTR_KEY
bracket

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Strategy

DCOLONEQ
::=

STRING
".Strategy"

VBAR
|

STRING
"("

ID_UPPER
Strategy

STRING
")"

LBRACK
[

ATTR_KEY
bracket

RBRACK
]

KW_RULE
rule

BUBBLE
<s> .Strategy => . ... </s>

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
#catchSTUCK

LPAREN
(

ID_UPPER
Strategy

RPAREN
)

KW_RULE
rule

BUBBLE
<s> #catchSTUCK(_) => . ... </s>

KW_RULE
rule

BUBBLE
<s> #STUCK() ~> (_S:Strategy => .) ... </s>

KW_RULE
rule

BUBBLE
<s> #STUCK() ~> #catchSTUCK(S) => S ... </s>

KW_SYNTAX
syntax

ID_UPPER
Strategy

DCOLONEQ
::=

ID_UPPER
Strategy

STRING
";"

ID_UPPER
Strategy

LBRACK
[

ATTR_KEY
left

RBRACK
]

KW_RULE
rule

BUBBLE
<s> S:Strategy ; S':Strategy => S ~> S' ... </s>

KW_SYNTAX
syntax

ID_UPPER
#RuleTag

DCOLONEQ
::=

ID_UPPER
#RuleTag

STRING
"|"

ID_UPPER
#RuleTag

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#alternateRule

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
<s> ^ RT:#RuleTag | RT':#RuleTag => ^ RT ~> #catchSTUCK(^ RT') ... </s>

KW_SYNTAX
syntax

ID_UPPER
#RuleTag

DCOLONEQ
::=

ID_UPPER
#RuleTag

STRING
"*"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#repeatRule

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
<s> ^ RT:#RuleTag * => ^ RT ~> ^ RT * ~> #catchSTUCK(.Strategy) ... </s>

KW_ENDMODULE
endmodule

EOF


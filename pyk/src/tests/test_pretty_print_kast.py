import pytest

from pyk.kast.inner import KApply, KAst, KAtt, KLabel, KSort, KToken, KVariable
from pyk.kast.outer import KNonTerminal, KProduction, KRule, KTerminal
from pyk.ktool.kprint import pretty_print_kast, unparser_for_production
from pyk.prelude.bytes import bytesToken
from pyk.prelude.kbool import TRUE

PRETTY_PRINT_TEST_DATA = (
    ('var', KVariable('V'), 'V'),
    ('var-sorted', KVariable('V', sort=KSort('Int')), 'V:Int'),
    ('bytes-token', bytesToken('\x41\xb3\xde\x41\x42\x43\xad\xde'), 'b"\x41\xb3\xde\x41\x42\x43\xad\xde"'),
    (
        'bytes-token-2',
        KToken(
            'b"`\x80`@R4\x80\x15a\x00\x10W`\x00\x80ý[P`\x046\x10a\x00\x9eW`\x005`à\x1c\x80c]ÞËý\x11a\x00fW\x80c]ÞËý\x14a\x00åW\x80cz©Ì®\x14a\x00åW\x80cºAO¦\x14a\x00íW\x80cøÌ¿G\x14a\x01\x05W\x80cúv&Ô\x14a\x01\x18W`\x00\x80ý[\x80c\n\x92Tä\x14a\x00£W\x80c\x18g]B\x14a\x00£W\x80c*Má¡\x14a\x00¥W\x80c6\r¤Ò\x14a\x00£W\x80c:v\x84c\x14a\x00\xadW[`\x00\x80ý[\x00[a\x00£a\x01\'V[a\x00Èsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-\x81V[`@Q`\x01`\x01`\xa0\x1b\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90ó[a\x00£a\x01\x93V[a\x00õa\x01\x9bV[`@Q\x90\x15\x15\x81R` \x01a\x00ÜV[`\x00Ta\x00õ\x90b\x01\x00\x00\x90\x04`ÿ\x16\x81V[`\x00Ta\x00õ\x90`ÿ\x16\x81V[V[`@\x80Qc=!\x12\x05`â\x1b\x81R\x90Qsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-\x91cô\x84H\x14\x91`\x04\x80\x83\x01\x92`\x00\x92\x91\x90\x82\x90\x03\x01\x81\x83\x87\x80;\x15\x80\x15a\x01sW`\x00\x80ý[PZñ\x15\x80\x15a\x01\x87W=`\x00\x80>=`\x00ý[PPPPa\x01%a\x02ÆV[a\x01%a\x02ÆV[`\x00\x80Ta\x01\x00\x90\x04`ÿ\x16\x15a\x01»WP`\x00Ta\x01\x00\x90\x04`ÿ\x16\x90V[`\x00sq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-;\x15a\x02ÁW`@\x80Qsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-` \x82\x01\x81\x90Re\x19\x98Z[\x19Y`Ò\x1b\x82\x84\x01R\x82Q\x80\x83\x03\x84\x01\x81R``\x83\x01\x90\x93R`\x00\x92\x90\x91a\x02I\x91\x7ff\x7f\x9dpÊA\x1dpêÕ\r\x8d\\"\x07\r¯Ãj×_=Ï^r7²*Þ\x9aìÄ\x91`\x80\x01a\x03\x17V[`@\x80Q`\x1f\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x02c\x91a\x03;V[`\x00`@Q\x80\x83\x03\x81`\x00\x86Zñ\x91PP=\x80`\x00\x81\x14a\x02\xa0W`@Q\x91P`\x1f\x19`?=\x01\x16\x82\x01`@R=\x82R=`\x00` \x84\x01>a\x02¥V[``\x91P[P\x91PP\x80\x80` \x01\x90Q\x81\x01\x90a\x02½\x91\x90a\x03NV[\x91PP[\x91\x90PV[cNH{q`à\x1b`\x00R`\x01`\x04R`$`\x00ý[`\x00\x81Q`\x00[\x81\x81\x10\x15a\x02ýW` \x81\x85\x01\x81\x01Q\x86\x83\x01R\x01a\x02ãV[\x81\x81\x11\x15a\x03\x0cW`\x00\x82\x86\x01R[P\x92\x90\x92\x01\x92\x91PPV[`\x01`\x01`à\x1b\x03\x19\x83\x16\x81R`\x00a\x033`\x04\x83\x01\x84a\x02ÜV[\x94\x93PPPPV[`\x00a\x03G\x82\x84a\x02ÜV[\x93\x92PPPV[`\x00` \x82\x84\x03\x12\x15a\x03`W`\x00\x80ý[\x81Q\x80\x15\x15\x81\x14a\x03GW`\x00\x80ýþ¢dipfsX"\x12 ó§ò>|x6m_è\x0b\x12\\m\x02æ\\»^8ç¬¦4×÷4\x97iÈsldsolcC\x00\x08\r\x003"',
            KSort('Bytes'),
        ),
        'b"`\x80`@R4\x80\x15a\x00\x10W`\x00\x80ý[P`\x046\x10a\x00\x9eW`\x005`à\x1c\x80c]ÞËý\x11a\x00fW\x80c]ÞËý\x14a\x00åW\x80cz©Ì®\x14a\x00åW\x80cºAO¦\x14a\x00íW\x80cøÌ¿G\x14a\x01\x05W\x80cúv&Ô\x14a\x01\x18W`\x00\x80ý[\x80c\n\x92Tä\x14a\x00£W\x80c\x18g]B\x14a\x00£W\x80c*Má¡\x14a\x00¥W\x80c6\r¤Ò\x14a\x00£W\x80c:v\x84c\x14a\x00\xadW[`\x00\x80ý[\x00[a\x00£a\x01\'V[a\x00Èsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-\x81V[`@Q`\x01`\x01`\xa0\x1b\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90ó[a\x00£a\x01\x93V[a\x00õa\x01\x9bV[`@Q\x90\x15\x15\x81R` \x01a\x00ÜV[`\x00Ta\x00õ\x90b\x01\x00\x00\x90\x04`ÿ\x16\x81V[`\x00Ta\x00õ\x90`ÿ\x16\x81V[V[`@\x80Qc=!\x12\x05`â\x1b\x81R\x90Qsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-\x91cô\x84H\x14\x91`\x04\x80\x83\x01\x92`\x00\x92\x91\x90\x82\x90\x03\x01\x81\x83\x87\x80;\x15\x80\x15a\x01sW`\x00\x80ý[PZñ\x15\x80\x15a\x01\x87W=`\x00\x80>=`\x00ý[PPPPa\x01%a\x02ÆV[a\x01%a\x02ÆV[`\x00\x80Ta\x01\x00\x90\x04`ÿ\x16\x15a\x01»WP`\x00Ta\x01\x00\x90\x04`ÿ\x16\x90V[`\x00sq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-;\x15a\x02ÁW`@\x80Qsq\tp\x9eÏ©\x1a\x80boó\x98\x9dhö\x7f[\x1dÑ-` \x82\x01\x81\x90Re\x19\x98Z[\x19Y`Ò\x1b\x82\x84\x01R\x82Q\x80\x83\x03\x84\x01\x81R``\x83\x01\x90\x93R`\x00\x92\x90\x91a\x02I\x91\x7ff\x7f\x9dpÊA\x1dpêÕ\r\x8d\\"\x07\r¯Ãj×_=Ï^r7²*Þ\x9aìÄ\x91`\x80\x01a\x03\x17V[`@\x80Q`\x1f\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x02c\x91a\x03;V[`\x00`@Q\x80\x83\x03\x81`\x00\x86Zñ\x91PP=\x80`\x00\x81\x14a\x02\xa0W`@Q\x91P`\x1f\x19`?=\x01\x16\x82\x01`@R=\x82R=`\x00` \x84\x01>a\x02¥V[``\x91P[P\x91PP\x80\x80` \x01\x90Q\x81\x01\x90a\x02½\x91\x90a\x03NV[\x91PP[\x91\x90PV[cNH{q`à\x1b`\x00R`\x01`\x04R`$`\x00ý[`\x00\x81Q`\x00[\x81\x81\x10\x15a\x02ýW` \x81\x85\x01\x81\x01Q\x86\x83\x01R\x01a\x02ãV[\x81\x81\x11\x15a\x03\x0cW`\x00\x82\x86\x01R[P\x92\x90\x92\x01\x92\x91PPV[`\x01`\x01`à\x1b\x03\x19\x83\x16\x81R`\x00a\x033`\x04\x83\x01\x84a\x02ÜV[\x94\x93PPPPV[`\x00a\x03G\x82\x84a\x02ÜV[\x93\x92PPPV[`\x00` \x82\x84\x03\x12\x15a\x03`W`\x00\x80ý[\x81Q\x80\x15\x15\x81\x14a\x03GW`\x00\x80ýþ¢dipfsX"\x12 ó§ò>|x6m_è\x0b\x12\\m\x02æ\\»^8ç¬¦4×÷4\x97iÈsldsolcC\x00\x08\r\x003"',
    ),
    ('rule', KRule(TRUE), 'rule  true\n  '),
    ('rule-empty-req', KRule(TRUE, ensures=TRUE), 'rule  true\n  '),
    (
        'rule-req-andbool',
        KRule(TRUE, ensures=KApply('_andBool_', [TRUE, TRUE])),
        'rule  true\n   ensures ( true\n   andBool ( true\n           ))\n  ',
    ),
    ('sort-decl', KProduction(KSort('Test')), 'syntax Test'),
    ('token-decl', KProduction(KSort('Test'), att=KAtt({'token': ''})), 'syntax Test [token()]'),
    (
        'function-decl',
        KProduction(KSort('Test'), [KTerminal('foo'), KNonTerminal(KSort('Int'))], att=KAtt({'function': ''})),
        'syntax Test ::= "foo" Int [function()]',
    ),
)


@pytest.mark.parametrize(
    'test_id,kast,expected',
    PRETTY_PRINT_TEST_DATA,
    ids=[test_id for test_id, *_ in PRETTY_PRINT_TEST_DATA],
)
def test_pretty_print(test_id: str, kast: KAst, expected: str) -> None:
    # Given
    expected_tokens = expected.split('\n')

    # When
    actual = pretty_print_kast(kast, {})
    actual_tokens = actual.split('\n')

    # Then
    assert actual_tokens == expected_tokens


def test_unparser_underbars() -> None:
    # Given
    success_production = KProduction(
        KSort('EndStatusCode'), [KTerminal('EVMC_SUCCESS')], klabel=KLabel('EVMC_SUCCESS_NETWORK_EndStatusCode')
    )
    unparser = unparser_for_production(success_production)
    expected = 'EVMC_SUCCESS'

    # When
    actual = unparser(KApply('EVMC_SUCCESS_NETWORK_EndStatusCode'))

    # Then
    assert actual == expected

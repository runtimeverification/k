name: 'Cut Release'
on:
  push:
    branches:
      - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:

  tag-release:
    name: 'Tag Release and Bump Dependents'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          fetch-depth: 0
      - name: Configure GitHub user
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update Version'
        run: |
          version=v"$(cat package/version)"
          git tag --delete "${version}" || true
          git push --delete origin "${version}" || true
          git tag "${version}" HEAD
          git push origin "${version}:${version}"
      - name: 'Update dependents'
        env:
          GITHUB_TOKEN: ${{ secrets.JENKINS_GITHUB_PAT }}
        run: |
          version=v"$(cat package/version)"
          curl --fail                                                          \
            -X POST                                                            \
            -H "Accept: application/vnd.github+json"                           \
            -H "Authorization: Bearer ${GITHUB_TOKEN}"                         \
            -H "X-GitHub-Api-Version: 2022-11-28"                              \
            https://api.github.com/repos/runtimeverification/devops/dispatches \
            -d '{"event_type":"on-demand-test","client_payload":{"repo":"runtimeverification/pyk","version":"'${version}'"}}'

  gh-pages:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs: tag-release
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          fetch-depth: 0
      - name: Configure GitHub user
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
      - name: 'Build documentation'
        run: make docs
      - name: 'Push to gh-pages'
        run: |
          set -euxo pipefail
          version=$(cat package/version)
          git checkout gh-pages
          find . -mindepth 1 -maxdepth 1 -not -name .git -not -name docs -exec rm -rf {} \;
          cp -r docs/build/html/* .
          rm -rf docs
          touch .nojekyll
          git add -A
          git commit -m "gh-pages: update to v${version}" || true
          git push

  publish-docker:
    name: 'Publish docker image'
    runs-on: [self-hosted, linux, normal]
    timeout-minutes: 10
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v4
      - name: 'Build Docker image for release'
        run: |
          K_VERSION=$(cut --delim=v --field=2 deps/k_release)
          PYK_VERSION=$(cat package/version)

          docker image build .                              \
            -f package/Dockerfile                           \
            --build-arg K_VERSION=${K_VERSION}              \
            --build-arg PYK_VERSION=${PYK_VERSION}          \
            --tag runtimeverificationinc/kframework-pyk:${PYK_VERSION}

          docker run --rm runtimeverificationinc/kframework-pyk:${PYK_VERSION}
          docker run --rm runtimeverificationinc/kframework-pyk:${PYK_VERSION} kompile --version
      - name: 'Push docker image'
        env:
          USERNAME: "rvdockerhub" # ${{ secrets.DOCKERHUB_USERNAME }}
          PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          PYK_VERSION=$(cat package/version)
          set -eux
          docker login --username ${USERNAME} --password ${PASSWORD}
          docker image push runtimeverificationinc/kframework-pyk:${PYK_VERSION}

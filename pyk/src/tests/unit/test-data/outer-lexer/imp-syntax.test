syntax Stmt ::= Block
              | Id "=" AExp ";"            [klabel(_=_;), symbol, strict(2)]
              | "if" "(" BExp ")"
                Block "else" Block         [klabel(if(_)_else_), symbol, strict(1)]
              | "while" "(" BExp ")" Block [klabel(while(_)_), symbol]
              > Stmt Stmt                  [klabel(__), symbol, left]
syntax Pgm  ::= "int" Ids ";" Stmt         [klabel(int_;_), symbol]
syntax Ids  ::= List{Id,","}               [klabel(_,_), symbol]
===
KW_SYNTAX
syntax

ID_UPPER
Stmt

DCOLONEQ
::=

ID_UPPER
Block

VBAR
|

ID_UPPER
Id

STRING
"="

ID_UPPER
AExp

STRING
";"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_=_;

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
strict

LPAREN
(

ATTR_CONTENT
2

RPAREN
)

RBRACK
]

VBAR
|

STRING
"if"

STRING
"("

ID_UPPER
BExp

STRING
")"

ID_UPPER
Block

STRING
"else"

ID_UPPER
Block

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
if(_)_else_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
strict

LPAREN
(

ATTR_CONTENT
1

RPAREN
)

RBRACK
]

VBAR
|

STRING
"while"

STRING
"("

ID_UPPER
BExp

STRING
")"

ID_UPPER
Block

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
while(_)_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

GT
>

ID_UPPER
Stmt

ID_UPPER
Stmt

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
__

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Pgm

DCOLONEQ
::=

STRING
"int"

ID_UPPER
Ids

STRING
";"

ID_UPPER
Stmt

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
int_;_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Ids

DCOLONEQ
::=

KW_LIST
List

LBRACE
{

ID_UPPER
Id

COMMA
,

STRING
","

RBRACE
}

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_,_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

EOF


  {
    Result:GeneratedTopCell
  #Equals
    <T>
      <threads>
        .ThreadCellMap
      </threads>
      <genv>
        main |-> 2
        x |-> 0
        y |-> 1
      </genv>
      <store>
        0 |-> 0
        1 |-> 0
        2 |-> lambda ( void , .Params , { x = 1 ; y = 0 ; spawn { x = 0 ; } ; while ( 1 <= x ) { y = y + 1 ; } print ( y , "\n" , .Vals ) ; } )
      </store>
      <busy>
        .Set
      </busy>
      <terminated>
        SetItem ( 0 )
        SetItem ( 1 )
      </terminated>
      <input>
        ListItem ( #buffer ( "\n" ~> .K ) )
        ListItem ( "off" )
        ListItem ( #istream ( 0 ) )
      </input>
      <output>
        ListItem ( #ostream ( 1 ) )
        ListItem ( "off" )
        ListItem ( #buffer ( "0\n" ~> .K ) )
      </output>
      <nextLoc>
        3
      </nextLoc>
    </T>
  }
#Or
  {
    Result:GeneratedTopCell
  #Equals
    <T>
      <threads>
        .ThreadCellMap
      </threads>
      <genv>
        main |-> 2
        x |-> 0
        y |-> 1
      </genv>
      <store>
        0 |-> 0
        1 |-> 1
        2 |-> lambda ( void , .Params , { x = 1 ; y = 0 ; spawn { x = 0 ; } ; while ( 1 <= x ) { y = y + 1 ; } print ( y , "\n" , .Vals ) ; } )
      </store>
      <busy>
        .Set
      </busy>
      <terminated>
        SetItem ( 0 )
        SetItem ( 1 )
      </terminated>
      <input>
        ListItem ( #buffer ( "\n" ~> .K ) )
        ListItem ( "off" )
        ListItem ( #istream ( 0 ) )
      </input>
      <output>
        ListItem ( #ostream ( 1 ) )
        ListItem ( "off" )
        ListItem ( #buffer ( "1\n" ~> .K ) )
      </output>
      <nextLoc>
        3
      </nextLoc>
    </T>
  }
#Or
  {
    Result:GeneratedTopCell
  #Equals
    <T>
      <threads>
        .ThreadCellMap
      </threads>
      <genv>
        main |-> 2
        x |-> 0
        y |-> 1
      </genv>
      <store>
        0 |-> 0
        1 |-> 2
        2 |-> lambda ( void , .Params , { x = 1 ; y = 0 ; spawn { x = 0 ; } ; while ( 1 <= x ) { y = y + 1 ; } print ( y , "\n" , .Vals ) ; } )
      </store>
      <busy>
        .Set
      </busy>
      <terminated>
        SetItem ( 0 )
        SetItem ( 1 )
      </terminated>
      <input>
        ListItem ( #buffer ( "\n" ~> .K ) )
        ListItem ( "off" )
        ListItem ( #istream ( 0 ) )
      </input>
      <output>
        ListItem ( #ostream ( 1 ) )
        ListItem ( "off" )
        ListItem ( #buffer ( "2\n" ~> .K ) )
      </output>
      <nextLoc>
        3
      </nextLoc>
    </T>
  }
#Or
  {
    Result:GeneratedTopCell
  #Equals
    <T>
      <threads>
        .ThreadCellMap
      </threads>
      <genv>
        main |-> 2
        x |-> 0
        y |-> 1
      </genv>
      <store>
        0 |-> 0
        1 |-> 3
        2 |-> lambda ( void , .Params , { x = 1 ; y = 0 ; spawn { x = 0 ; } ; while ( 1 <= x ) { y = y + 1 ; } print ( y , "\n" , .Vals ) ; } )
      </store>
      <busy>
        .Set
      </busy>
      <terminated>
        SetItem ( 0 )
        SetItem ( 1 )
      </terminated>
      <input>
        ListItem ( #buffer ( "\n" ~> .K ) )
        ListItem ( "off" )
        ListItem ( #istream ( 0 ) )
      </input>
      <output>
        ListItem ( #ostream ( 1 ) )
        ListItem ( "off" )
        ListItem ( #buffer ( "3\n" ~> .K ) )
      </output>
      <nextLoc>
        3
      </nextLoc>
    </T>
  }
#Or
  {
    Result:GeneratedTopCell
  #Equals
    <T>
      <threads>
        .ThreadCellMap
      </threads>
      <genv>
        main |-> 2
        x |-> 0
        y |-> 1
      </genv>
      <store>
        0 |-> 0
        1 |-> 4
        2 |-> lambda ( void , .Params , { x = 1 ; y = 0 ; spawn { x = 0 ; } ; while ( 1 <= x ) { y = y + 1 ; } print ( y , "\n" , .Vals ) ; } )
      </store>
      <busy>
        .Set
      </busy>
      <terminated>
        SetItem ( 0 )
        SetItem ( 1 )
      </terminated>
      <input>
        ListItem ( #buffer ( "\n" ~> .K ) )
        ListItem ( "off" )
        ListItem ( #istream ( 0 ) )
      </input>
      <output>
        ListItem ( #ostream ( 1 ) )
        ListItem ( "off" )
        ListItem ( #buffer ( "4\n" ~> .K ) )
      </output>
      <nextLoc>
        3
      </nextLoc>
    </T>
  }

#!/usr/bin/env bash
set -e
set -o pipefail
set -u

export PATH="$(cd "$(dirname "$0")"; pwd):$PATH"

# initialize flags
ARGV=()
bound=
depth=
params=()
allPath=true
dir=.
kompiledDir=
haskellCmd=kore-exec
cmdprefix=
outputFile=-
pattern=
noPattern=
search=false
searchType=FINAL
term=false
literal=false
outputMode=pretty
statistics=false
executeToBranch=false
proofHint=false
smtPrelude=
smt=
smtTimeout=
llvm_krun_flags=
configVars=
dryRun=false
expandMacros=true
filterSubst=

if [[ "$OSTYPE" == "darwin"* ]]; then
  LLDB_FILE="$(dirname "$0")/../lib/kllvm/lldb/k_lldb_path"
  if [[ -f "$LLDB_FILE" && -f "$(cat "$LLDB_FILE")" ]]; then
    DBG_EXE="$(cat "$LLDB_FILE")"
  else
    DBG_EXE="lldb"
  fi
  DBG_CMD=" --"
  DBG_FLAG=" -s "
else
  DBG_EXE="gdb"
  DBG_FLAG=" -x "
  DBG_CMD=" --args "
fi


KRUN=$(basename "$0")

export KTOOL="${KRUN}"
source "$(dirname "$0")/../lib/kframework/k-util.sh"
if ${verbose}; then
  llvm_krun_flags="${llvm_krun_flags} -v"
fi

# setup temp files
input_file="$(mktemp ${tempDir}/tmp.in.XXXXXXXXXX)"
expanded_input_file="$(mktemp ${tempDir}/tmp.in.XXXXXXXXXX)"
kore_output="$tempDir/result.kore"
tempFiles+=("$input_file")
tempFiles+=("$expanded_input_file")
tempFiles+=("$kore_output")

keepTempsIfDryRun () {
  # keep files used by dry-run
  if $dryRun; then
    local newArray=()
    for value in ${tempFiles[@]+"${tempFiles[@]}"}; do
        if [[ ! "$@" =~ ${value} ]]; then
          newArray+=($value)
        fi
    done
    tempFiles=()
    tempFiles=${newArray[@]+"${newArray[@]}"}
    unset newArray
  fi
}


print_usage () {
cat <<HERE
Usage: $KRUN [options] [PROGRAM] [-cNAME=VALUE] [-d DIR]
Execute a program using a K semantics that was built with kompile.

Mandatory arguments to long options are mandatory for short options too.

$KRUN expects 0 or 1 positional arguments. If a positional argument is present,
it must be a file and the contents of that file is parsed using the parser
specified with --parser and used as the value of \$PGM (unless --term is
present; see below).

General options:

$(k_util_usage)

$KRUN options:

      --bound N            Return at most N solutions  with --search
  -cNAME=VALUE             Use VALUE as the value for \$NAME. By default,
                           \`kparse -m MAINMODULE\` is used as the
                           parser. This can be overridden with -p.
      --color [on|off]     Enable/disable ANSI color codes. Overrides default,
                           which is determined based on whether stdout is a
                           terminal.
      --debugger           Launch the backend in a debugging console.
                           Currently only supported on LLVM backend.
      --debugger-batch     Launch the backend in a debugging console in batch
                           mode. Currently only supported on LLVM backend.
      --debugger-command FILE  Execute GDB commands from FILE to debug program.
                               Currently only supported on LLVM backend.
  -d, --definition DIR     Exact path to the kompiled directory.
      --depth N            Execute at most N rewrite steps
      --dry-run            Do not execute backend, but instead print the
                           command that would be executed to stdout.
      --execute-to-branch  Execute until a non-deterministic state is reached, then exit.
                           Requires the --enable-search option to have been passed to kompile
                           on the LLVM backend.
      --haskell-backend-command CMD  use CMD instead of kore-exec to invoke
                                     Haskell backend
  -h, --help               Display this help and exit
      --io [on|off]        Enable/disable reading/writing to actual
                           stdin/stdout via cells with "stream" attribute.
                           Defaults to enabled when performing concrete
                           execution, and disabled when --search is passed.
      --no-expand-macros   Don't expand macros in initial configuration.
                           This assumes that the initial configuration contains
                           no macro terms. Behavior is undefined if this is not
                           true.
      --no-pattern         Skip pattern matching the result of searches on the
                           llvm backend against the default search pattern.
      --no-substitution-filtering  Don't filter conjuncts with anonymous
                                   variables from substitution output
  -o, --output MODE        Select output mode to use when unparsing. Valid
                           values are pretty, program, kast, json,
                           kore, and none.
      --output-file FILE   Print final configuration to FILE
  -pNAME=VALUE             Use VALUE as a command to parse \$NAME. For example,
                           if NAME=PGM and VALUE=cat, and the user also passes
                           \`-cPGM=foo\`, a temporary file containing the word
                           "foo" is created and cat is called on it to provide
                           the value of \$PGM as a KORE term.
      --parser VALUE       Use VALUE as parser to parse \$PGM. For example,
                           if the user says "$KRUN --parser cat foo.kore", then
                           \`cat foo.kore\` is invoked and the result on stdout
                           is used as the value of \$PGM as a KORE term.
      --pattern PAT        Use PAT as the search pattern with --search. Can
                           also be used without --search to match the output
                           configuration against a pattern and print the
                           substitution. Not supported on LLVM backend.
      --proof-hint         Generate proof hint instead of final configuration.
                           Ignores \`--output\`.
      --save-temps         Do not delete temporary files when $KRUN terminates.
      --search             Search for all possible output states after
                           rewriting. Only supported on symbolic backends.
      --search-all         Like --search, but also return interim states
      --search-final       Synonym for --search
      --search-one-or-more-steps  Like --search-all, but do not include the
                                  initial state in the result
      --search-one-step    Search for all possible states that are the
                           immediate successor of the input.
      --smt [none|z3]      Enable/disable SMT solver for symbolic execution.
      --smt-prelude FILE   Prepend FILE to all SMT queries during symbolic
                           execution.
      --smt-timeout SMT_TIMEOUT
                           Timeout for calls to the SMT solver, in milliseconds
      --statistics         Print number of steps executed. Currently only
                           supported on LLVM backend.
      --term               Use the value that would otherwise be considered the
                           value for \$PGM as the entire input configuration.
                           i.e., skip composing configuration from
                           configuration variables.
      --version            Print version of K
      --                   Interpret all arguments following as positional
                           arguments.
HERE
}

ORIG_ARGV=("$@")

# parse options
while [[ $# -gt 0 ]]
do
  arg="$1"
  if $literal; then
    ARGV+=("$1")
  else
    case "$arg" in
      --bound)
      bound="$2"
      shift
      ;;

      --depth)
      depth="$2"
      shift
      ;;

      --color)
      colorOpt="$2"
      case "$2" in
        on)
        color=true
        ;;

        off)
        color=false
        ;;

        *)
        error 1 'Invalid value for --color. Should be "on" or "off".'
        ;;
      esac
      shift
      ;;

      -p*=*)
      keyval=${1#-p}
      key=${keyval%%=*}
      val=${keyval#*=}
      var_name="parser_$key"
      printf -v "$var_name" %s "$val"
      ;;

      -c*=*)
      keyval=${1#-c}
      key=${keyval%%=*}
      val=${keyval#*=}
      var_name="config_var_$key"
      params+=("$key")
      tempFile="$(mktemp ${tempDir}/tmp."$key".pretty.XXXXXXXXXX)"
      tempFiles+=("$tempFile")
      printf %s "$val" > "$tempFile"
      printf -v "$var_name" %s "$tempFile"
      ;;

      --dry-run)
      cmdprefix="echo "
      dryRun=true
      ;;

      --haskell-backend-command)
      haskellCmd="$2"
      shift
      ;;

      -h|--help)
      print_usage
      exit 0
      ;;

      -d|--definition)
      kompiledDir="$2"
      shift
      ;;

      --io)
      case "$2" in
        on)
        io=true
        ;;

        off)
        io=false
        ;;

        *)
        error 1 'Invalid value for --io. Should be "on" or "off".'
        ;;
      esac
      shift
      ;;

      --no-substitution-filtering)
      filterSubst=--no-substitution-filtering
      ;;

      --no-expand-macros)
      expandMacros=false
      ;;

      -o|--output)
      case "$2" in
        pretty) ;;
        program) ;;
        kast) ;;
        json) ;;
        kore) ;;
        none) ;;

        *)
        error 1 'Invalid value for --output. Should be one of "pretty", "program", "kast", "json", "kore", or "none".'
        ;;
      esac
      outputMode="$2"
      shift
      ;;

      --output-file)
      outputFile="$2"
      shift
      ;;

      --parser)
      var_name="parser_PGM"
      printf -v "$var_name" %s "$2"
      shift
      ;;

      --pattern)
      if [ -z "$noPattern" ]; then
        pattern="$2"
      else
        error 1 "The option --pattern cannot be used with the option --no-pattern"
      fi
      shift
      ;;

      --no-pattern)
      if [ -z "$pattern" ]; then
        noPattern=true
      else
        error 1 "The option --no-pattern cannot be used with the option --pattern"
      fi
      ;;

      --proof-hint)
      proofHint=true
      ;;

      --search)
      search=true
      searchType='FINAL'
      ;;

      --search-all)
      search=true
      searchType='STAR'
      ;;

      --search-final)
      search=true
      searchType='FINAL'
      ;;

      --search-one-or-more-steps)
      search=true
      searchType='PLUS'
      ;;

      --search-one-step)
      search=true
      searchType='ONE'
      ;;

      --smt)
      case "$2" in
        none|z3)
        smt="$2"
        ;;

        *)
        error 1 'Invalid value for --smt. Should be "z3" or "none".'
        ;;
      esac
      shift
      ;;

      --smt-prelude)
      smtPrelude="$2"
      shift
      ;;

      --smt-timeout)
      smtTimeout="$2"
      shift
      ;;

      --term)
      term=true
      ;;

      --save-temps)
      trap - INT TERM EXIT
      llvm_krun_flags="$llvm_krun_flags -save-temps"
      ;;

      --version)
      kompile --version
      exit 0
      ;;

      --debugger)
      cmdprefix="$DBG_EXE $DBG_CMD"
      ;;

      --debugger-command)
        debugCommandFile="$2"
        cmdprefix="$DBG_EXE $DBG_FLAG $debugCommandFile $DBG_CMD"
      shift
      ;;

      --debugger-batch)
      if [[ $cmdprefix == *gdb* || $cmdprefix == *lldb* ]]; then
        cmdprefix="$DBG_EXE --batch $DBG_FLAG $debugCommandFile $DBG_CMD"
      else
        DBG_CMD=" --batch $DBG_CMD"
      fi
      ;;


      --statistics)
      statistics=true
      ;;

      --execute-to-branch)
      executeToBranch=true
      ;;

      --)
      literal=true
      ;;

      -*)
      print_usage
      exit 1
      ;;

      *)
      ARGV+=("$1")
      ;;
    esac
  fi
  shift
done

if [ -z "${io+unset}" ]; then
  if $search; then
    io=false
  else
    io=true
  fi
fi

if [ -z "${color+unset}" ]; then
  if [[ "$outputFile" == "-" && -t 1 ]]; then
    color=true
    colorOpt=on
  else
    color=false
    colorOpt=off
  fi
fi

if [[ "${#ARGV[@]}" -gt 1 ]]; then
  error 1 'Cannot pass more than one configuration variable as a positional argument.'
fi

# Compute kompiled directory
hasKompiledDir=false
if [[ -d $kompiledDir ]]; then
  hasKompiledDir=true
else
  for file in "$dir"/*-kompiled; do
    [ ! -d "$file" ] && continue
    kompiledDir=$file
    if $hasKompiledDir; then
      error 1 'Multiple compiled definitions found in the current working directory: ' "$dir"/*-kompiled
    fi
    hasKompiledDir=true
  done
fi

if ! $hasKompiledDir; then
  error 1 'Could not find a compiled definition. Use --definition to specify one.'
fi

# Process configuration variables
hasArgv=false
if [[ "${#ARGV[@]}" -gt 0 ]]; then
  config_var_PGM="${ARGV[0]}"
  hasArgv=true
  params+=("PGM")
fi

mainModuleName=$(cat "$kompiledDir"/mainModule.txt)

if [ "$outputFile" = "-" ]; then
  outputFile=/dev/stdout
fi

# verify and parse config variables/cmd line parameters
source "$kompiledDir/configVars.sh"
if $term; then
  if [ -z "${parser_PGM+unset}" ]; then
    execute kparse --definition "$kompiledDir" --module "$mainModuleName" "$config_var_PGM" > "$input_file"
  else
    execute $parser_PGM "$config_var_PGM" > "$input_file"
  fi
else
  for configVar in ${declaredConfigVars[@]+"${declaredConfigVars[@]}"}; do
    if [[ $configVar != "IO" && $configVar != "STDIN" && ! ${params[@]+"${params[@]}"} =~ "$configVar" ]]; then
      error 1 "Configuration variable missing: \$$configVar. Use -c$configVar=<Value> in the command line to set."
    fi
  done
  for name in ${params[@]+"${params[@]}"}; do
    parser_name="parser_$name"
    config_name="config_var_$name"
    tempFile="$(mktemp ${tempDir}/tmp.in."$name".XXXXXXXXXX)"
    tempFiles+=("$tempFile")
    if [[ ! ${declaredConfigVars[@]+"${declaredConfigVars[@]}"} =~ "$name" ]]; then
      if [ "$name" = "PGM" ]; then
        error 1 "Configuration variable \$PGM does not exist. Do not pass a positional argument to $KRUN."
      else
        error 1 "Configuration variable \$$name does not exist. Do not pass -c$name to $KRUN."
      fi
    fi
    indirectName="declaredConfigVar_$name"
    indirectModuleName="declaredConfigVarModule_$name"
    sortName=${!indirectName}
    moduleName=${!indirectModuleName:-unset}
    if [ -z "${!parser_name+unset}" ]; then
      if [ "$name" = "PGM" ]; then
        if $hasArgv; then
          parser=(kparse --definition "$kompiledDir")
        else
          parser=(kparse --definition "$kompiledDir" --module "$mainModuleName")
        fi
      elif [ -z "${!indirectModuleName+unset}" ]; then
        parser=(kparse --sort "$sortName" --definition "$kompiledDir" --module "$mainModuleName")
      else
        parser=(kparse --sort "$sortName" --definition "$kompiledDir" --module "$moduleName")
      fi
    else
      parser=("${!parser_name}")
    fi
    execute ${parser[@]+"${parser[@]}"} "${!config_name}" > "$tempFile"
    configVars="$configVars -c $name $(basename $tempFile) $sortName korefile"
  done
  if [[ ${declaredConfigVar_IO+unset} && "${declaredConfigVar_IO}" = "String" ]]; then
    if $io; then
      ioText=on
    else
      ioText=off
    fi
    configVars="$configVars -c IO \dv{SortString{}}(\"$ioText\") String kore"
  fi
  if [[ ${declaredConfigVar_STDIN+unset} && "${declaredConfigVar_STDIN}" = "String" ]]; then
    if $io; then
      stdinText=
    else
      unescaped=$(</dev/stdin)
      stdinText=$(awk 'BEGIN {for(n=0;n<256;n++)ord[sprintf("%c",n)]=n} {text = text $0 ORS} END {split(text, chars, ""); for (i=1; i<=length(text); i++) { if (chars[i] == "\"") { printf("%s", "\\\"") } else if (chars[i] == "\\") { printf("%s", "\\\\") } else if (chars[i] == "\n") { printf("%s", "\\n") } else if (chars[i] == "\t") { printf("%s", "\\t") } else if (chars[i] == "\r") { printf("%s", "\\r") } else if (chars[i] == "\f") { printf("%s", "\\f") } else if (ord[chars[i]] >= 32 && ord[chars[i]] < 127) { printf("%s", chars[i]) } else { printf("\\x%02x", ord[chars[i]]) } } }' <<< "$unescaped")
    fi
    stdinFile="$(mktemp ${tempDir}/tmp.stdin.XXXXXXXXXX)"
    tempFiles+=("$stdinFile")
    printf '\dv{SortString{}}(\"%s\")\n' "$stdinText" > "$stdinFile"
    configVars="$configVars -c STDIN $(basename $stdinFile) String korefile"
  fi
  abs_kompiled_dir=`echo "$(cd "$(dirname "$kompiledDir")"; pwd -P)/$(basename "$kompiledDir")"`
  # llvm-krun creates temp files in the cwd so execute it in $tempDir instead
  (cd $tempDir; execute llvm-krun $configVars --directory "$abs_kompiled_dir" $llvm_krun_flags --dry-run -nm -o "$(basename $input_file)")
fi

# Expand macros
if $expandMacros; then
  execute kore-expand-macros "$kompiledDir" "$input_file" > "$expanded_input_file"
else
  execute cp "$input_file" "$expanded_input_file"
fi
backendName=$(cat "$kompiledDir"/backend.txt)
# Invoke backend
if [ "$backendName" = "llvm" ]; then
  interpreter_flags=

  if $statistics; then
    interpreter_flags=--statistics
  fi

  if $executeToBranch; then
    interpreter_flags+=" --execute-to-branch"
  fi

  if $proofHint; then
    interpreter_flags+=" --proof-output"
  fi

  keepTempsIfDryRun "$tempDir" "$expanded_input_file" "$kore_output"
  if $search || [ -n "$pattern" ]; then
    if [ ! -f "$kompiledDir/search" ] || [ ! -x "$kompiledDir/search" ]; then
      error 1 'You must pass --enable-search to kompile to be able to use krun --search with the LLVM backend'
    fi
    patternFile="$(mktemp ${tempDir}/tmp.pattern.XXXXXXXXXX)"
    tempFiles+=("$patternFile")
    if [ -z "$pattern" ]; then
      echo '\and{SortGeneratedTopCell{}}(VarResult:SortGeneratedTopCell{},\top{SortGeneratedTopCell{}}())' > "$patternFile"
    else
      execute k-compile-search-pattern --definition "$kompiledDir" "$pattern" > "$patternFile"
    fi

    if [[ $searchType != "FINAL" ]]; then
      error 1 'Backend llvm does not support --search-all, --search-one-or-more-steps, or --search-one-step yet.'
    fi
    disjunctFile="$(mktemp ${tempDir}/tmp.disjunction.XXXXXXXXXX)"
    tempFiles+=("$disjunctFile")
    if $search; then
      llvmCommand="$kompiledDir/search"
      if [ -n "$bound" ]; then
        interpreter_flags="$interpreter_flags --bound $bound"
      fi
    else
      llvmCommand="$kompiledDir/interpreter"
    fi
    set +e
    execute $cmdprefix "$llvmCommand" "$expanded_input_file" "${depth:--1}" "$disjunctFile" $interpreter_flags
    result=$?
    set -e
    if [ -z "$noPattern" ]; then
      execute kore-match-disjunction "$kompiledDir/definition.kore" --module "$mainModuleName" --disjunction "$disjunctFile" --match "$patternFile" --output "$kore_output"
    else
      execute cp "$disjunctFile" "$kore_output"
    fi
  else
    set +e
    execute $cmdprefix "$kompiledDir/interpreter" "$expanded_input_file" "${depth:--1}" "$kore_output" $interpreter_flags
    result=$?
    set -e
  fi
elif [ "$backendName" = "haskell" ] ; then
  # Haskell backend
  koreExecFlags=
  depthFlags=
  defFile="definition.kore"
  if [ -f "$kompiledDir/haskellDefinition.bin" ]; then
    defFile="haskellDefinition.bin"
  fi

  if [ -n "$depth" ]; then
    depthFlags="--depth $depth"
  fi
  if [ -n "$smtPrelude" ]; then
    koreExecFlags="$koreExecFlags --smt-prelude $smtPrelude"
  fi
  if [ -n "$smt" ]; then
    koreExecFlags="$koreExecFlags --smt $smt"
  fi
  if [ -n "$smtTimeout" ]; then
    koreExecFlags="$koreExecFlags --smt-timeout $smtTimeout"
  fi
  if $executeToBranch; then
    koreExecFlags="$koreExecFlags --execute-to-branch"
  fi
  if $search || [ -n "$pattern" ]; then
    patternFile="$(mktemp ${tempDir}/tmp.pattern.XXXXXXXXXX)"
    tempFiles+=("$patternFile")
    if [ -z "$pattern" ]; then
      echo '\and{SortGeneratedTopCell{}}(VarResult:SortGeneratedTopCell{},\top{SortGeneratedTopCell{}}())' > "$patternFile"
    else
      k-compile-search-pattern --definition "$kompiledDir" "$pattern" > "$patternFile"
    fi

    if ! $search; then
      final_input="$(mktemp ${tempDir}/tmp.in.XXXXXXXXXX)"
      tempFiles+=("$final_input")
      keepTempsIfDryRun "$tempDir" "$final_input" "$expanded_input_file" "$kore_output"
      set +e
      execute $cmdprefix "$haskellCmd" "$kompiledDir/$defFile" --module "$mainModuleName" --pattern "$expanded_input_file" --output "$final_input" $koreExecFlags
      set -e
      depthFlags="--depth 0"
    else
      final_input="$expanded_input_file"
    fi

    if [ -n "$bound" ]; then
      koreExecFlags="$koreExecFlags --bound $bound"
    fi
    keepTempsIfDryRun "$tempDir" "$final_input" "$patternFile" "$kore_output"
    set +e
    execute $cmdprefix "$haskellCmd" "$kompiledDir/$defFile" --module "$mainModuleName" --pattern "$final_input" --output "$kore_output" --searchType "$searchType" --search "$patternFile" $koreExecFlags $depthFlags
    result=$?
    set -e
  else
    keepTempsIfDryRun "$tempDir" "$expanded_input_file" "$kore_output"
    set +e
    execute $cmdprefix "$haskellCmd" "$kompiledDir/$defFile" --module "$mainModuleName" --pattern "$expanded_input_file" --output "$kore_output" $koreExecFlags $depthFlags
    result=$?
    set -e
  fi
else
  error 1 "Backend $backendName not supported."
fi

if $proofHint; then
  output "$outputFile" execute cat "$kore_output"
  exit ${result}
fi

# Unparsing
if ! $dryRun; then
  if [ -f "$kore_output" ]; then
    if $statistics; then
      steps=$(head -1 "$kore_output")
      echo "[$steps steps]"
      kore_output2="$(mktemp ${tempDir}/tmp.out.XXXXXXXXXX)"
      tail -1 "$kore_output" > "$kore_output2"
      mv "$kore_output2" "$kore_output"
    fi

    output "$outputFile" execute kore-print --definition "$kompiledDir" --output "$outputMode" "$kore_output" --color "$colorOpt" $filterSubst
  else
    error ${result} "Backend crashed during rewriting with exit code ${result}"
  fi
fi

exit ${result}

module RANGEMAP
  imports private BOOL-SYNTAX
  imports private INT-SYNTAX
  imports private LIST
  imports private SET

  syntax Range ::= "[" KItem "," KItem ")"    [klabel(Rangemap:Range), symbol]

  syntax RangeMap [hook(RANGEMAP.RangeMap)]
  syntax RangeMap ::= RangeMap RangeMap                        [left, function, hook(RANGEMAP.concat), klabel(_RangeMap_), symbol, assoc, comm, unit(.RangeMap), element(_r|->_), index(0), format(%1%n%2)]
  syntax RangeMap ::= ".RangeMap"                         [function, total, hook(RANGEMAP.unit), klabel(.RangeMap), symbol, latex(\dotCt{RangeMap})]
  syntax RangeMap ::= Range "r|->" KItem                      [function, hook(RANGEMAP.elementRng), klabel(_r|->_), symbol, latex({#1}\mapsto{#2}), injective]

  syntax priorities _r|->_ > _RangeMap_ .RangeMap
  syntax non-assoc _r|->_

  syntax KItem ::= RangeMap "[" KItem "]"                    [function, hook(RANGEMAP.lookup), klabel(RangeMap:lookup), symbol]
  syntax KItem ::= RangeMap "[" KItem "]" "orDefault" KItem      [function, total, hook(RANGEMAP.lookupOrDefault), klabel(RangeMap:lookupOrDefault)]
  syntax Range ::= "find_range" "(" RangeMap "," KItem ")"                    [function, hook(RANGEMAP.find_range), klabel(RangeMap:find_range)]
  syntax RangeMap ::= RangeMap "[" keyRange: Range "<-" value: KItem "]"           [function, klabel(RangeMap:update), symbol, hook(RANGEMAP.updateRng), prefer]
  syntax RangeMap ::= RangeMap "[" Range "<-" "undef" "]"     [function, hook(RANGEMAP.removeRng), klabel(_r[_<-undef]), symbol]
  syntax RangeMap ::= RangeMap "-RangeMap" RangeMap                 [function, total, hook(RANGEMAP.difference), latex({#1}-_{\it RangeMap}{#2})]
  syntax RangeMap ::= updateRangeMap(RangeMap, RangeMap)            [function, total, hook(RANGEMAP.updateAll)]
  syntax RangeMap ::= removeAll(RangeMap, Set)            [function, hook(RANGEMAP.removeAll)]
  syntax Set ::= keys(RangeMap)                      [function, total, hook(RANGEMAP.keys)]
  syntax List ::= "keys_list" "(" RangeMap ")"       [function, hook(RANGEMAP.keys_list)]
  syntax Bool ::= KItem "in_keys" "(" RangeMap ")"       [function, total, hook(RANGEMAP.in_keys)]
  syntax List ::= values(RangeMap)                   [function, hook(RANGEMAP.values)]
  syntax Int ::= size(RangeMap)                      [function, total, hook(RANGEMAP.size), klabel(sizeRangeMap)]
  syntax Bool ::= RangeMap "<=RangeMap" RangeMap               [function, total, hook(RANGEMAP.inclusion)]
  syntax KItem ::= choice(RangeMap)                      [function, hook(RANGEMAP.choice), klabel(RangeMap:choice)]
endmodule
===
KW_MODULE
module

MODNAME
RANGEMAP

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
INT-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
LIST

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
SET

KW_SYNTAX
syntax

ID_UPPER
Range

DCOLONEQ
::=

STRING
"["

ID_UPPER
KItem

STRING
","

ID_UPPER
KItem

STRING
")"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
Rangemap:Range

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.RangeMap

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_UPPER
RangeMap

ID_UPPER
RangeMap

LBRACK
[

ATTR_KEY
left

COMMA
,

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.concat

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_RangeMap_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
assoc

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
unit

LPAREN
(

ATTR_CONTENT
.RangeMap

RPAREN
)

COMMA
,

ATTR_KEY
element

LPAREN
(

ATTR_CONTENT
_r|->_

RPAREN
)

COMMA
,

ATTR_KEY
index

LPAREN
(

ATTR_CONTENT
0

RPAREN
)

COMMA
,

ATTR_KEY
format

LPAREN
(

ATTR_CONTENT
%1%n%2

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

STRING
".RangeMap"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.unit

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
.RangeMap

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\dotCt{RangeMap}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_UPPER
Range

STRING
"r|->"

ID_UPPER
KItem

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.elementRng

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_r|->_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mapsto{#2}

RPAREN
)

COMMA
,

ATTR_KEY
injective

RBRACK
]

KW_SYNTAX
syntax

KW_PRIORITIES
priorities

KLABEL
_r|->_

GT
>

KLABEL
_RangeMap_

KLABEL
.RangeMap

KW_SYNTAX
syntax

KW_NONASSOC
non-assoc

KLABEL
_r|->_

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"["

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.lookup

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
RangeMap:lookup

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"["

ID_UPPER
KItem

STRING
"]"

STRING
"orDefault"

ID_UPPER
KItem

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.lookupOrDefault

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
RangeMap:lookupOrDefault

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Range

DCOLONEQ
::=

STRING
"find_range"

STRING
"("

ID_UPPER
RangeMap

STRING
","

ID_UPPER
KItem

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.find_range

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
RangeMap:find_range

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"["

ID_LOWER
keyRange

COLON
:

ID_UPPER
Range

STRING
"<-"

ID_LOWER
value

COLON
:

ID_UPPER
KItem

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
RangeMap:update

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.updateRng

RPAREN
)

COMMA
,

ATTR_KEY
prefer

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"["

ID_UPPER
Range

STRING
"<-"

STRING
"undef"

STRING
"]"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.removeRng

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_r[_<-undef]

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"-RangeMap"

ID_UPPER
RangeMap

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.difference

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}-_{\it RangeMap}{#2}

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_LOWER
updateRangeMap

LPAREN
(

ID_UPPER
RangeMap

COMMA
,

ID_UPPER
RangeMap

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.updateAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
RangeMap

DCOLONEQ
::=

ID_LOWER
removeAll

LPAREN
(

ID_UPPER
RangeMap

COMMA
,

ID_UPPER
Set

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.removeAll

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Set

DCOLONEQ
::=

ID_LOWER
keys

LPAREN
(

ID_UPPER
RangeMap

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.keys

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

STRING
"keys_list"

STRING
"("

ID_UPPER
RangeMap

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.keys_list

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
KItem

STRING
"in_keys"

STRING
"("

ID_UPPER
RangeMap

STRING
")"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.in_keys

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
values

LPAREN
(

ID_UPPER
RangeMap

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.values

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Int

DCOLONEQ
::=

ID_LOWER
size

LPAREN
(

ID_UPPER
RangeMap

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.size

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
sizeRangeMap

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

ID_UPPER
RangeMap

STRING
"<=RangeMap"

ID_UPPER
RangeMap

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.inclusion

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
choice

LPAREN
(

ID_UPPER
RangeMap

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
RANGEMAP.choice

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
RangeMap:choice

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

EOF


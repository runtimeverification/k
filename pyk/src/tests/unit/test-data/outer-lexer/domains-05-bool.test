module SORT-BOOL
  syntax Bool [hook(BOOL.Bool)]
endmodule


module BOOL-SYNTAX
  imports SORT-BOOL
  syntax Bool ::= "true"  [token]
  syntax Bool ::= "false" [token]
endmodule


module BOOL-COMMON
  imports private BASIC-K
  imports BOOL-SYNTAX

  syntax Bool ::= "notBool" Bool          [function, total, klabel(notBool_), symbol, smt-hook(not), group(boolOperation), latex(\neg_{\scriptstyle\it Bool}{#1}), hook(BOOL.not)]
                > Bool "andBool" Bool     [function, total, klabel(_andBool_), symbol, left, smt-hook(and), group(boolOperation), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), hook(BOOL.and)]
                | Bool "andThenBool" Bool [function, total, klabel(_andThenBool_), symbol, left, smt-hook(and), group(boolOperation), hook(BOOL.andThen)]
                | Bool "xorBool" Bool     [function, total, klabel(_xorBool_), symbol, left, smt-hook(xor), group(boolOperation), hook(BOOL.xor)]
                | Bool "orBool" Bool      [function, total, klabel(_orBool_), symbol, left, smt-hook(or), group(boolOperation), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), hook(BOOL.or)]
                | Bool "orElseBool" Bool  [function, total, klabel(_orElseBool_), symbol, left, smt-hook(or), group(boolOperation), hook(BOOL.orElse)]
                | Bool "impliesBool" Bool [function, total, klabel(_impliesBool_), symbol, left, smt-hook(=>), group(boolOperation), hook(BOOL.implies)]
                > left:
                  Bool "==Bool" Bool      [function, total, klabel(_==Bool_), symbol, left, comm, smt-hook(=), hook(BOOL.eq)]
                | Bool "=/=Bool" Bool     [function, total, klabel(_=/=Bool_), symbol, left, comm, smt-hook(distinct), hook(BOOL.ne)]

  rule notBool true => false
  rule notBool false => true

  rule true andBool B:Bool => B:Bool
  rule B:Bool andBool true => B:Bool
  rule false andBool _:Bool => false
  rule _:Bool andBool false => false

  rule true andThenBool K::Bool => K
  rule K::Bool andThenBool true => K
  rule false andThenBool _ => false
  rule _ andThenBool false => false

  rule false xorBool B:Bool => B:Bool
  rule B:Bool xorBool false => B:Bool
  rule B:Bool xorBool B:Bool => false

  rule true orBool _:Bool => true
  rule _:Bool orBool true => true
  rule false orBool B:Bool => B
  rule B:Bool orBool false => B

  rule true orElseBool _ => true
  rule _ orElseBool true => true
  rule false orElseBool K::Bool => K
  rule K::Bool orElseBool false => K

  rule true impliesBool B:Bool => B
  rule false impliesBool _:Bool => true
  rule _:Bool impliesBool true => true
  rule B:Bool impliesBool false => notBool B

  rule B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)
endmodule


module BOOL-KORE [kore, symbolic]
  imports BOOL-COMMON

  rule {true #Equals notBool @B} => {false #Equals @B} [simplification]
  rule {notBool @B #Equals true} => {@B #Equals false} [simplification]
  rule {false #Equals notBool @B} => {true #Equals @B} [simplification]
  rule {notBool @B #Equals false} => {@B #Equals true} [simplification]

  rule {true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2} [simplification]
  rule {@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true} [simplification]
  rule {false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2} [simplification]
  rule {@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false} [simplification]
endmodule


module BOOL
  imports BOOL-COMMON
  imports BOOL-KORE
endmodule
===
KW_MODULE
module

MODNAME
SORT-BOOL

KW_SYNTAX
syntax

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.Bool

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BOOL-SYNTAX

KW_IMPORTS
imports

MODNAME
SORT-BOOL

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

STRING
"true"

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

STRING
"false"

LBRACK
[

ATTR_KEY
token

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BOOL-COMMON

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_IMPORTS
imports

MODNAME
BOOL-SYNTAX

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

STRING
"notBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
notBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
not

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
\neg_{\scriptstyle\it Bool}{#1}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.not

RPAREN
)

RBRACK
]

GT
>

ID_UPPER
Bool

STRING
"andBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_andBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
and

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\wedge_{\scriptstyle\it Bool}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.and

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"andThenBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_andThenBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
and

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.andThen

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"xorBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_xorBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
xor

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.xor

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"orBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_orBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
or

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\vee_{\scriptstyle\it Bool}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.or

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"orElseBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_orElseBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
or

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.orElse

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"impliesBool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_impliesBool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
=>

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
boolOperation

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.implies

RPAREN
)

RBRACK
]

GT
>

KW_LEFT
left

COLON
:

ID_UPPER
Bool

STRING
"==Bool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_==Bool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
=

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.eq

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
Bool

STRING
"=/=Bool"

ID_UPPER
Bool

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_=/=Bool_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
left

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
distinct

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
BOOL.ne

RPAREN
)

RBRACK
]

KW_RULE
rule

BUBBLE
notBool true => false

KW_RULE
rule

BUBBLE
notBool false => true

KW_RULE
rule

BUBBLE
true andBool B:Bool => B:Bool

KW_RULE
rule

BUBBLE
B:Bool andBool true => B:Bool

KW_RULE
rule

BUBBLE
false andBool _:Bool => false

KW_RULE
rule

BUBBLE
_:Bool andBool false => false

KW_RULE
rule

BUBBLE
true andThenBool K::Bool => K

KW_RULE
rule

BUBBLE
K::Bool andThenBool true => K

KW_RULE
rule

BUBBLE
false andThenBool _ => false

KW_RULE
rule

BUBBLE
_ andThenBool false => false

KW_RULE
rule

BUBBLE
false xorBool B:Bool => B:Bool

KW_RULE
rule

BUBBLE
B:Bool xorBool false => B:Bool

KW_RULE
rule

BUBBLE
B:Bool xorBool B:Bool => false

KW_RULE
rule

BUBBLE
true orBool _:Bool => true

KW_RULE
rule

BUBBLE
_:Bool orBool true => true

KW_RULE
rule

BUBBLE
false orBool B:Bool => B

KW_RULE
rule

BUBBLE
B:Bool orBool false => B

KW_RULE
rule

BUBBLE
true orElseBool _ => true

KW_RULE
rule

BUBBLE
_ orElseBool true => true

KW_RULE
rule

BUBBLE
false orElseBool K::Bool => K

KW_RULE
rule

BUBBLE
K::Bool orElseBool false => K

KW_RULE
rule

BUBBLE
true impliesBool B:Bool => B

KW_RULE
rule

BUBBLE
false impliesBool _:Bool => true

KW_RULE
rule

BUBBLE
_:Bool impliesBool true => true

KW_RULE
rule

BUBBLE
B:Bool impliesBool false => notBool B

KW_RULE
rule

BUBBLE
B1:Bool =/=Bool B2:Bool => notBool (B1 ==Bool B2)

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BOOL-KORE

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

MODNAME
BOOL-COMMON

KW_RULE
rule

BUBBLE
{true #Equals notBool @B} => {false #Equals @B}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{notBool @B #Equals true} => {@B #Equals false}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals notBool @B} => {true #Equals @B}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{notBool @B #Equals false} => {@B #Equals true}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{true #Equals @B1 andBool @B2} => {true #Equals @B1} #And {true #Equals @B2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{@B1 andBool @B2 #Equals true} => {@B1 #Equals true} #And {@B2 #Equals true}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals @B1 orBool @B2} => {false #Equals @B1} #And {false #Equals @B2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{@B1 orBool @B2 #Equals false} => {@B1 #Equals false} #And {@B2 #Equals false}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
BOOL

KW_IMPORTS
imports

MODNAME
BOOL-COMMON

KW_IMPORTS
imports

MODNAME
BOOL-KORE

KW_ENDMODULE
endmodule

EOF


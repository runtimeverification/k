module K-EQUAL-SYNTAX
  imports private BOOL
  imports private BASIC-K

  syntax Bool ::= left:
                  K "==K" K           [function, total, comm, smt-hook(=), hook(KEQUAL.eq), klabel(_==K_), symbol, latex({#1}\mathrel{=_K}{#2}), group(equalEqualK)]
                | K "=/=K" K          [function, total, comm, smt-hook(distinct), hook(KEQUAL.ne), klabel(_=/=K_), symbol, latex({#1}\mathrel{\neq_K}{#2}), group(notEqualEqualK)]

  syntax priority equalEqualK notEqualEqualK > boolOperation mlOp

  syntax {Sort} Sort ::= "#if" Bool "#then" Sort "#else" Sort "#fi"   [function, total, smt-hook(ite), hook(KEQUAL.ite)]

endmodule


module K-EQUAL-KORE [kore, symbolic]
  imports private BOOL
  imports K-EQUAL-SYNTAX

  rule K1:Bool ==K K2:Bool => K1 ==Bool K2 [simplification]
  rule {K1 ==K K2 #Equals true} => {K1 #Equals K2} [simplification]
  rule {true #Equals K1 ==K K2} => {K1 #Equals K2} [simplification]
  rule {K1 ==K K2 #Equals false} => #Not({K1 #Equals K2}) [simplification]
  rule {false #Equals K1 ==K K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=K K2 #Equals true} => #Not({K1 #Equals K2}) [simplification]
  rule {true #Equals K1 =/=K K2} => #Not({K1 #Equals K2}) [simplification]
  rule {K1 =/=K K2 #Equals false} => {K1 #Equals K2} [simplification]
  rule {false #Equals K1 =/=K K2} => {K1 #Equals K2} [simplification]

endmodule


module K-EQUAL
  imports private BOOL
  imports K-EQUAL-SYNTAX
  imports K-EQUAL-KORE

  rule K1:K =/=K K2:K => notBool (K1 ==K K2)

  rule #if C:Bool #then B1::K #else _ #fi => B1 requires C
  rule #if C:Bool #then _ #else B2::K #fi => B2 requires notBool C

endmodule


module K-REFLECTION
  imports BASIC-K
  imports STRING

  syntax K ::= "#configuration" [function, impure, hook(KREFLECTION.configuration)]
  syntax String ::= #sort(K) [function, hook(KREFLECTION.sort)]
  syntax KItem ::= #fresh(String)   [function, hook(KREFLECTION.fresh), impure]
  syntax KItem ::= getKLabel(K)  [function, hook(KREFLECTION.getKLabel)]

  syntax K ::= #getenv(String) [function, impure, hook(KREFLECTION.getenv)]

  syntax String ::= #kompiledDirectory() [function, hook(KREFLECTION.kompiledDir)]

  // meaningful only for the purposes of compilation to a binary, otherwise
  // undefined
  syntax List ::= #argv() [function, hook(KREFLECTION.argv)]

  // Takes as input a string and returns a K term
  syntax {Sort} Sort ::= #parseKORE(String) [function, hook(KREFLECTION.parseKORE)]
  syntax {Sort} String ::= #unparseKORE(Sort) [function, hook(KREFLECTION.printKORE)]
  syntax IOError ::= "#noParse" "(" String ")" [klabel(#noParse), symbol]

endmodule
===
KW_MODULE
module

MODNAME
K-EQUAL-SYNTAX

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BASIC-K

KW_SYNTAX
syntax

ID_UPPER
Bool

DCOLONEQ
::=

KW_LEFT
left

COLON
:

ID_UPPER
K

STRING
"==K"

ID_UPPER
K

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
=

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KEQUAL.eq

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_==K_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{=_K}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
equalEqualK

RPAREN
)

RBRACK
]

VBAR
|

ID_UPPER
K

STRING
"=/=K"

ID_UPPER
K

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
comm

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
distinct

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KEQUAL.ne

RPAREN
)

COMMA
,

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
_=/=K_

RPAREN
)

COMMA
,

ATTR_KEY
symbol

COMMA
,

ATTR_KEY
latex

LPAREN
(

ATTR_CONTENT
{#1}\mathrel{\neq_K}{#2}

RPAREN
)

COMMA
,

ATTR_KEY
group

LPAREN
(

ATTR_CONTENT
notEqualEqualK

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

KW_PRIORITY
priority

KLABEL
equalEqualK

KLABEL
notEqualEqualK

GT
>

KLABEL
boolOperation

KLABEL
mlOp

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Sort

RBRACE
}

ID_UPPER
Sort

DCOLONEQ
::=

STRING
"#if"

ID_UPPER
Bool

STRING
"#then"

ID_UPPER
Sort

STRING
"#else"

ID_UPPER
Sort

STRING
"#fi"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
total

COMMA
,

ATTR_KEY
smt-hook

LPAREN
(

ATTR_CONTENT
ite

RPAREN
)

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KEQUAL.ite

RPAREN
)

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
K-EQUAL-KORE

LBRACK
[

ATTR_KEY
kore

COMMA
,

ATTR_KEY
symbolic

RBRACK
]

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_IMPORTS
imports

MODNAME
K-EQUAL-SYNTAX

KW_RULE
rule

BUBBLE
K1:Bool ==K K2:Bool => K1 ==Bool K2

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 ==K K2 #Equals true} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{true #Equals K1 ==K K2} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 ==K K2 #Equals false} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals K1 ==K K2} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 =/=K K2 #Equals true} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{true #Equals K1 =/=K K2} => #Not({K1 #Equals K2})

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{K1 =/=K K2 #Equals false} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_RULE
rule

BUBBLE
{false #Equals K1 =/=K K2} => {K1 #Equals K2}

LBRACK
[

ATTR_KEY
simplification

RBRACK
]

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
K-EQUAL

KW_IMPORTS
imports

KW_PRIVATE
private

MODNAME
BOOL

KW_IMPORTS
imports

MODNAME
K-EQUAL-SYNTAX

KW_IMPORTS
imports

MODNAME
K-EQUAL-KORE

KW_RULE
rule

BUBBLE
K1:K =/=K K2:K => notBool (K1 ==K K2)

KW_RULE
rule

BUBBLE
#if C:Bool #then B1::K #else _ #fi => B1 requires C

KW_RULE
rule

BUBBLE
#if C:Bool #then _ #else B2::K #fi => B2 requires notBool C

KW_ENDMODULE
endmodule

KW_MODULE
module

MODNAME
K-REFLECTION

KW_IMPORTS
imports

MODNAME
BASIC-K

KW_IMPORTS
imports

MODNAME
STRING

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

STRING
"#configuration"

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.configuration

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
#sort

LPAREN
(

ID_UPPER
K

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.sort

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
#fresh

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.fresh

RPAREN
)

COMMA
,

ATTR_KEY
impure

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
KItem

DCOLONEQ
::=

ID_LOWER
getKLabel

LPAREN
(

ID_UPPER
K

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.getKLabel

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
K

DCOLONEQ
::=

ID_LOWER
#getenv

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
impure

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.getenv

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
#kompiledDirectory

LPAREN
(

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.kompiledDir

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
List

DCOLONEQ
::=

ID_LOWER
#argv

LPAREN
(

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.argv

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Sort

RBRACE
}

ID_UPPER
Sort

DCOLONEQ
::=

ID_LOWER
#parseKORE

LPAREN
(

ID_UPPER
String

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.parseKORE

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

LBRACE
{

ID_UPPER
Sort

RBRACE
}

ID_UPPER
String

DCOLONEQ
::=

ID_LOWER
#unparseKORE

LPAREN
(

ID_UPPER
Sort

RPAREN
)

LBRACK
[

ATTR_KEY
function

COMMA
,

ATTR_KEY
hook

LPAREN
(

ATTR_CONTENT
KREFLECTION.printKORE

RPAREN
)

RBRACK
]

KW_SYNTAX
syntax

ID_UPPER
IOError

DCOLONEQ
::=

STRING
"#noParse"

STRING
"("

ID_UPPER
String

STRING
")"

LBRACK
[

ATTR_KEY
klabel

LPAREN
(

ATTR_CONTENT
#noParse

RPAREN
)

COMMA
,

ATTR_KEY
symbol

RBRACK
]

KW_ENDMODULE
endmodule

EOF


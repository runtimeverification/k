module SET
  imports private INT-SYNTAX
  imports private BASIC-K

  syntax Set [hook(SET.Set)]
  syntax Set ::= Set Set                  [left, function, hook(SET.concat), klabel(_Set_), symbol, assoc, comm, unit(.Set), idem, element(SetItem), format(%1%n%2)]
  syntax Set ::= ".Set"                   [function, total, hook(SET.unit), klabel(.Set), symbol, latex(\dotCt{Set})]
  syntax Set ::= SetItem(KItem)               [function, total, hook(SET.element), klabel(SetItem), symbol, injective]
  syntax Set ::= Set "|Set" Set              [left, function, total, hook(SET.union), comm]
  rule S1:Set |Set S2:Set => S1 (S2 -Set S1) [concrete]
  syntax Set ::= intersectSet(Set, Set)   [function, total, hook(SET.intersection), comm]
  syntax Set ::= Set "-Set" Set           [function, total, hook(SET.difference), latex({#1}-_{\it Set}{#2}), klabel(Set:difference), symbol]
  syntax Bool ::= KItem "in" Set              [function, total, hook(SET.in), klabel(Set:in), symbol]
  syntax Bool ::= Set "<=Set" Set         [function, total, hook(SET.inclusion)]
  syntax Int ::= size(Set)                [function, total, hook(SET.size)]
  syntax KItem ::= choice(Set)                [function, hook(SET.choice), klabel(Set:choice)]
endmodule


module SET-KORE-SYMBOLIC [kore,symbolic]
  imports SET
  imports private K-EQUAL
  imports private BOOL

  //Temporarly rule for #Ceil simplification, should be generated in front-end

// Matching for this version not implemented.
  // rule #Ceil(@S1:Set @S2:Set) =>
  //        {intersectSet(@S1, @S2) #Equals .Set} #And #Ceil(@S1) #And #Ceil(@S2)
  //   [simplification]

//simpler version
  rule #Ceil(@S:Set SetItem(@E:KItem)) =>
         {(@E in @S) #Equals false} #And #Ceil(@S) #And #Ceil(@E)
    [simplification]

  // -Set simplifications
  rule S              -Set .Set           => S          [simplification]
  rule .Set           -Set  _             => .Set       [simplification]
  rule SetItem(X)     -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S) [simplification]
  rule S              -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S) [simplification]
  rule (S SetItem(X)) -Set S              => SetItem(X)
                               ensures notBool (X in S) [simplification]
  rule (S SetItem(X)) -Set SetItem(X)     => S
                               ensures notBool (X in S) [simplification]
  // rule SetItem(X)     -Set S              => SetItem(X)
  //                            requires notBool (X in S)  [simplification]
  // rule (S1 SetItem(X)) -Set (S2 SetItem(X))  => S1 -Set S2
  //                             ensures notBool (X in S1)
  //                             andBool notBool (X in S2) [simplification]

  // |Set simplifications
  rule S    |Set .Set => S    [simplification, comm]
  rule S    |Set S    => S    [simplification]

  rule (S SetItem(X)) |Set SetItem(X) => S SetItem(X)
                             ensures notBool (X in S) [simplification, comm]
  // Currently disabled, see runtimeverification/haskell-backend#3301
  // rule (S SetItem(X)) |Set S          => S SetItem(X)
  //                            ensures notBool (X in S) [simplification, comm]

  // intersectSet simplifications
  rule intersectSet(.Set, _   ) => .Set    [simplification, comm]
  rule intersectSet( S  , S   ) =>  S      [simplification]

  rule intersectSet( S SetItem(X), SetItem(X))     => SetItem(X)
                                                        ensures notBool (X in S)      [simplification, comm]
  // Currently disabled, see runtimeverification/haskell-backend#3294
  // rule intersectSet( S SetItem(X) , S)             => S ensures notBool (X in S)      [simplification, comm]
  rule intersectSet( S1 SetItem(X), S2 SetItem(X)) => intersectSet(S1, S2) SetItem(X)
                                                        ensures notBool (X in S1)
                                                        andBool notBool (X in S2)     [simplification]

  // membership simplifications
  rule _E in .Set           => false   [simplification]
  rule E  in (S SetItem(E)) => true
              ensures notBool (E in S) [simplification]

// These two rules would be sound but impose a giant overhead on `in` evaluation:
  // rule E1 in (S SetItem(E2)) => true requires E1 in S
  //                                 ensures notBool (E2 in S) [simplification]
  // rule E1 in (S SetItem(E2)) => E1 in S requires E1 =/=K E2
  //                                 ensures notBool (E2 in S) [simplification]

  rule X in ((SetItem(X) S) |Set  _            ) => true
                                    ensures notBool (X in S) [simplification]
  rule X in ( _             |Set (SetItem(X) S)) => true
                                    ensures notBool (X in S) [simplification]

endmodule


module SET-SYMBOLIC
  imports SET-KORE-SYMBOLIC
endmodule


module LIST
  imports private INT-SYNTAX
  imports private BASIC-K

  syntax List [hook(LIST.List)]
  syntax List ::= List List               [left, function, total, hook(LIST.concat), klabel(_List_), symbol, smtlib(smt_seq_concat), assoc, unit(.List), element(ListItem), format(%1%n%2)]
  syntax List ::= ".List"                 [function, total, hook(LIST.unit), klabel(.List), symbol, smtlib(smt_seq_nil), latex(\dotCt{List})]
  syntax List ::= ListItem(KItem)             [function, total, hook(LIST.element), klabel(ListItem), symbol, smtlib(smt_seq_elem)]
  syntax KItem ::= List "[" Int "]"           [function, hook(LIST.get), klabel(List:get), symbol]
  syntax List ::= List "[" index: Int "<-" value: KItem "]" [function, hook(LIST.update), klabel(List:set)]
  syntax List ::= makeList(length: Int, value: KItem) [function, hook(LIST.make)]
  syntax List ::= updateList(dest: List, index: Int, src: List) [function, hook(LIST.updateAll)]
  syntax List ::= fillList(List, index: Int, length: Int, value: KItem) [function, hook(LIST.fill)]
  syntax List ::= range(List, fromFront: Int, fromBack: Int)   [function, hook(LIST.range), klabel(List:range), symbol]
  syntax Bool ::= KItem "in" List             [function, total, hook(LIST.in), klabel(_inList_)]
  syntax Int ::= size(List)               [function, total, hook(LIST.size), klabel (sizeList), smtlib(smt_seq_len)]
endmodule


module COLLECTIONS
  imports LIST
  imports SET
  imports MAP

  syntax List ::= Set2List(Set) [function, total, hook(SET.set2list)]
  syntax Set ::= List2Set(List) [function, total, hook(SET.list2set)]
endmodule
===
KW_MODULE
1,1
module

MODNAME
1,8
SET

KW_IMPORTS
2,3
imports

KW_PRIVATE
2,11
private

MODNAME
2,19
INT-SYNTAX

KW_IMPORTS
3,3
imports

KW_PRIVATE
3,11
private

MODNAME
3,19
BASIC-K

KW_SYNTAX
5,3
syntax

ID_UPPER
5,10
Set

LBRACK
5,14
[

ATTR_KEY
5,15
hook

LPAREN
5,19
(

ATTR_CONTENT
5,20
SET.Set

RPAREN
5,27
)

RBRACK
5,28
]

KW_SYNTAX
6,3
syntax

ID_UPPER
6,10
Set

DCOLONEQ
6,14
::=

ID_UPPER
6,18
Set

ID_UPPER
6,22
Set

LBRACK
6,43
[

ATTR_KEY
6,44
left

COMMA
6,48
,

ATTR_KEY
6,50
function

COMMA
6,58
,

ATTR_KEY
6,60
hook

LPAREN
6,64
(

ATTR_CONTENT
6,65
SET.concat

RPAREN
6,75
)

COMMA
6,76
,

ATTR_KEY
6,78
klabel

LPAREN
6,84
(

ATTR_CONTENT
6,85
_Set_

RPAREN
6,90
)

COMMA
6,91
,

ATTR_KEY
6,93
symbol

COMMA
6,99
,

ATTR_KEY
6,101
assoc

COMMA
6,106
,

ATTR_KEY
6,108
comm

COMMA
6,112
,

ATTR_KEY
6,114
unit

LPAREN
6,118
(

ATTR_CONTENT
6,119
.Set

RPAREN
6,123
)

COMMA
6,124
,

ATTR_KEY
6,126
idem

COMMA
6,130
,

ATTR_KEY
6,132
element

LPAREN
6,139
(

ATTR_CONTENT
6,140
SetItem

RPAREN
6,147
)

COMMA
6,148
,

ATTR_KEY
6,150
format

LPAREN
6,156
(

ATTR_CONTENT
6,157
%1%n%2

RPAREN
6,163
)

RBRACK
6,164
]

KW_SYNTAX
7,3
syntax

ID_UPPER
7,10
Set

DCOLONEQ
7,14
::=

STRING
7,18
".Set"

LBRACK
7,43
[

ATTR_KEY
7,44
function

COMMA
7,52
,

ATTR_KEY
7,54
total

COMMA
7,59
,

ATTR_KEY
7,61
hook

LPAREN
7,65
(

ATTR_CONTENT
7,66
SET.unit

RPAREN
7,74
)

COMMA
7,75
,

ATTR_KEY
7,77
klabel

LPAREN
7,83
(

ATTR_CONTENT
7,84
.Set

RPAREN
7,88
)

COMMA
7,89
,

ATTR_KEY
7,91
symbol

COMMA
7,97
,

ATTR_KEY
7,99
latex

LPAREN
7,104
(

ATTR_CONTENT
7,105
\dotCt{Set}

RPAREN
7,116
)

RBRACK
7,117
]

KW_SYNTAX
8,3
syntax

ID_UPPER
8,10
Set

DCOLONEQ
8,14
::=

ID_UPPER
8,18
SetItem

LPAREN
8,25
(

ID_UPPER
8,26
KItem

RPAREN
8,31
)

LBRACK
8,47
[

ATTR_KEY
8,48
function

COMMA
8,56
,

ATTR_KEY
8,58
total

COMMA
8,63
,

ATTR_KEY
8,65
hook

LPAREN
8,69
(

ATTR_CONTENT
8,70
SET.element

RPAREN
8,81
)

COMMA
8,82
,

ATTR_KEY
8,84
klabel

LPAREN
8,90
(

ATTR_CONTENT
8,91
SetItem

RPAREN
8,98
)

COMMA
8,99
,

ATTR_KEY
8,101
symbol

COMMA
8,107
,

ATTR_KEY
8,109
injective

RBRACK
8,118
]

KW_SYNTAX
9,3
syntax

ID_UPPER
9,10
Set

DCOLONEQ
9,14
::=

ID_UPPER
9,18
Set

STRING
9,22
"|Set"

ID_UPPER
9,29
Set

LBRACK
9,46
[

ATTR_KEY
9,47
left

COMMA
9,51
,

ATTR_KEY
9,53
function

COMMA
9,61
,

ATTR_KEY
9,63
total

COMMA
9,68
,

ATTR_KEY
9,70
hook

LPAREN
9,74
(

ATTR_CONTENT
9,75
SET.union

RPAREN
9,84
)

COMMA
9,85
,

ATTR_KEY
9,87
comm

RBRACK
9,91
]

KW_RULE
10,3
rule

BUBBLE
10,8
S1:Set |Set S2:Set => S1 (S2 -Set S1)

LBRACK
10,46
[

ATTR_KEY
10,47
concrete

RBRACK
10,55
]

KW_SYNTAX
11,3
syntax

ID_UPPER
11,10
Set

DCOLONEQ
11,14
::=

ID_LOWER
11,18
intersectSet

LPAREN
11,30
(

ID_UPPER
11,31
Set

COMMA
11,34
,

ID_UPPER
11,36
Set

RPAREN
11,39
)

LBRACK
11,43
[

ATTR_KEY
11,44
function

COMMA
11,52
,

ATTR_KEY
11,54
total

COMMA
11,59
,

ATTR_KEY
11,61
hook

LPAREN
11,65
(

ATTR_CONTENT
11,66
SET.intersection

RPAREN
11,82
)

COMMA
11,83
,

ATTR_KEY
11,85
comm

RBRACK
11,89
]

KW_SYNTAX
12,3
syntax

ID_UPPER
12,10
Set

DCOLONEQ
12,14
::=

ID_UPPER
12,18
Set

STRING
12,22
"-Set"

ID_UPPER
12,29
Set

LBRACK
12,43
[

ATTR_KEY
12,44
function

COMMA
12,52
,

ATTR_KEY
12,54
total

COMMA
12,59
,

ATTR_KEY
12,61
hook

LPAREN
12,65
(

ATTR_CONTENT
12,66
SET.difference

RPAREN
12,80
)

COMMA
12,81
,

ATTR_KEY
12,83
latex

LPAREN
12,88
(

ATTR_CONTENT
12,89
{#1}-_{\it Set}{#2}

RPAREN
12,108
)

COMMA
12,109
,

ATTR_KEY
12,111
klabel

LPAREN
12,117
(

ATTR_CONTENT
12,118
Set:difference

RPAREN
12,132
)

COMMA
12,133
,

ATTR_KEY
12,135
symbol

RBRACK
12,141
]

KW_SYNTAX
13,3
syntax

ID_UPPER
13,10
Bool

DCOLONEQ
13,15
::=

ID_UPPER
13,19
KItem

STRING
13,25
"in"

ID_UPPER
13,30
Set

LBRACK
13,47
[

ATTR_KEY
13,48
function

COMMA
13,56
,

ATTR_KEY
13,58
total

COMMA
13,63
,

ATTR_KEY
13,65
hook

LPAREN
13,69
(

ATTR_CONTENT
13,70
SET.in

RPAREN
13,76
)

COMMA
13,77
,

ATTR_KEY
13,79
klabel

LPAREN
13,85
(

ATTR_CONTENT
13,86
Set:in

RPAREN
13,92
)

COMMA
13,93
,

ATTR_KEY
13,95
symbol

RBRACK
13,101
]

KW_SYNTAX
14,3
syntax

ID_UPPER
14,10
Bool

DCOLONEQ
14,15
::=

ID_UPPER
14,19
Set

STRING
14,23
"<=Set"

ID_UPPER
14,31
Set

LBRACK
14,43
[

ATTR_KEY
14,44
function

COMMA
14,52
,

ATTR_KEY
14,54
total

COMMA
14,59
,

ATTR_KEY
14,61
hook

LPAREN
14,65
(

ATTR_CONTENT
14,66
SET.inclusion

RPAREN
14,79
)

RBRACK
14,80
]

KW_SYNTAX
15,3
syntax

ID_UPPER
15,10
Int

DCOLONEQ
15,14
::=

ID_LOWER
15,18
size

LPAREN
15,22
(

ID_UPPER
15,23
Set

RPAREN
15,26
)

LBRACK
15,43
[

ATTR_KEY
15,44
function

COMMA
15,52
,

ATTR_KEY
15,54
total

COMMA
15,59
,

ATTR_KEY
15,61
hook

LPAREN
15,65
(

ATTR_CONTENT
15,66
SET.size

RPAREN
15,74
)

RBRACK
15,75
]

KW_SYNTAX
16,3
syntax

ID_UPPER
16,10
KItem

DCOLONEQ
16,16
::=

ID_LOWER
16,20
choice

LPAREN
16,26
(

ID_UPPER
16,27
Set

RPAREN
16,30
)

LBRACK
16,47
[

ATTR_KEY
16,48
function

COMMA
16,56
,

ATTR_KEY
16,58
hook

LPAREN
16,62
(

ATTR_CONTENT
16,63
SET.choice

RPAREN
16,73
)

COMMA
16,74
,

ATTR_KEY
16,76
klabel

LPAREN
16,82
(

ATTR_CONTENT
16,83
Set:choice

RPAREN
16,93
)

RBRACK
16,94
]

KW_ENDMODULE
17,1
endmodule

KW_MODULE
20,1
module

MODNAME
20,8
SET-KORE-SYMBOLIC

LBRACK
20,26
[

ATTR_KEY
20,27
kore

COMMA
20,31
,

ATTR_KEY
20,32
symbolic

RBRACK
20,40
]

KW_IMPORTS
21,3
imports

MODNAME
21,11
SET

KW_IMPORTS
22,3
imports

KW_PRIVATE
22,11
private

MODNAME
22,19
K-EQUAL

KW_IMPORTS
23,3
imports

KW_PRIVATE
23,11
private

MODNAME
23,19
BOOL

KW_RULE
33,3
rule

BUBBLE
33,8
#Ceil(@S:Set SetItem(@E:KItem)) =>
         {(@E in @S) #Equals false} #And #Ceil(@S) #And #Ceil(@E)

LBRACK
35,5
[

ATTR_KEY
35,6
simplification

RBRACK
35,20
]

KW_RULE
38,3
rule

BUBBLE
38,8
S              -Set .Set           => S

LBRACK
38,57
[

ATTR_KEY
38,58
simplification

RBRACK
38,72
]

KW_RULE
39,3
rule

BUBBLE
39,8
.Set           -Set  _             => .Set

LBRACK
39,57
[

ATTR_KEY
39,58
simplification

RBRACK
39,72
]

KW_RULE
40,3
rule

BUBBLE
40,8
SetItem(X)     -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S)

LBRACK
41,57
[

ATTR_KEY
41,58
simplification

RBRACK
41,72
]

KW_RULE
42,3
rule

BUBBLE
42,8
S              -Set (S SetItem(X)) => .Set
                               ensures notBool (X in S)

LBRACK
43,57
[

ATTR_KEY
43,58
simplification

RBRACK
43,72
]

KW_RULE
44,3
rule

BUBBLE
44,8
(S SetItem(X)) -Set S              => SetItem(X)
                               ensures notBool (X in S)

LBRACK
45,57
[

ATTR_KEY
45,58
simplification

RBRACK
45,72
]

KW_RULE
46,3
rule

BUBBLE
46,8
(S SetItem(X)) -Set SetItem(X)     => S
                               ensures notBool (X in S)

LBRACK
47,57
[

ATTR_KEY
47,58
simplification

RBRACK
47,72
]

KW_RULE
55,3
rule

BUBBLE
55,8
S    |Set .Set => S

LBRACK
55,31
[

ATTR_KEY
55,32
simplification

COMMA
55,46
,

ATTR_KEY
55,48
comm

RBRACK
55,52
]

KW_RULE
56,3
rule

BUBBLE
56,8
S    |Set S    => S

LBRACK
56,31
[

ATTR_KEY
56,32
simplification

RBRACK
56,46
]

KW_RULE
58,3
rule

BUBBLE
58,8
(S SetItem(X)) |Set SetItem(X) => S SetItem(X)
                             ensures notBool (X in S)

LBRACK
59,55
[

ATTR_KEY
59,56
simplification

COMMA
59,70
,

ATTR_KEY
59,72
comm

RBRACK
59,76
]

KW_RULE
65,3
rule

BUBBLE
65,8
intersectSet(.Set, _   ) => .Set

LBRACK
65,44
[

ATTR_KEY
65,45
simplification

COMMA
65,59
,

ATTR_KEY
65,61
comm

RBRACK
65,65
]

KW_RULE
66,3
rule

BUBBLE
66,8
intersectSet( S  , S   ) =>  S

LBRACK
66,44
[

ATTR_KEY
66,45
simplification

RBRACK
66,59
]

KW_RULE
68,3
rule

BUBBLE
68,8
intersectSet( S SetItem(X), SetItem(X))     => SetItem(X)
                                                        ensures notBool (X in S)

LBRACK
69,87
[

ATTR_KEY
69,88
simplification

COMMA
69,102
,

ATTR_KEY
69,104
comm

RBRACK
69,108
]

KW_RULE
72,3
rule

BUBBLE
72,8
intersectSet( S1 SetItem(X), S2 SetItem(X)) => intersectSet(S1, S2) SetItem(X)
                                                        ensures notBool (X in S1)
                                                        andBool notBool (X in S2)

LBRACK
74,87
[

ATTR_KEY
74,88
simplification

RBRACK
74,102
]

KW_RULE
77,3
rule

BUBBLE
77,8
_E in .Set           => false

LBRACK
77,40
[

ATTR_KEY
77,41
simplification

RBRACK
77,55
]

KW_RULE
78,3
rule

BUBBLE
78,8
E  in (S SetItem(E)) => true
              ensures notBool (E in S)

LBRACK
79,40
[

ATTR_KEY
79,41
simplification

RBRACK
79,55
]

KW_RULE
87,3
rule

BUBBLE
87,8
X in ((SetItem(X) S) |Set  _            ) => true
                                    ensures notBool (X in S)

LBRACK
88,62
[

ATTR_KEY
88,63
simplification

RBRACK
88,77
]

KW_RULE
89,3
rule

BUBBLE
89,8
X in ( _             |Set (SetItem(X) S)) => true
                                    ensures notBool (X in S)

LBRACK
90,62
[

ATTR_KEY
90,63
simplification

RBRACK
90,77
]

KW_ENDMODULE
92,1
endmodule

KW_MODULE
95,1
module

MODNAME
95,8
SET-SYMBOLIC

KW_IMPORTS
96,3
imports

MODNAME
96,11
SET-KORE-SYMBOLIC

KW_ENDMODULE
97,1
endmodule

KW_MODULE
100,1
module

MODNAME
100,8
LIST

KW_IMPORTS
101,3
imports

KW_PRIVATE
101,11
private

MODNAME
101,19
INT-SYNTAX

KW_IMPORTS
102,3
imports

KW_PRIVATE
102,11
private

MODNAME
102,19
BASIC-K

KW_SYNTAX
104,3
syntax

ID_UPPER
104,10
List

LBRACK
104,15
[

ATTR_KEY
104,16
hook

LPAREN
104,20
(

ATTR_CONTENT
104,21
LIST.List

RPAREN
104,30
)

RBRACK
104,31
]

KW_SYNTAX
105,3
syntax

ID_UPPER
105,10
List

DCOLONEQ
105,15
::=

ID_UPPER
105,19
List

ID_UPPER
105,24
List

LBRACK
105,43
[

ATTR_KEY
105,44
left

COMMA
105,48
,

ATTR_KEY
105,50
function

COMMA
105,58
,

ATTR_KEY
105,60
total

COMMA
105,65
,

ATTR_KEY
105,67
hook

LPAREN
105,71
(

ATTR_CONTENT
105,72
LIST.concat

RPAREN
105,83
)

COMMA
105,84
,

ATTR_KEY
105,86
klabel

LPAREN
105,92
(

ATTR_CONTENT
105,93
_List_

RPAREN
105,99
)

COMMA
105,100
,

ATTR_KEY
105,102
symbol

COMMA
105,108
,

ATTR_KEY
105,110
smtlib

LPAREN
105,116
(

ATTR_CONTENT
105,117
smt_seq_concat

RPAREN
105,131
)

COMMA
105,132
,

ATTR_KEY
105,134
assoc

COMMA
105,139
,

ATTR_KEY
105,141
unit

LPAREN
105,145
(

ATTR_CONTENT
105,146
.List

RPAREN
105,151
)

COMMA
105,152
,

ATTR_KEY
105,154
element

LPAREN
105,161
(

ATTR_CONTENT
105,162
ListItem

RPAREN
105,170
)

COMMA
105,171
,

ATTR_KEY
105,173
format

LPAREN
105,179
(

ATTR_CONTENT
105,180
%1%n%2

RPAREN
105,186
)

RBRACK
105,187
]

KW_SYNTAX
106,3
syntax

ID_UPPER
106,10
List

DCOLONEQ
106,15
::=

STRING
106,19
".List"

LBRACK
106,43
[

ATTR_KEY
106,44
function

COMMA
106,52
,

ATTR_KEY
106,54
total

COMMA
106,59
,

ATTR_KEY
106,61
hook

LPAREN
106,65
(

ATTR_CONTENT
106,66
LIST.unit

RPAREN
106,75
)

COMMA
106,76
,

ATTR_KEY
106,78
klabel

LPAREN
106,84
(

ATTR_CONTENT
106,85
.List

RPAREN
106,90
)

COMMA
106,91
,

ATTR_KEY
106,93
symbol

COMMA
106,99
,

ATTR_KEY
106,101
smtlib

LPAREN
106,107
(

ATTR_CONTENT
106,108
smt_seq_nil

RPAREN
106,119
)

COMMA
106,120
,

ATTR_KEY
106,122
latex

LPAREN
106,127
(

ATTR_CONTENT
106,128
\dotCt{List}

RPAREN
106,140
)

RBRACK
106,141
]

KW_SYNTAX
107,3
syntax

ID_UPPER
107,10
List

DCOLONEQ
107,15
::=

ID_UPPER
107,19
ListItem

LPAREN
107,27
(

ID_UPPER
107,28
KItem

RPAREN
107,33
)

LBRACK
107,47
[

ATTR_KEY
107,48
function

COMMA
107,56
,

ATTR_KEY
107,58
total

COMMA
107,63
,

ATTR_KEY
107,65
hook

LPAREN
107,69
(

ATTR_CONTENT
107,70
LIST.element

RPAREN
107,82
)

COMMA
107,83
,

ATTR_KEY
107,85
klabel

LPAREN
107,91
(

ATTR_CONTENT
107,92
ListItem

RPAREN
107,100
)

COMMA
107,101
,

ATTR_KEY
107,103
symbol

COMMA
107,109
,

ATTR_KEY
107,111
smtlib

LPAREN
107,117
(

ATTR_CONTENT
107,118
smt_seq_elem

RPAREN
107,130
)

RBRACK
107,131
]

KW_SYNTAX
108,3
syntax

ID_UPPER
108,10
KItem

DCOLONEQ
108,16
::=

ID_UPPER
108,20
List

STRING
108,25
"["

ID_UPPER
108,29
Int

STRING
108,33
"]"

LBRACK
108,47
[

ATTR_KEY
108,48
function

COMMA
108,56
,

ATTR_KEY
108,58
hook

LPAREN
108,62
(

ATTR_CONTENT
108,63
LIST.get

RPAREN
108,71
)

COMMA
108,72
,

ATTR_KEY
108,74
klabel

LPAREN
108,80
(

ATTR_CONTENT
108,81
List:get

RPAREN
108,89
)

COMMA
108,90
,

ATTR_KEY
108,92
symbol

RBRACK
108,98
]

KW_SYNTAX
109,3
syntax

ID_UPPER
109,10
List

DCOLONEQ
109,15
::=

ID_UPPER
109,19
List

STRING
109,24
"["

ID_LOWER
109,28
index

COLON
109,33
:

ID_UPPER
109,35
Int

STRING
109,39
"<-"

ID_LOWER
109,44
value

COLON
109,49
:

ID_UPPER
109,51
KItem

STRING
109,57
"]"

LBRACK
109,61
[

ATTR_KEY
109,62
function

COMMA
109,70
,

ATTR_KEY
109,72
hook

LPAREN
109,76
(

ATTR_CONTENT
109,77
LIST.update

RPAREN
109,88
)

COMMA
109,89
,

ATTR_KEY
109,91
klabel

LPAREN
109,97
(

ATTR_CONTENT
109,98
List:set

RPAREN
109,106
)

RBRACK
109,107
]

KW_SYNTAX
110,3
syntax

ID_UPPER
110,10
List

DCOLONEQ
110,15
::=

ID_LOWER
110,19
makeList

LPAREN
110,27
(

ID_LOWER
110,28
length

COLON
110,34
:

ID_UPPER
110,36
Int

COMMA
110,39
,

ID_LOWER
110,41
value

COLON
110,46
:

ID_UPPER
110,48
KItem

RPAREN
110,53
)

LBRACK
110,55
[

ATTR_KEY
110,56
function

COMMA
110,64
,

ATTR_KEY
110,66
hook

LPAREN
110,70
(

ATTR_CONTENT
110,71
LIST.make

RPAREN
110,80
)

RBRACK
110,81
]

KW_SYNTAX
111,3
syntax

ID_UPPER
111,10
List

DCOLONEQ
111,15
::=

ID_LOWER
111,19
updateList

LPAREN
111,29
(

ID_LOWER
111,30
dest

COLON
111,34
:

ID_UPPER
111,36
List

COMMA
111,40
,

ID_LOWER
111,42
index

COLON
111,47
:

ID_UPPER
111,49
Int

COMMA
111,52
,

ID_LOWER
111,54
src

COLON
111,57
:

ID_UPPER
111,59
List

RPAREN
111,63
)

LBRACK
111,65
[

ATTR_KEY
111,66
function

COMMA
111,74
,

ATTR_KEY
111,76
hook

LPAREN
111,80
(

ATTR_CONTENT
111,81
LIST.updateAll

RPAREN
111,95
)

RBRACK
111,96
]

KW_SYNTAX
112,3
syntax

ID_UPPER
112,10
List

DCOLONEQ
112,15
::=

ID_LOWER
112,19
fillList

LPAREN
112,27
(

ID_UPPER
112,28
List

COMMA
112,32
,

ID_LOWER
112,34
index

COLON
112,39
:

ID_UPPER
112,41
Int

COMMA
112,44
,

ID_LOWER
112,46
length

COLON
112,52
:

ID_UPPER
112,54
Int

COMMA
112,57
,

ID_LOWER
112,59
value

COLON
112,64
:

ID_UPPER
112,66
KItem

RPAREN
112,71
)

LBRACK
112,73
[

ATTR_KEY
112,74
function

COMMA
112,82
,

ATTR_KEY
112,84
hook

LPAREN
112,88
(

ATTR_CONTENT
112,89
LIST.fill

RPAREN
112,98
)

RBRACK
112,99
]

KW_SYNTAX
113,3
syntax

ID_UPPER
113,10
List

DCOLONEQ
113,15
::=

ID_LOWER
113,19
range

LPAREN
113,24
(

ID_UPPER
113,25
List

COMMA
113,29
,

ID_LOWER
113,31
fromFront

COLON
113,40
:

ID_UPPER
113,42
Int

COMMA
113,45
,

ID_LOWER
113,47
fromBack

COLON
113,55
:

ID_UPPER
113,57
Int

RPAREN
113,60
)

LBRACK
113,64
[

ATTR_KEY
113,65
function

COMMA
113,73
,

ATTR_KEY
113,75
hook

LPAREN
113,79
(

ATTR_CONTENT
113,80
LIST.range

RPAREN
113,90
)

COMMA
113,91
,

ATTR_KEY
113,93
klabel

LPAREN
113,99
(

ATTR_CONTENT
113,100
List:range

RPAREN
113,110
)

COMMA
113,111
,

ATTR_KEY
113,113
symbol

RBRACK
113,119
]

KW_SYNTAX
114,3
syntax

ID_UPPER
114,10
Bool

DCOLONEQ
114,15
::=

ID_UPPER
114,19
KItem

STRING
114,25
"in"

ID_UPPER
114,30
List

LBRACK
114,47
[

ATTR_KEY
114,48
function

COMMA
114,56
,

ATTR_KEY
114,58
total

COMMA
114,63
,

ATTR_KEY
114,65
hook

LPAREN
114,69
(

ATTR_CONTENT
114,70
LIST.in

RPAREN
114,77
)

COMMA
114,78
,

ATTR_KEY
114,80
klabel

LPAREN
114,86
(

ATTR_CONTENT
114,87
_inList_

RPAREN
114,95
)

RBRACK
114,96
]

KW_SYNTAX
115,3
syntax

ID_UPPER
115,10
Int

DCOLONEQ
115,14
::=

ID_LOWER
115,18
size

LPAREN
115,22
(

ID_UPPER
115,23
List

RPAREN
115,27
)

LBRACK
115,43
[

ATTR_KEY
115,44
function

COMMA
115,52
,

ATTR_KEY
115,54
total

COMMA
115,59
,

ATTR_KEY
115,61
hook

LPAREN
115,65
(

ATTR_CONTENT
115,66
LIST.size

RPAREN
115,75
)

COMMA
115,76
,

ATTR_KEY
115,78
klabel

LPAREN
115,85
(

ATTR_CONTENT
115,86
sizeList

RPAREN
115,94
)

COMMA
115,95
,

ATTR_KEY
115,97
smtlib

LPAREN
115,103
(

ATTR_CONTENT
115,104
smt_seq_len

RPAREN
115,115
)

RBRACK
115,116
]

KW_ENDMODULE
116,1
endmodule

KW_MODULE
119,1
module

MODNAME
119,8
COLLECTIONS

KW_IMPORTS
120,3
imports

MODNAME
120,11
LIST

KW_IMPORTS
121,3
imports

MODNAME
121,11
SET

KW_IMPORTS
122,3
imports

MODNAME
122,11
MAP

KW_SYNTAX
124,3
syntax

ID_UPPER
124,10
List

DCOLONEQ
124,15
::=

ID_UPPER
124,19
Set2List

LPAREN
124,27
(

ID_UPPER
124,28
Set

RPAREN
124,31
)

LBRACK
124,33
[

ATTR_KEY
124,34
function

COMMA
124,42
,

ATTR_KEY
124,44
total

COMMA
124,49
,

ATTR_KEY
124,51
hook

LPAREN
124,55
(

ATTR_CONTENT
124,56
SET.set2list

RPAREN
124,68
)

RBRACK
124,69
]

KW_SYNTAX
125,3
syntax

ID_UPPER
125,10
Set

DCOLONEQ
125,14
::=

ID_UPPER
125,18
List2Set

LPAREN
125,26
(

ID_UPPER
125,27
List

RPAREN
125,31
)

LBRACK
125,33
[

ATTR_KEY
125,34
function

COMMA
125,42
,

ATTR_KEY
125,44
total

COMMA
125,49
,

ATTR_KEY
125,51
hook

LPAREN
125,55
(

ATTR_CONTENT
125,56
SET.list2set

RPAREN
125,68
)

RBRACK
125,69
]

KW_ENDMODULE
126,1
endmodule

EOF
126,9


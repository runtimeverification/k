name: 'Test PR'
on:
  pull_request:
    branches:
      - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version-bump:
    name: 'Version Bump'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          # fetch-depth 0 means deep clone the repo
          fetch-depth: 0
      - name: 'Update Version'
        run: |
          set -x
          git config user.name devops
          git config user.email devops@runtimeverification.com
          ./package/version.sh bump $(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh sub
          if git add --update && git commit --message "Set Version: $(cat package/version)"; then
            git push origin HEAD:${GITHUB_HEAD_REF}
          fi

  nix-flake-submodules:
    name: 'Nix flake sumbodule sync'
    runs-on: ubuntu-latest
    steps:
      - id: config
        run: |
          ref=${{ github.ref }}
          if [ "${{ github.event_name }}" == 'pull_request' ]; then
            ref="${{ github.event.pull_request.head.sha }}"
          fi
          ref="${ref#refs/heads/}"
          echo "::set-output name=ref::$ref"
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ steps.config.outputs.ref }}
          submodules: recursive

      - name: 'Install Nix'
        uses: cachix/install-nix-action@v15
        with:
          extra_nix_config: |
            substituters = http://cache.nixos.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: runtimeverification
          extraPullNames: kore
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'


      - name: Update Nix flake inputs from submodules
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
        run: |
          if ! GC_DONT_GC=1 nix run .#check-submodules ; then
            if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
              if git status -s -b | grep -q '^##.*(no branch)$'; then
                echo 2>&1 "Error: Git is in detached HEAD state"
                exit 1
              fi
            fi
            GC_DONT_GC=1 nix run .#update-from-submodules
            if [ -n "$(git status --porcelain 'flake.lock')" ]; then
              if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
                echo 2>&1 "Error: submodules do not match the flake inputs"
                git diff
                exit 1
              elif [[ $GITHUB_EVENT_NAME == 'push' ]]; then
                git add 'flake.lock'
                git commit -m 'Sync flake inputs to submodules'
                git push
              else
                echo 2>&1 "Error: event not supported: $GITHUB_EVENT_NAME"
                exit 1
              fi
            fi
          fi

  nix-maven:
    name: 'Nix: Maven'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v2.3.4
        with:
          submodules: recursive

      - name: 'Install Nix'
        uses: cachix/install-nix-action@v14.1
        with:
          install_url: "https://releases.nixos.org/nix/nix-2.3.16/install"

      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: runtimeverification
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
          skipPush: true

      - name: 'Update Maven dependencies'
        run: ./nix/update-maven.sh

      - name: 'Commit changes'
        env:
          file_pattern: 'nix/'
        run: |
          git config user.name rv-devops
          git config user.email devops@runtimeverification.com
          if [ -n "$(git status --porcelain $file_pattern)" ]; then
            if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
              echo "::error :: The Maven dependencies changed, so the Nix lock files need to be updated. Please run ./nix/update-maven.sh to update the lock files, or move this branch to the runtimeverification/k repository."
              git diff
              exit 1
            elif [[ $GITHUB_EVENT_NAME == 'push' ]]; then
              git add $file_pattern
              git commit -m 'Update Nix lock files'
              git push
            else
              echo "::error :: Event type not supported: $GITHUB_EVENT_NAME"
              exit 1
            fi
          fi

  test-k:
    needs: nix-maven
    name: 'K Tests'
    runs-on: [self-hosted, linux]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        run: |
          docker build . --file .github/workflows/Dockerfile --tag runtimeverification/k-ci \
            --build-arg BASE_IMAGE=ubuntu:jammy --build-arg LLVM_VERSION=14                 \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                        \
            --name k-ci                     \
            --rm -it                        \
            --detach                        \
            --workdir /opt/workspace        \
            --user $(id -u):$(id -g)        \
            -v ${HOME}:${HOME}              \
            -v "$(pwd):/opt/workspace"      \
            -v "/etc/passwd:/etc/passwd:ro" \
            -v "/etc/group:/etc/group:ro"   \
            runtimeverification/k-ci
      - name: 'Build K'
        run: docker exec -t k-ci /bin/bash -c 'mvn package -DskipTests'
      - name: 'Unit Tests'
        run: docker exec -t k-ci /bin/bash -c 'mvn --batch-mode verify -U'
      - name: 'Check out k-exercises'
        uses: actions/checkout@v3
        with:
          repository: kframework/k-exercises
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          submodules: recursive
          path: k-exercises
      - name: 'Tutorial Integration Tests'
        run: |
          docker exec -t k-ci /bin/bash -c 'k-distribution/target/release/k/bin/spawn-kserver kserver.log'
          docker exec -t k-ci /bin/bash -c 'cd k-exercises/tutorial && make -j`nproc` --output-sync'
          docker exec -t k-ci /bin/bash -c 'cd k-distribution/k-tutorial/1_basic && ./test_kompile.sh'
          docker exec -t k-ci /bin/bash -c 'cd k-distribution/k-tutorial/1_basic && ./test_kompile.sh'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop k-ci || true

  test-ubuntu-package:
    # needs: nix-maven
    name: 'K Ubuntu Jammy Package'
    runs-on: [self-hosted, linux]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          path: k-repo
          submodules: recursive
      - name: 'Set up Docker Build Image'
        run: |
          workspace=$(pwd)
          cd k-repo
          docker build . --file .github/workflows/Dockerfile --tag runtimeverification/k-jammy-package-build \
            --build-arg BASE_IMAGE=ubuntu:jammy --build-arg LLVM_VERSION=14                                  \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                         \
            --name k-jammy-package-build     \
            --rm -it                         \
            --detach                         \
            --workdir /opt/workspace/k-repo  \
            --user $(id -u):$(id -g)         \
            -v ${HOME}:${HOME}               \
            -v "${workspace}:/opt/workspace" \
            -v "/etc/passwd:/etc/passwd:ro"  \
            -v "/etc/group:/etc/group:ro"    \
            runtimeverification/k-jammy-package-build
      - name: 'Build Jammy Package'
        run: |
          docker exec -t k-jammy-package-build /bin/bash -c 'mv package/debian debian'
          docker exec -t k-jammy-package-build /bin/bash -c 'mv debian/compat.jammy debian/compat'
          docker exec -t k-jammy-package-build /bin/bash -c 'mv debian/control.jammy debian/control'
          docker exec -t k-jammy-package-build /bin/bash -c 'mv debian/rules.jammy debian/rules'
          docker exec -t k-jammy-package-build /bin/bash -c 'dpkg-buildpackage'
          docker stop k-jammy-package-build
      - name: 'Set up Docker Test Image'
        run: |
          workspace=$(pwd)
          cd k-repo
          docker run                         \
            --name k-jammy-package-test      \
            --rm -it                         \
            --detach                         \
            --workdir /opt/workspace         \
            -v ${HOME}:${HOME}               \
            -v "${workspace}:/opt/workspace" \
            -v "/etc/passwd:/etc/passwd:ro"  \
            -v "/etc/group:/etc/group:ro"    \
            ubuntu:jammy
      - name: 'Test Jammy Package'
        run: |
          docker exec -t k-jammy-package-test /bin/bash -c 'k-repo/src/main/scripts/test-in-container-debian'
          docker stop k-jammy-package-test
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop k-jammy-package-build || true
          docker stop k-jammy-package-test || true

  build-nix-flake:
    name: 'Nix flake'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v2.3.4
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'Install Nix'
        uses: cachix/install-nix-action@v15
        with:
          extra_nix_config: |
            substituters = http://cache.nixos.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: runtimeverification
          extraPullNames: kore
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: 'Build K Framework'
        run: GC_DONT_GC=1 nix build .

  test-nix:
    name: 'Nix'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v2.3.4
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: recursive

      - name: 'Install Nix'
        uses: cachix/install-nix-action@v14.1
        with:
          install_url: "https://releases.nixos.org/nix/nix-2.3.16/install"

      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: runtimeverification
          extraPullNames: kore
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      - name: 'Build K Framework'
        run: nix-build -A k -A llvm-backend -A haskell-backend

      - name: 'Build K Framework with LTO'
        run: nix-build -A k -A llvm-backend -A haskell-backend --arg release true
        if: ${{ !startsWith(matrix.os, 'macos') }}

      - name: 'Check development environment'
        run: nix-shell --run "echo OK"

      - name: 'Run selected integration tests'
        run: nix-build test.nix --argstr test help
